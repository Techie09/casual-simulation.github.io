(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{48:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return u})),a.d(t,"rightToc",(function(){return r})),a.d(t,"PossibleValuesTable",(function(){return d})),a.d(t,"PossibleValue",(function(){return h})),a.d(t,"PossibleValueCode",(function(){return x})),a.d(t,"AnyColorValues",(function(){return p})),a.d(t,"TagLink",(function(){return O})),a.d(t,"NormalCode",(function(){return j})),a.d(t,"LabelAnchorValues",(function(){return m})),a.d(t,"default",(function(){return T}));var l=a(0),b=a.n(l),o=a(62);function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var l in a)Object.prototype.hasOwnProperty.call(a,l)&&(e[l]=a[l])}return e}).apply(this,arguments)}function n(e,t){if(null==e)return{};var a,l,b=function(e,t){if(null==e)return{};var a,l,b={},o=Object.keys(e);for(l=0;l<o.length;l++)a=o[l],t.indexOf(a)>=0||(b[a]=e[a]);return b}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)a=o[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(b[a]=e[a])}return b}function s(e){return function(e){if(Array.isArray(e)){for(var t=0,a=new Array(e.length);t<e.length;t++)a[t]=e[t];return a}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e){if(null==e)throw new TypeError("Cannot destructure undefined")}var u={id:"tags",title:"Tags",sidebar_label:"Tags"},r=[{value:"Info Tags",id:"info-tags",children:[{value:"id",id:"id",children:[]},{value:"aux.creator",id:"auxcreator",children:[]}]},{value:"Behavior Tags",id:"behavior-tags",children:[{value:"aux.movable",id:"auxmovable",children:[]},{value:"aux.stackable",id:"auxstackable",children:[]},{value:"aux.mergable",id:"auxmergable",children:[]},{value:"aux.destroyable",id:"auxdestroyable",children:[]},{value:"aux.editable",id:"auxeditable",children:[]},{value:"aux.listening",id:"auxlistening",children:[]}]},{value:"Visualization Tags",id:"visualization-tags",children:[{value:"aux.color",id:"auxcolor",children:[]},{value:"aux.stroke.color",id:"auxstrokecolor",children:[]},{value:"aux.stroke.width",id:"auxstrokewidth",children:[]},{value:"aux.line.to",id:"auxlineto",children:[]},{value:"aux.line.style",id:"auxlinestyle",children:[]},{value:"aux.line.color",id:"auxlinecolor",children:[]},{value:"aux.label",id:"auxlabel",children:[]},{value:"aux.label.color",id:"auxlabelcolor",children:[]},{value:"aux.label.size",id:"auxlabelsize",children:[]},{value:"aux.label.size.mode",id:"auxlabelsizemode",children:[]},{value:"aux.label.anchor",id:"auxlabelanchor",children:[]},{value:"aux.scale",id:"auxscale",children:[]},{value:"aux.scale.x",id:"auxscalex",children:[]},{value:"aux.scale.y",id:"auxscaley",children:[]},{value:"aux.scale.z",id:"auxscalez",children:[]},{value:"aux.image",id:"auximage",children:[]},{value:"aux.shape",id:"auxshape",children:[]},{value:"aux.progressBar",id:"auxprogressbar",children:[]},{value:"aux.progressBar.color",id:"auxprogressbarcolor",children:[]},{value:"aux.progressBar.backgroundColor",id:"auxprogressbarbackgroundcolor",children:[]},{value:"aux.progressBar.anchor",id:"auxprogressbaranchor",children:[]}]},{value:"Context Tags",id:"context-tags",children:[{value:"[context]",id:"context",children:[]},{value:"[context].sortOrder",id:"contextsortorder",children:[]},{value:"[context].x",id:"contextx",children:[]},{value:"[context].y",id:"contexty",children:[]},{value:"[context].z",id:"contextz",children:[]},{value:"[context].rotation.x",id:"contextrotationx",children:[]},{value:"[context].rotation.y",id:"contextrotationy",children:[]},{value:"[context].rotation.z",id:"contextrotationz",children:[]}]},{value:"Context Config Tags",id:"context-config-tags",children:[{value:"aux.context",id:"auxcontext",children:[]},{value:"aux.context.color",id:"auxcontextcolor",children:[]},{value:"aux.context.locked",id:"auxcontextlocked",children:[]},{value:"aux.context.visualize",id:"auxcontextvisualize",children:[]},{value:"aux.context.x",id:"auxcontextx",children:[]},{value:"aux.context.y",id:"auxcontexty",children:[]},{value:"aux.context.z",id:"auxcontextz",children:[]},{value:"aux.context.rotation.x",id:"auxcontextrotationx",children:[]},{value:"aux.context.rotation.y",id:"auxcontextrotationy",children:[]},{value:"aux.context.rotation.z",id:"auxcontextrotationz",children:[]},{value:"aux.context.inventory.color",id:"auxcontextinventorycolor",children:[]},{value:"aux.context.inventory.height",id:"auxcontextinventoryheight",children:[]},{value:"aux.context.inventory.visible",id:"auxcontextinventoryvisible",children:[]},{value:"aux.context.inventory.pannable",id:"auxcontextinventorypannable",children:[]},{value:"aux.context.inventory.resizable",id:"auxcontextinventoryresizable",children:[]},{value:"aux.context.inventory.rotatable",id:"auxcontextinventoryrotatable",children:[]},{value:"aux.context.inventory.zoomable",id:"auxcontextinventoryzoomable",children:[]},{value:"aux.context.grid.scale",id:"auxcontextgridscale",children:[]},{value:"aux.context.surface.size",id:"auxcontextsurfacesize",children:[]},{value:"aux.context.surface.scale",id:"auxcontextsurfacescale",children:[]},{value:"aux.context.surface.minimized",id:"auxcontextsurfaceminimized",children:[]},{value:"aux.context.surface.movable",id:"auxcontextsurfacemovable",children:[]},{value:"aux.context.devices.visible",id:"auxcontextdevicesvisible",children:[]},{value:"aux.context.pannable",id:"auxcontextpannable",children:[]},{value:"aux.context.rotatable",id:"auxcontextrotatable",children:[]},{value:"aux.context.zoomable",id:"auxcontextzoomable",children:[]}]},{value:"Channel Config Tags",id:"channel-config-tags",children:[{value:"aux.scene.color",id:"auxscenecolor",children:[]},{value:"aux.scene.user.player.color",id:"auxsceneuserplayercolor",children:[]},{value:"aux.scene.user.builder.color",id:"auxsceneuserbuildercolor",children:[]}]}],d=function(e){var t=e.children;return Object(o.b)("table",null,Object(o.b)("thead",null,Object(o.b)("tr",null,Object(o.b)("th",null,"Value"),Object(o.b)("th",null,"Description"))),Object(o.b)("tbody",null,t))},h=function(e){var t=e.value,a=e.children;return Object(o.b)("tr",null,Object(o.b)("td",null,t),Object(o.b)("td",null,a))},x=function(e){var t=e.value,a=e.children;return Object(o.b)(h,{value:Object(o.b)("code",null,t),mdxType:"PossibleValue"},a)},p=function(e){return c(e),Object(o.b)(b.a.Fragment,null,Object(o.b)(h,{value:"Any X11 Color",mdxType:"PossibleValue"},Object(o.b)("a",{href:"https://en.wikipedia.org/wiki/X11_color_names",target:"_blank"},"X11 colors")," are a list of standard colors that web browsers support."),Object(o.b)(h,{value:"Any Hex Color",mdxType:"PossibleValue"},Object(o.b)("a",{href:"https://en.wikipedia.org/wiki/Web_colors#Hex_triplet",target:"_blank"},"Hex colors")," are three or six digit numbers that specify a color by its red, green, and blue components."))},O=function(e){var t=e.tag;return Object(o.b)("a",{href:"#"+t.replace(/\./g,"").toLowerCase()},Object(o.b)(j,{mdxType:"NormalCode"},"#",t))},j=function(e){var t=e.children;return b.a.createElement.apply(b.a,["code",{}].concat(s(t)))},m=function(e){return c(e),Object(o.b)(b.a.Fragment,null,Object(o.b)(x,{value:"top",mdxType:"PossibleValueCode"},"Top of the bot facing world oriented up. (default)"),Object(o.b)(x,{value:"front",mdxType:"PossibleValueCode"},"Front of the bot facing world oriented forward."),Object(o.b)(x,{value:"back",mdxType:"PossibleValueCode"},"Back of the bot facing world oriented back."),Object(o.b)(x,{value:"right",mdxType:"PossibleValueCode"},"Right of the bot facing world oriented right."),Object(o.b)(x,{value:"left",mdxType:"PossibleValueCode"},"Left of the bot facing world oriented left."),Object(o.b)(x,{value:"floating",mdxType:"PossibleValueCode"},"Floating above the bot."))},v={rightToc:r,PossibleValuesTable:d,PossibleValue:h,PossibleValueCode:x,AnyColorValues:p,TagLink:O,NormalCode:j,LabelAnchorValues:m},y="wrapper";function T(e){var t=e.components,a=n(e,["components"]);return Object(o.b)(y,i({},v,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"AUX Has many tags."),Object(o.b)("h2",{id:"info-tags"},"Info Tags"),Object(o.b)("h3",{id:"id"},Object(o.b)("inlineCode",{parentName:"h3"},"id")),Object(o.b)("p",null,"The ID of the bot."),Object(o.b)("h3",{id:"auxcreator"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.creator")),Object(o.b)("p",null,"The ID of the bot which created this bot."),Object(o.b)("h2",{id:"behavior-tags"},"Behavior Tags"),Object(o.b)("h3",{id:"auxmovable"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.movable")),Object(o.b)("p",null,"Whether the bot is able to be moved."),Object(o.b)("h4",{id:"possible-values-are"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The bot is able to be moved anywhere. (default)"),Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The bot cannot be moved."),Object(o.b)(x,{value:"clone",mdxType:"PossibleValueCode"},"Dragging the bot will create a clone that can be placed anywhere."),Object(o.b)(x,{value:"pickup",mdxType:"PossibleValueCode"},"The bot can be moved into any other context but not within the context it is currently in. (only applies to AUXPlayer)"),Object(o.b)(x,{value:"drag",mdxType:"PossibleValueCode"},"The bot can be moved anywhere within the context it is currently in but not moved to another context. (only applies to AUXPlayer)")),Object(o.b)("h3",{id:"auxstackable"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.stackable")),Object(o.b)("p",null,"Whether the bot is able to be stacked."),Object(o.b)("h4",{id:"possible-values-are-1"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The bot can be stacked upon other bots and other bots can be stacked upon it. (default)"),Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The bot cannot be stacked upon other bots and other bots cannot be stacked upon it.")),Object(o.b)("h3",{id:"auxmergable"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.mergable")),Object(o.b)("p",null,"Whether mods are able to be merged into the bot."),Object(o.b)("h4",{id:"possible-values-are-2"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The bot will accept a mod's changes to its tags via dragging. (default)"),Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The bot will not allow a mod to change its tags via dragging.")),Object(o.b)("h3",{id:"auxdestroyable"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.destroyable")),Object(o.b)("p",null,"Whether the bot is able to be destroyed in AUXPlayer. The bot can still be destroyed in Channel Designer."),Object(o.b)("h4",{id:"possible-values-are-3"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The bot will allow destruction events to occur outside Channel Designer. (default)"),Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The bot will not allow destruction events to occur to it outside of Channel Designer.")),Object(o.b)("h3",{id:"auxeditable"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.editable")),Object(o.b)("p",null,"Whether the bot is able to be edited in the sheet in Channel Designer. Once you set ",Object(o.b)("a",i({parentName:"p"},{href:"#auxeditable"}),Object(o.b)("inlineCode",{parentName:"a"},"aux.editable"))," to ",Object(o.b)("inlineCode",{parentName:"p"},"false"),", you can't edit the bot via the sheet. Use with caution."),Object(o.b)("h4",{id:"possible-values-are-4"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The bot can be edited via the sheet. (default)"),Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The bot cannot be edited via the sheet. (including being able to set aux.editable back to true)")),Object(o.b)("h3",{id:"auxlistening"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.listening")),Object(o.b)("p",null,"Determines whether this bot responds to whispers or shouts. If this tag is set to ",Object(o.b)("inlineCode",{parentName:"p"},"true")," it will respond to them. If set to ",Object(o.b)("inlineCode",{parentName:"p"},"false"),", it will not."),Object(o.b)("h4",{id:"possible-values-are-5"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The bot will respond to whispers and shouts. (default)"),Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The bot will not respond to whispers or shouts.")),Object(o.b)("h2",{id:"visualization-tags"},"Visualization Tags"),Object(o.b)("h3",{id:"auxcolor"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.color")),Object(o.b)("p",null,"The color of the bot."),Object(o.b)("h4",{id:"possible-values-are-6"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"white",mdxType:"PossibleValueCode"},"(default)"),Object(o.b)(p,{mdxType:"AnyColorValues"})),Object(o.b)("h3",{id:"auxstrokecolor"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.stroke.color")),Object(o.b)("p",null,"The color of the bot's outline."),Object(o.b)("h4",{id:"possible-values-are-7"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"white",mdxType:"PossibleValueCode"},"(default)"),Object(o.b)(p,{mdxType:"AnyColorValues"})),Object(o.b)("h3",{id:"auxstrokewidth"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.stroke.width")),Object(o.b)("p",null,"The width of the bot's outline. Only works in Chrome."),Object(o.b)("h3",{id:"auxlineto"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.line.to")),Object(o.b)("p",null,"The Bot IDs that this bot should draw lines to."),Object(o.b)("h3",{id:"auxlinestyle"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.line.style")),Object(o.b)("p",null,"The style of the lines."),Object(o.b)("h4",{id:"possible-values-are-8"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"arrow",mdxType:"PossibleValueCode"},"Displays the line with an arrow at the tip pointing to the target bot. (default)"),Object(o.b)(x,{value:"line",mdxType:"PossibleValueCode"},"Displays the line without additional decoration."),Object(o.b)(x,{value:"wall",mdxType:"PossibleValueCode"},"Displays the line as a vertical wall.")),Object(o.b)("h3",{id:"auxlinecolor"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.line.color")),Object(o.b)("p",null,"The color of the lines."),Object(o.b)("h4",{id:"possible-values-are-9"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"white",mdxType:"PossibleValueCode"},"(default)"),Object(o.b)(p,{mdxType:"AnyColorValues"})),Object(o.b)("h3",{id:"auxlabel"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.label")),Object(o.b)("p",null,"The text that the bot should show in a label."),Object(o.b)("h3",{id:"auxlabelcolor"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.label.color")),Object(o.b)("p",null,"The color of the text in the label."),Object(o.b)("h4",{id:"possible-values-are-10"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"black",mdxType:"PossibleValueCode"},"(default)"),Object(o.b)(p,{mdxType:"AnyColorValues"})),Object(o.b)("h3",{id:"auxlabelsize"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.label.size")),Object(o.b)("p",null,"The size of the label font. Default is 1."),Object(o.b)("h3",{id:"auxlabelsizemode"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.label.size.mode")),Object(o.b)("p",null,"The sizing mode for the label."),Object(o.b)("h4",{id:"possible-values-are-11"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"normal",mdxType:"PossibleValueCode"},"Don't automatically scale the label size. (default)"),Object(o.b)(x,{value:"auto",mdxType:"PossibleValueCode"},"Automatically scale the label to keep the same size on the screen.")),Object(o.b)("h3",{id:"auxlabelanchor"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.label.anchor")),Object(o.b)("p",null,"The anchor position for the label."),Object(o.b)("h4",{id:"possible-values-are-12"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(m,{mdxType:"LabelAnchorValues"})),Object(o.b)("h3",{id:"auxscale"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.scale")),Object(o.b)("p",null,"The uniform scale of the bot."),Object(o.b)("p",null,"Defaults to 1."),Object(o.b)("h3",{id:"auxscalex"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.scale.x")),Object(o.b)("p",null,"The X scale (width) of the bot. Combines with the ",Object(o.b)("a",i({parentName:"p"},{href:"#auxscale"}),Object(o.b)("inlineCode",{parentName:"a"},"aux.scale"))," tag to determine the final width of the bot."),Object(o.b)("p",null,"Defaults to 1."),Object(o.b)("h3",{id:"auxscaley"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.scale.y")),Object(o.b)("p",null,"The Y scale (length) of the bot. Combines with the ",Object(o.b)("a",i({parentName:"p"},{href:"#auxscale"}),Object(o.b)("inlineCode",{parentName:"a"},"aux.scale"))," tag to determine the final length of the bot."),Object(o.b)("p",null,"Defaults to 1."),Object(o.b)("h3",{id:"auxscalez"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.scale.z")),Object(o.b)("p",null,"The Z scale (height) of the bot. Combines with the ",Object(o.b)("a",i({parentName:"p"},{href:"#auxscale"}),Object(o.b)("inlineCode",{parentName:"a"},"aux.scale"))," tag to determine the final height of the bot."),Object(o.b)("p",null,"Defaults to 1."),Object(o.b)("h3",{id:"auximage"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.image")),Object(o.b)("p",null,"The URL of the image that the bot should display."),Object(o.b)("h3",{id:"auxshape"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.shape")),Object(o.b)("p",null,"The shape that the bot should be displayed as."),Object(o.b)("h4",{id:"possible-values-are-13"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"cube",mdxType:"PossibleValueCode"},"Cube mesh (default)"),Object(o.b)(x,{value:"sphere",mdxType:"PossibleValueCode"},"Sphere mesh"),Object(o.b)(x,{value:"sprite",mdxType:"PossibleValueCode"},"Camera facing (billboarded) sprite/quad images.")),Object(o.b)("h3",{id:"auxprogressbar"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.progressBar")),Object(o.b)("p",null,"Causes a progress bar to be shown for the bot. Range is between 0 and 1.\nNeeds both aux.progressBar.backgroundColor and aux.progressBar.color to visualize the progress"),Object(o.b)("h4",{id:"possible-values-are-14"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Numbers >= 0 and <= 1",mdxType:"PossibleValue"},Object(o.b)("ul",null,Object(o.b)("li",null,"0 means that you will only see ",Object(o.b)(O,{tag:"aux.progressBar.backgroundColor",mdxType:"TagLink"}),"."),Object(o.b)("li",null,"0.5 means that you will see half of ",Object(o.b)(O,{tag:"aux.progressBar.backgroundColor",mdxType:"TagLink"})," and half of ",Object(o.b)(O,{tag:"aux.progressBar.color",mdxType:"TagLink"}),"."),Object(o.b)("li",null,"1 means that you will only see ",Object(o.b)(O,{tag:"aux.progressBar.color",mdxType:"TagLink"}),".")))),Object(o.b)("h3",{id:"auxprogressbarcolor"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.progressBar.color")),Object(o.b)("p",null,"The foreground color of the progress bar."),Object(o.b)("h4",{id:"possible-values-are-15"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"black",mdxType:"PossibleValueCode"},"(default)"),Object(o.b)(p,{mdxType:"AnyColorValues"})),Object(o.b)("h3",{id:"auxprogressbarbackgroundcolor"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.progressBar.backgroundColor")),Object(o.b)("p",null,"The background color of the progress bar."),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"white",mdxType:"PossibleValueCode"},"(default)"),Object(o.b)(p,{mdxType:"AnyColorValues"})),Object(o.b)("h3",{id:"auxprogressbaranchor"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.progressBar.anchor")),Object(o.b)("p",null,"The anchor position for the progress bar."),Object(o.b)("h4",{id:"possible-values-are-16"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(m,{mdxType:"LabelAnchorValues"})),Object(o.b)("h2",{id:"context-tags"},"Context Tags"),Object(o.b)("h3",{id:"context"},Object(o.b)("inlineCode",{parentName:"h3"},"[context]")),Object(o.b)("p",null,"Add a bot to a context. "),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Example:"),"  Set ",Object(o.b)("inlineCode",{parentName:"p"},"#room1")," to ",Object(o.b)("inlineCode",{parentName:"p"},"true")," for the bot to appear in a context named ",Object(o.b)("inlineCode",{parentName:"p"},"room1"),".")),Object(o.b)("h4",{id:"possible-values-are-17"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"Removes the bot from the context. (default)"),Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"Puts the bot into the context.")),Object(o.b)("h3",{id:"contextsortorder"},Object(o.b)("inlineCode",{parentName:"h3"},"[context].sortOrder")),Object(o.b)("p",null,"The order that the bot should be in a stack of bots."),Object(o.b)("p",null,"When bots are stacked, they are placed from the bottom to the top based on the sort order. So a bot with a sort order of 1 is going to be placed on top of a bot with a sort order of 2."),Object(o.b)("h4",{id:"possible-values-are-18"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Any Number",mdxType:"PossibleValue"},"Specifies the sort order of a bot in a stack of bots. (Default is 0)")),Object(o.b)("h3",{id:"contextx"},Object(o.b)("inlineCode",{parentName:"h3"},"[context].x")),Object(o.b)("p",null,"The X (east-west) position of a bot on the grid in the specified context."),Object(o.b)("p",null,"Integer values are mapped directly to the grid. e.g. 1.5 means halfway between the 1 and 2 grid squares."),Object(o.b)("h4",{id:"possible-values-are-19"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Any Number",mdxType:"PossibleValue"},"Specifies the X position of a bot in a context. (Default is 0)")),Object(o.b)("h3",{id:"contexty"},Object(o.b)("inlineCode",{parentName:"h3"},"[context].y")),Object(o.b)("p",null,"The Y (north-south) position of a bot on the grid in the specified context."),Object(o.b)("p",null,"Integer values are mapped directly to the grid. e.g. 1.5 means halfway between the 1 and 2 grid squares."),Object(o.b)("h4",{id:"possible-values-are-20"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Any Number",mdxType:"PossibleValue"},"Specifies the Y position of a bot in a context. (Default is 0)")),Object(o.b)("h3",{id:"contextz"},Object(o.b)("inlineCode",{parentName:"h3"},"[context].z")),Object(o.b)("p",null,"The Z (up-down) offset that the bot is offset above/below the grid."),Object(o.b)("h4",{id:"possible-values-are-21"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Any Number",mdxType:"PossibleValue"},"Specifies the Z position of a bot in a context. (Default is 0)")),Object(o.b)("h3",{id:"contextrotationx"},Object(o.b)("inlineCode",{parentName:"h3"},"[context].rotation.x")),Object(o.b)("p",null,"The X (pitch) rotation in radians that the bot should be rotated by."),Object(o.b)("h4",{id:"possible-values-are-22"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Any Number",mdxType:"PossibleValue"},"Specifies the X rotation of a bot in a context. (Default is 0)")),Object(o.b)("h3",{id:"contextrotationy"},Object(o.b)("inlineCode",{parentName:"h3"},"[context].rotation.y")),Object(o.b)("p",null,"The Y (roll) rotation in radians that the bot should be rotated by."),Object(o.b)("h4",{id:"possible-values-are-23"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Any Number",mdxType:"PossibleValue"},"Specifies the Y rotation of a bot in a context. (Default is 0)")),Object(o.b)("h3",{id:"contextrotationz"},Object(o.b)("inlineCode",{parentName:"h3"},"[context].rotation.z")),Object(o.b)("p",null,"The Z (yaw) rotation in radians that the bot should be rotated by."),Object(o.b)("h4",{id:"possible-values-are-24"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Any Number",mdxType:"PossibleValue"},"Specifies the Z rotation of a bot in a context. (Default is 0)")),Object(o.b)("h2",{id:"context-config-tags"},"Context Config Tags"),Object(o.b)("p",null,"These tags are used to configure contexts."),Object(o.b)("h3",{id:"auxcontext"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context")),Object(o.b)("p",null,'Set with a name to create a context. The bot with the tag becomes the "context bot".'),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Remember to set the ",Object(o.b)(O,{tag:"aux.context.visualize",mdxType:"TagLink"})," tag to ",Object(o.b)(j,{mdxType:"NormalCode"},"surface")," to see the context in Channel Designer.")),Object(o.b)("h4",{id:"possible-values-are-25"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Any String",mdxType:"PossibleValue"},"The name of the context.")),Object(o.b)("h3",{id:"auxcontextcolor"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.color")),Object(o.b)("p",null,"The color of the background while in the context in AUXPlayer. Also the color of the surface in Channel Designer."),Object(o.b)("h4",{id:"possible-values-are-26"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"#263238",mdxType:"PossibleValueCode"},"(default)"),Object(o.b)(p,{mdxType:"AnyColorValues"})),Object(o.b)("h3",{id:"auxcontextlocked"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.locked")),Object(o.b)("p",null,"Determines if the context can be loaded in AUXPlayer."),Object(o.b)("h4",{id:"possible-values-are-27"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The context cannot be loaded in AUXPlayer. (Default)"),Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The context can be loaded in AUXPlayer.")),Object(o.b)("h3",{id:"auxcontextvisualize"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.visualize")),Object(o.b)("p",null,"How the context should be visualized in Channel Designer."),Object(o.b)("h4",{id:"possible-values-are-28"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The context is not visualized in Channel Designer. (Default)"),Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The context is visualized in Channel Designer without a surface."),Object(o.b)(x,{value:"surface",mdxType:"PossibleValueCode"},"The context is visualized in Channel Designer with a surface.")),Object(o.b)("h3",{id:"auxcontextx"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.x")),Object(o.b)("p",null,"The X (east-west) position of the context in Channel Designer."),Object(o.b)("h4",{id:"possible-values-are-29"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Any Number",mdxType:"PossibleValue"},"Specifies the X position of the context. (Default is 0)")),Object(o.b)("h3",{id:"auxcontexty"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.y")),Object(o.b)("p",null,"The Y (north-south) position of the context in Channel Designer."),Object(o.b)("h4",{id:"possible-values-are-30"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Any Number",mdxType:"PossibleValue"},"Specifies the Y position of the context. (Default is 0)")),Object(o.b)("h3",{id:"auxcontextz"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.z")),Object(o.b)("p",null,"The Z (east-west) position of the context in Channel Designer."),Object(o.b)("h4",{id:"possible-values-are-31"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Any Number",mdxType:"PossibleValue"},"Specifies the Z position of the context. (Default is 0)")),Object(o.b)("h3",{id:"auxcontextrotationx"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.rotation.x")),Object(o.b)("p",null,"The X (pitch) rotation in radians of the context in Channel Designer."),Object(o.b)("h4",{id:"possible-values-are-32"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Any Number",mdxType:"PossibleValue"},"Specifies the X rotation of the context. (Default is 0)")),Object(o.b)("h3",{id:"auxcontextrotationy"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.rotation.y")),Object(o.b)("p",null,"The Y (roll) rotation in radians of the context in Channel Designer."),Object(o.b)("h4",{id:"possible-values-are-33"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Any Number",mdxType:"PossibleValue"},"Specifies the Y rotation of the context. (Default is 0)")),Object(o.b)("h3",{id:"auxcontextrotationz"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.rotation.z")),Object(o.b)("p",null,"The Z (roll) rotation in radians of the context in Channel Designer."),Object(o.b)("h4",{id:"possible-values-are-34"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Any Number",mdxType:"PossibleValue"},"Specifies the Z rotation of the context. (Default is 0)")),Object(o.b)("h3",{id:"auxcontextinventorycolor"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.inventory.color")),Object(o.b)("p",null,"The color of the background for the inventory viewport."),Object(o.b)("h4",{id:"possible-values-are-35"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(p,{mdxType:"AnyColorValues"})),Object(o.b)("h3",{id:"auxcontextinventoryheight"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.inventory.height")),Object(o.b)("p",null,"Sets the initial height of the inventory viewport for the context."),Object(o.b)("p",null,"When applied to the config bot, sets the default initial height of the inventory viewport for all contexts."),Object(o.b)("h4",{id:"possible-values-are-36"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Numbers >= 0 and <= 1",mdxType:"PossibleValue"},"The percentage of the device height that the inventory should start as. (Default is 0.1)")),Object(o.b)("h3",{id:"auxcontextinventoryvisible"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.inventory.visible")),Object(o.b)("p",null,"Whether the inventory is visible in this context."),Object(o.b)("h4",{id:"possible-values-are-37"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The inventory is visible in this context. (Default)"),Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The inventory is not visible in this context.")),Object(o.b)("h3",{id:"auxcontextinventorypannable"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.inventory.pannable")),Object(o.b)("p",null,"Whether the player will be able to pan the camera inside the inventory in this context."),Object(o.b)("h4",{id:"possible-values-are-38"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The inventory is pannable in this context. (Default)"),Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The inventory is not pannable in this context.")),Object(o.b)("h3",{id:"auxcontextinventoryresizable"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.inventory.resizable")),Object(o.b)("p",null,"Whether the player will be able to resize the viewport for the inventory in this context."),Object(o.b)("h4",{id:"possible-values-are-39"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The inventory is resizable in this context. (Default)"),Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The inventory is not resizable in this context.")),Object(o.b)("h3",{id:"auxcontextinventoryrotatable"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.inventory.rotatable")),Object(o.b)("p",null,"Whether the player will be able to rotate the camera inside the inventory in this context."),Object(o.b)("h4",{id:"possible-values-are-40"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The inventory is rotatable in this context. (Default)"),Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The inventory is not rotatable in this context.")),Object(o.b)("h3",{id:"auxcontextinventoryzoomable"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.inventory.zoomable")),Object(o.b)("p",null,"Whether the player will be able to zoom the camera inside the inventory in this context."),Object(o.b)("h4",{id:"possible-values-are-41"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The inventory is zoomable in this context. (Default)"),Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The inventory is not zoomable in this context.")),Object(o.b)("h3",{id:"auxcontextgridscale"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.grid.scale")),Object(o.b)("p",null,"The size of bots in the context."),Object(o.b)("h4",{id:"possible-values-are-42"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Any Number > 0",mdxType:"PossibleValue"},"The size of bots in the context. (Default is 0.2)")),Object(o.b)("h3",{id:"auxcontextsurfacesize"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.surface.size")),Object(o.b)("p",null,"The radius of hexes around the center of the context surface."),Object(o.b)("h4",{id:"possible-values-are-43"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Any Whole Number > 1",mdxType:"PossibleValue"},"The number of hexes that should be placed from the center. (Default is 1)")),Object(o.b)("h3",{id:"auxcontextsurfacescale"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.surface.scale")),Object(o.b)("p",null,"The scale of the context surface in Channel Designer."),Object(o.b)("h4",{id:"possible-values-are-44"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(h,{value:"Any Number > 0",mdxType:"PossibleValue"},"The scale of surface for the context. (Default is 2)")),Object(o.b)("h3",{id:"auxcontextsurfaceminimized"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.surface.minimized")),Object(o.b)("p",null,"Whether the context's surface is minimized. i.e. Collapsed so no bots are shown."),Object(o.b)("h4",{id:"possible-values-are-45"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The surface is not minimized. (Default)"),Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The surface is minimized.")),Object(o.b)("h3",{id:"auxcontextsurfacemovable"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.surface.movable")),Object(o.b)("p",null,"Whether the context's surface can be moved in Channel Designer when minimized."),Object(o.b)("h4",{id:"possible-values-are-46"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The surface is movable when minimized. (Default)"),Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The surface is not movable when minimized.")),Object(o.b)("h3",{id:"auxcontextdevicesvisible"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.devices.visible")),Object(o.b)("p",null,"Whether other user bots will be visible in AUXPlayer when viewing this context."),Object(o.b)("h4",{id:"possible-values-are-47"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"Other user bots are visible in AUXPlayer. (Default)"),Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"Other user bots are not visible in AUXPlayer.")),Object(o.b)("h3",{id:"auxcontextpannable"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.pannable")),Object(o.b)("p",null,"Whether the player will be able to pan the camera inside the context."),Object(o.b)("h4",{id:"possible-values-are-48"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The camera is pannable in this context. (Default)"),Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The camera is not pannable in this context.")),Object(o.b)("h3",{id:"auxcontextrotatable"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.rotatable")),Object(o.b)("p",null,"Whether the player will be able to rotate the camera inside the context."),Object(o.b)("h4",{id:"possible-values-are-49"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The camera is rotatable in this context. (Default)"),Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The camera is not rotatable in this context.")),Object(o.b)("h3",{id:"auxcontextzoomable"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.context.zoomable")),Object(o.b)("p",null,"Whether the player will be able to zoom the camera inside the context."),Object(o.b)("h4",{id:"possible-values-are-50"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"true",mdxType:"PossibleValueCode"},"The camera is zoomable in this context. (Default)"),Object(o.b)(x,{value:"false",mdxType:"PossibleValueCode"},"The camera is not zoomable in this context.")),Object(o.b)("h2",{id:"channel-config-tags"},"Channel Config Tags"),Object(o.b)("p",null,"These tags are set on the config bot and affect the entire channel."),Object(o.b)("h3",{id:"auxscenecolor"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.scene.color")),Object(o.b)("p",null,"The color of the scene background. This value applies to both Channel Designer and AUXPlayer.\nThe value can be overridden on a per-context basis in AUXPlayer by using the ",Object(o.b)(O,{tag:"aux.context.color",mdxType:"TagLink"})," tag."),Object(o.b)("h4",{id:"possible-values-are-51"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"#263238",mdxType:"PossibleValueCode"},"(default)"),Object(o.b)(p,{mdxType:"AnyColorValues"})),Object(o.b)("h3",{id:"auxsceneuserplayercolor"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.scene.user.player.color")),Object(o.b)("p",null,"The color of other users which are in AUXPlayer."),Object(o.b)("h4",{id:"possible-values-are-52"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"#DDDD00",mdxType:"PossibleValueCode"},"(default)"),Object(o.b)(p,{mdxType:"AnyColorValues"})),Object(o.b)("h3",{id:"auxsceneuserbuildercolor"},Object(o.b)("inlineCode",{parentName:"h3"},"aux.scene.user.builder.color")),Object(o.b)("p",null,"The color of other users which are in Channel Designer."),Object(o.b)("h4",{id:"possible-values-are-53"},"Possible values are:"),Object(o.b)(d,{mdxType:"PossibleValuesTable"},Object(o.b)(x,{value:"#00D000",mdxType:"PossibleValueCode"},"(default)"),Object(o.b)(p,{mdxType:"AnyColorValues"})))}T.isMDXComponent=!0}}]);