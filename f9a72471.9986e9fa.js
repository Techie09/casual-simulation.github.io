(window.webpackJsonp=window.webpackJsonp||[]).push([[18,9],{126:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return d})),n.d(t,"rightToc",(function(){return p})),n.d(t,"PossibleValuesTable",(function(){return h})),n.d(t,"PossibleValue",(function(){return u})),n.d(t,"PossibleValueCode",(function(){return m})),n.d(t,"AnyColorValues",(function(){return O})),n.d(t,"TagLink",(function(){return g})),n.d(t,"DataTagLink",(function(){return j})),n.d(t,"ListenTagLink",(function(){return y})),n.d(t,"ActionLink",(function(){return f})),n.d(t,"NormalCode",(function(){return N})),n.d(t,"LabelAnchorValues",(function(){return x})),n.d(t,"Badges",(function(){return v})),n.d(t,"Badge",(function(){return w})),n.d(t,"ReadOnlyBadge",(function(){return A})),n.d(t,"VideoBadge",(function(){return T})),n.d(t,"UserBotBadge",(function(){return L})),n.d(t,"HistoryBotBadge",(function(){return k})),n.d(t,"ConfigBotBadge",(function(){return C})),n.d(t,"Alert",(function(){return D})),n.d(t,"default",(function(){return E}));n(164),n(163);function a(e){if(null==e)throw new TypeError("Cannot destructure undefined")}var o=n(2),r=n(9),i=n(0),c=n.n(i),b=n(160),s=n(161),l={},d={id:"components",title:"components",description:"export const PossibleValuesTable = ({children}) => (",source:"@site/docs/components.mdx",permalink:"/docs/components",editUrl:"https://github.com/casual-simulation/casualos/tree/develop/docs/docs/components.mdx"},p=[],h=function(e){var t=e.children;return Object(b.b)("table",null,Object(b.b)("thead",null,Object(b.b)("tr",null,Object(b.b)("th",null,"Value"),Object(b.b)("th",null,"Description"))),Object(b.b)("tbody",null,t))},u=function(e){var t=e.value,n=e.children,a=Object(r.a)(e,["value","children"]);return Object(b.b)("tr",a,Object(b.b)("td",null,t),Object(b.b)("td",null,n))},m=function(e){var t=e.value,n=e.children,a=Object(r.a)(e,["value","children"]);return Object(b.b)(u,Object(o.a)({value:Object(b.b)("code",null,t)},a,{mdxType:"PossibleValue"}),n)},O=function(e){return a(e),Object(b.b)(c.a.Fragment,null,Object(b.b)(u,{value:"Any X11 Color",mdxType:"PossibleValue"},Object(b.b)("a",{href:"https://en.wikipedia.org/wiki/X11_color_names",target:"_blank"},"X11 colors")," are a list of standard colors that web browsers support."),Object(b.b)(u,{value:"Any Hex Color",mdxType:"PossibleValue"},Object(b.b)("a",{href:"https://en.wikipedia.org/wiki/Web_colors#Hex_triplet",target:"_blank"},"Hex colors")," are three or six digit numbers that specify a color by its red, green, and blue components."))},g=function(e){var t=e.tag;return t.startsWith("@")?Object(b.b)(y,{tag:t,mdxType:"ListenTagLink"}):Object(b.b)(j,{tag:t,mdxType:"DataTagLink"})},j=function(e){var t=e.tag;return Object(b.b)("a",{href:Object(s.a)("docs/tags")+"#"+t.replace(/\./g,"").toLowerCase()},Object(b.b)(N,{mdxType:"NormalCode"},"#",t))},y=function(e){var t=e.tag;return Object(b.b)("a",{href:Object(s.a)("docs/listen-tags")+"#"+t.replace(/[\.\(\)\@\[\]]/g,"").toLowerCase()},Object(b.b)(N,{mdxType:"NormalCode"},t))},f=function(e){var t=e.action,n=e.children;return Object(b.b)("a",{href:Object(s.a)("docs/actions")+"#"+t.replace(/[\.\(\)\,\?]/g,"").replace(/\s/g,"-").toLowerCase()},n||Object(b.b)(N,{mdxType:"NormalCode"},t))},N=function(e){var t=e.children;return c.a.createElement.apply(c.a,["code",{}].concat(t))},x=function(e){return a(e),Object(b.b)(c.a.Fragment,null,Object(b.b)(m,{value:"top",mdxType:"PossibleValueCode"},"Top of the bot facing world oriented up. (default)"),Object(b.b)(m,{value:"front",mdxType:"PossibleValueCode"},"Front of the bot facing world oriented forward."),Object(b.b)(m,{value:"back",mdxType:"PossibleValueCode"},"Back of the bot facing world oriented back."),Object(b.b)(m,{value:"right",mdxType:"PossibleValueCode"},"Right of the bot facing world oriented right."),Object(b.b)(m,{value:"left",mdxType:"PossibleValueCode"},"Left of the bot facing world oriented left."),Object(b.b)(m,{value:"floating",mdxType:"PossibleValueCode"},"Floating above the bot."))},v=function(e){var t=e.children;return Object(b.b)("div",{className:"row badge-row"},Object(b.b)("div",{className:"col"},t))},w=function(e){var t=e.type,n=e.children;return Object(b.b)("span",{className:"badge badge--"+t},n)},A=function(e){return a(e),Object(b.b)(w,{type:"warning",mdxType:"Badge"},"Read-Only")},T=function(e){var t=e.url;return Object(b.b)(w,{type:"info",mdxType:"Badge"},Object(b.b)("a",{href:t,target:"_blank"},"Video"))},L=function(e){e.url;return Object(b.b)(w,{type:"primary",mdxType:"Badge"},"Player Bot")},k=function(e){e.url;return Object(b.b)(w,{type:"primary",mdxType:"Badge"},"History Bot")},C=function(e){e.url;return Object(b.b)(w,{type:"primary",mdxType:"Badge"},"Config Bot")},D=function(e){var t=e.type,n=e.children;return Object(b.b)("div",{className:"alert alert--"+t,role:"alert"},n)},B={rightToc:p,PossibleValuesTable:h,PossibleValue:u,PossibleValueCode:m,AnyColorValues:O,TagLink:g,DataTagLink:j,ListenTagLink:y,ActionLink:f,NormalCode:N,LabelAnchorValues:x,Badges:v,Badge:w,ReadOnlyBadge:A,VideoBadge:T,UserBotBadge:L,HistoryBotBadge:k,ConfigBotBadge:C,Alert:D};function E(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(o.a)({},B,n,{components:t,mdxType:"MDXLayout"}))}E.isMDXComponent=!0},153:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return d}));var a=n(2),o=n(9),r=(n(0),n(160)),i=n(126),c={id:"listen-tags",title:"Listen Tags",sidebar_label:"Listen Tags",description:"Listen tags are tags that can receive shouts and whispers from other bots and actoins that happen from the user."},b={id:"listen-tags",title:"Listen Tags",description:"Listen tags are tags that can receive shouts and whispers from other bots and actoins that happen from the user.",source:"@site/docs/listen-tags.mdx",permalink:"/docs/listen-tags",editUrl:"https://github.com/casual-simulation/casualos/tree/develop/docs/docs/listen-tags.mdx",sidebar_label:"Listen Tags",sidebar:"docs",previous:{title:"Tags",permalink:"/docs/tags"},next:{title:"Actions",permalink:"/docs/actions"}},s=[{value:"Whisper Tags",id:"whisper-tags",children:[{value:"<code>@onCreate</code>",id:"oncreate",children:[]},{value:"<code>@onDestroy</code>",id:"ondestroy",children:[]},{value:"<code>@onModDrop</code>",id:"onmoddrop",children:[]},{value:"<code>@onModDropEnter</code>",id:"onmoddropenter",children:[]},{value:"<code>@onModDropExit</code>",id:"onmoddropexit",children:[]},{value:"<code>@onClick</code>",id:"onclick",children:[]},{value:"<code>@onPointerEnter</code>",id:"onpointerenter",children:[]},{value:"<code>@onPointerExit</code>",id:"onpointerexit",children:[]},{value:"<code>@onPointerDown</code>",id:"onpointerdown",children:[]},{value:"<code>@onPointerUp</code>",id:"onpointerup",children:[]},{value:"<code>@onDrag</code>",id:"ondrag",children:[]},{value:"<code>@onDrop</code>",id:"ondrop",children:[]},{value:"<code>@onDropEnter</code>",id:"ondropenter",children:[]},{value:"<code>@onDropExit</code>",id:"ondropexit",children:[]},{value:"<code>@onSaveInput</code>",id:"onsaveinput",children:[]},{value:"<code>@onCloseInput</code>",id:"oncloseinput",children:[]},{value:"<code>@onListen</code>",id:"onlisten",children:[]},{value:"<code>@onMaxLODEnter</code>",id:"onmaxlodenter",children:[]},{value:"<code>@onMinLODEnter</code>",id:"onminlodenter",children:[]},{value:"<code>@onMaxLODExit</code>",id:"onmaxlodexit",children:[]},{value:"<code>@onMinLODExit</code>",id:"onminlodexit",children:[]},{value:"<code>@onFocusEnter</code>",id:"onfocusenter",children:[]},{value:"<code>@onFocusExit</code>",id:"onfocusexit",children:[]},{value:"<code>@[groupName][stateName]OnEnter</code>",id:"groupnamestatenameonenter",children:[]},{value:"<code>@[groupName][stateName]OnExit</code>",id:"groupnamestatenameonexit",children:[]}]},{value:"Shout Tags",id:"shout-tags",children:[{value:"<code>@onAnyCreate</code>",id:"onanycreate",children:[]},{value:"<code>@onAnyBotClicked</code>",id:"onanybotclicked",children:[]},{value:"<code>@onChat</code>",id:"onchat",children:[]},{value:"<code>@onChatTyping</code>",id:"onchattyping",children:[]},{value:"<code>@onFileUpload</code>",id:"onfileupload",children:[]},{value:"<code>@onGridClick</code>",id:"ongridclick",children:[]},{value:"<code>@onGridDown</code>",id:"ongriddown",children:[]},{value:"<code>@onGridUp</code>",id:"ongridup",children:[]},{value:"<code>@onPlayerPortalChanged</code>",id:"onplayerportalchanged",children:[]},{value:"<code>@onBarcodeScanned</code>",id:"onbarcodescanned",children:[]},{value:"<code>@onBarcodeScannerOpened</code>",id:"onbarcodescanneropened",children:[]},{value:"<code>@onBarcodeScannerClosed</code>",id:"onbarcodescannerclosed",children:[]},{value:"<code>@onQRCodeScanned</code>",id:"onqrcodescanned",children:[]},{value:"<code>@onQRCodeScannerOpened</code>",id:"onqrcodescanneropened",children:[]},{value:"<code>@onQRCodeScannerClosed</code>",id:"onqrcodescannerclosed",children:[]},{value:"<code>@onTapCode</code>",id:"ontapcode",children:[]},{value:"<code>@onKeyDown</code>",id:"onkeydown",children:[]},{value:"<code>@onKeyUp</code>",id:"onkeyup",children:[]},{value:"<code>@onStorySubscribed</code>",id:"onstorysubscribed",children:[]},{value:"<code>@onStoryUnsubscribed</code>",id:"onstoryunsubscribed",children:[]},{value:"<code>@onStoryStreaming</code>",id:"onstorystreaming",children:[]},{value:"<code>@onStoryStreamLost</code>",id:"onstorystreamlost",children:[]},{value:"<code>@onCheckout</code>",id:"oncheckout",children:[]},{value:"<code>@onPaste</code>",id:"onpaste",children:[]},{value:"<code>@onPaymentSuccessful</code>",id:"onpaymentsuccessful",children:[]},{value:"<code>@onPaymentFailed</code>",id:"onpaymentfailed",children:[]},{value:"<code>@onAnyBotDrag</code>",id:"onanybotdrag",children:[]},{value:"<code>@onAnyBotDrop</code>",id:"onanybotdrop",children:[]},{value:"<code>@onAnyListen</code>",id:"onanylisten",children:[]},{value:"<code>@onAnyMaxLODEnter</code>",id:"onanymaxlodenter",children:[]},{value:"<code>@onAnyMinLODEnter</code>",id:"onanyminlodenter",children:[]},{value:"<code>@onAnyMaxLODExit</code>",id:"onanymaxlodexit",children:[]},{value:"<code>@onAnyMinLODExit</code>",id:"onanyminlodexit",children:[]},{value:"<code>@onAnyFocusEnter</code>",id:"onanyfocusenter",children:[]},{value:"<code>@onAnyFocusExit</code>",id:"onanyfocusexit",children:[]},{value:"<code>@onWebhook</code>",id:"onwebhook",children:[]},{value:"<code>@onStoryAction</code>",id:"onstoryaction",children:[]},{value:"<code>@onRemoteWhisper</code>",id:"onremotewhisper",children:[]},{value:"<code>@onRemotePlayerSubscribed</code>",id:"onremoteplayersubscribed",children:[]},{value:"<code>@onRemotePlayerUnsubscribed</code>",id:"onremoteplayerunsubscribed",children:[]}]}],l={rightToc:s};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,'Listen tags are tags that can receive shouts and whispers from other bots and actions that happen from the user.\nTo create a listen tag, you make a normal tag and enter a "@" as the first character of the tag\'s value.'),Object(r.b)("h2",{id:"whisper-tags"},"Whisper Tags"),Object(r.b)("p",null,"Whispers are shouts that are sent to specific bots instead of all bots."),Object(r.b)("h3",{id:"oncreate"},Object(r.b)("inlineCode",{parentName:"h3"},"@onCreate")),Object(r.b)("p",null,"A whisper that is sent to a bot when it is first created."),Object(r.b)("h3",{id:"ondestroy"},Object(r.b)("inlineCode",{parentName:"h3"},"@onDestroy")),Object(r.b)("p",null,"A whisper that is sent to a bot when it is being destroyed."),Object(r.b)("h3",{id:"onmoddrop"},Object(r.b)("inlineCode",{parentName:"h3"},"@onModDrop")),Object(r.b)("p",null,"A whisper that is sent to a bot that a mod was dropped on.\nIf a custom ",Object(r.b)("inlineCode",{parentName:"p"},"@onModDrop")," is not specified, then the mod will be applied automatically.\nIf a custom ",Object(r.b)("inlineCode",{parentName:"p"},"@onModDrop")," is specified, then the mod needs to be applied manually via ",Object(r.b)(i.ActionLink,{action:"applyMod(bot, ...mods)",mdxType:"ActionLink"}),"."),Object(r.b)("h4",{id:"arguments"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"\ninterface Mod {\n  [tag: string]: any;\n}\n\nlet that: {\n  mod: Mod\n};\n")),Object(r.b)("h3",{id:"onmoddropenter"},Object(r.b)("inlineCode",{parentName:"h3"},"@onModDropEnter")),Object(r.b)("p",null,"A whisper that is sent to the bot that a mod started to be dragged onto."),Object(r.b)("h4",{id:"arguments-1"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  mod: Mod,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onmoddropexit"},Object(r.b)("inlineCode",{parentName:"h3"},"@onModDropExit")),Object(r.b)("p",null,"A whisper that is sent to the bot that a mod was just dragged off of."),Object(r.b)("h4",{id:"arguments-2"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  mod: Mod,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onclick"},Object(r.b)("inlineCode",{parentName:"h3"},"@onClick")),Object(r.b)("p",null,"A whisper that is sent to the bot that was clicked."),Object(r.b)("h4",{id:"arguments-3"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  face: 'left' | 'right' | 'front' | 'back' | 'top' | 'bottom',\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onpointerenter"},Object(r.b)("inlineCode",{parentName:"h3"},"@onPointerEnter")),Object(r.b)("p",null,"A whisper that is sent to a bot when the mouse cursor starts to hover over it."),Object(r.b)("h4",{id:"arguments-4"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onpointerexit"},Object(r.b)("inlineCode",{parentName:"h3"},"@onPointerExit")),Object(r.b)("p",null,"A whisper that is sent to a bot when the mouse cursor stops hovering over it."),Object(r.b)("h4",{id:"arguments-5"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onpointerdown"},Object(r.b)("inlineCode",{parentName:"h3"},"@onPointerDown")),Object(r.b)("p",null,"A whipser that is sent to a bot when the user starts clicking it."),Object(r.b)("h4",{id:"arguments-6"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onpointerup"},Object(r.b)("inlineCode",{parentName:"h3"},"@onPointerUp")),Object(r.b)("p",null,"A whisper that is sent to a bot when the user stops clicking it."),Object(r.b)("h4",{id:"arguments-7"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"ondrag"},Object(r.b)("inlineCode",{parentName:"h3"},"@onDrag")),Object(r.b)("p",null,"A whisper that is sent whenever a bot is starting to be dragged."),Object(r.b)("h4",{id:"arguments-8"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  face: 'left' | 'right' | 'front' | 'back' | 'top' | 'bottom',\n  from: {\n    x: number,\n    y: number,\n    dimension: string\n  }\n};\n")),Object(r.b)("h3",{id:"ondrop"},Object(r.b)("inlineCode",{parentName:"h3"},"@onDrop")),Object(r.b)("p",null,"A whisper that is sent whenever a bot has been dropped after being dragged.\nThe whisper is sent to both the bot that was dropped and the bot that was dropped on."),Object(r.b)("h4",{id:"arguments-9"},"Arguments"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  dragBot: Bot,\n  to: {\n    bot: Bot,\n    x: number,\n    y: number,\n    dimension: string\n  },\n  from: {\n    x: number,\n    y: number,\n    dimension: string\n  }\n};\n")),Object(r.b)("h3",{id:"ondropenter"},Object(r.b)("inlineCode",{parentName:"h3"},"@onDropEnter")),Object(r.b)("p",null,"A whisper that is sent to both bots when a bot is dragged onto another bot."),Object(r.b)("h4",{id:"arguments-10"},"Arguments"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  dragBot: Bot,\n  to: {\n    bot: Bot,\n    x: number,\n    y: number,\n    dimension: string\n  },\n  from: {\n    x: number,\n    y: number,\n    dimension: string\n  }\n};\n")),Object(r.b)("h3",{id:"ondropexit"},Object(r.b)("inlineCode",{parentName:"h3"},"@onDropExit")),Object(r.b)("p",null,"A whisper that is sent to both bots when a bot is dragged off of another bot."),Object(r.b)("h4",{id:"arguments-11"},"Arguments"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  dragBot: Bot,\n  to: {\n    bot: Bot,\n    x: number,\n    y: number,\n    dimension: string\n  },\n  from: {\n    x: number,\n    y: number,\n    dimension: string\n  }\n};\n")),Object(r.b)("h3",{id:"onsaveinput"},Object(r.b)("inlineCode",{parentName:"h3"},"@onSaveInput")),Object(r.b)("p",null,"A whisper that is sent when the input box for a bot has been changed by the user."),Object(r.b)("h4",{id:"arguments-12"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that = null;\n")),Object(r.b)("h3",{id:"oncloseinput"},Object(r.b)("inlineCode",{parentName:"h3"},"@onCloseInput")),Object(r.b)("p",null,"A whisper that is sent when the input box for a bot has been closed by the user."),Object(r.b)("h4",{id:"arguments-13"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that = null;\n")),Object(r.b)("h3",{id:"onlisten"},Object(r.b)("inlineCode",{parentName:"h3"},"@onListen")),Object(r.b)("p",null,"A whisper that is sent whenever a whisper or shout is sent to this bot."),Object(r.b)("h4",{id:"arguments-14"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  name: string,\n  that: any,\n  targets: Bot[],\n  listeners: Bot[],\n  responses: any[]\n};\n")),Object(r.b)("h3",{id:"onmaxlodenter"},Object(r.b)("inlineCode",{parentName:"h3"},"@onMaxLODEnter")),Object(r.b)("p",null,"A whisper that is sent whenever a bot enters its maximum Level-Of-Detail."),Object(r.b)("h4",{id:"arguments-15"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onminlodenter"},Object(r.b)("inlineCode",{parentName:"h3"},"@onMinLODEnter")),Object(r.b)("p",null,"A whisper that is sent whenever a bot enters its minimum Level-Of-Detail."),Object(r.b)("h4",{id:"arguments-16"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onmaxlodexit"},Object(r.b)("inlineCode",{parentName:"h3"},"@onMaxLODExit")),Object(r.b)("p",null,"A whisper that is sent whenever a bot exits its maximum Level-Of-Detail."),Object(r.b)("h4",{id:"arguments-17"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onminlodexit"},Object(r.b)("inlineCode",{parentName:"h3"},"@onMinLODExit")),Object(r.b)("p",null,"A whisper that is sent whenever a bot exits its minimum Level-Of-Detail."),Object(r.b)("h4",{id:"arguments-18"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onfocusenter"},Object(r.b)("inlineCode",{parentName:"h3"},"@onFocusEnter")),Object(r.b)("p",null,"A whisper that is sent whenever a bot starts being focused by the player."),Object(r.b)("p",null,"Focus is when the bot is in the center of the screen."),Object(r.b)("p",null,"Only sent if ",Object(r.b)(i.TagLink,{tag:"focusable",mdxType:"TagLink"})," is true."),Object(r.b)("h4",{id:"arguments-19"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onfocusexit"},Object(r.b)("inlineCode",{parentName:"h3"},"@onFocusExit")),Object(r.b)("p",null,"A whisper that is sent whenever a bot stops being focused by the player."),Object(r.b)("p",null,"Focus is when the bot is in the center of the screen."),Object(r.b)("h4",{id:"arguments-20"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"groupnamestatenameonenter"},Object(r.b)("inlineCode",{parentName:"h3"},"@[groupName][stateName]OnEnter")),Object(r.b)("p",null,"A whisper that is sent whenever the ",Object(r.b)("inlineCode",{parentName:"p"},"[groupName]")," tag is set to ",Object(r.b)("inlineCode",{parentName:"p"},"[stateName]")," via the ",Object(r.b)(i.ActionLink,{action:"changeState(bot, stateName, groupName?)",mdxType:"ActionLink"})," function."),Object(r.b)("h4",{id:"arguments-21"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  /**\n   * The stateName that the bot is coming from.\n   */\n  from: string,\n\n  /**\n   * The stateName that the bot is going to.\n   */\n  to: string,\n};\n")),Object(r.b)("h3",{id:"groupnamestatenameonexit"},Object(r.b)("inlineCode",{parentName:"h3"},"@[groupName][stateName]OnExit")),Object(r.b)("p",null,"A whisper that is sent whenever the ",Object(r.b)("inlineCode",{parentName:"p"},"[groupName]")," tag is changed from ",Object(r.b)("inlineCode",{parentName:"p"},"[stateName]")," via the ",Object(r.b)(i.ActionLink,{action:"changeState(bot, stateName, groupName?)",mdxType:"ActionLink"})," function."),Object(r.b)("h4",{id:"arguments-22"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  /**\n   * The stateName that the bot is coming from.\n   */\n  from: string,\n\n  /**\n   * The stateName that the bot is going to.\n   */\n  to: string,\n};\n")),Object(r.b)("h2",{id:"shout-tags"},"Shout Tags"),Object(r.b)("p",null,"Shouts are events which are sent to all bots."),Object(r.b)("h3",{id:"onanycreate"},Object(r.b)("inlineCode",{parentName:"h3"},"@onAnyCreate")),Object(r.b)("p",null,"A shout that is sent to all bots when a bot is created. Sent immediately after ",Object(r.b)(i.TagLink,{tag:"@onCreate",mdxType:"TagLink"})," is sent."),Object(r.b)("h4",{id:"arguments-23"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot\n};\n")),Object(r.b)("h3",{id:"onanybotclicked"},Object(r.b)("inlineCode",{parentName:"h3"},"@onAnyBotClicked")),Object(r.b)("p",null,"A shout that is sent to all bots when a bot is clicked."),Object(r.b)("h4",{id:"arguments-24"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  face: 'left' | 'right' | 'front' | 'back' | 'top' | 'bottom',\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onchat"},Object(r.b)("inlineCode",{parentName:"h3"},"@onChat")),Object(r.b)("p",null,'A shout that is sent to all bots when the player sends a chat message.\nChat messages can be sent when the player presses the Enter key while writing a message or by clicking/tapping the "Send Message" button to the right of the chat bar.'),Object(r.b)("h4",{id:"arguments-25"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  message: string\n};\n")),Object(r.b)("h3",{id:"onchattyping"},Object(r.b)("inlineCode",{parentName:"h3"},"@onChatTyping")),Object(r.b)("p",null,"A shout that is sent to all bots when the player changes the text in the chat bar.\nOnly triggered when the chat bar is visible."),Object(r.b)("h4",{id:"arguments-26"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  message: string\n};\n")),Object(r.b)("h3",{id:"onfileupload"},Object(r.b)("inlineCode",{parentName:"h3"},"@onFileUpload")),Object(r.b)("p",null,"A shout that is sent to all bots when the user drags a file into the window."),Object(r.b)("h4",{id:"arguments-27"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  file: {\n    // The name of the file. Includes the file extension.\n    name: string;\n\n    // The size of the file in bytes.\n    size: number;\n\n    // The data in the file.\n    // If the file is a text file, the data will be a string.\n    // If the file is not a text file, then the data will be an ArrayBuffer.\n    //\n    // Text files have one of the following extensions:\n    // .txt\n    // .json\n    // .md\n    // .aux\n    // .html\n    // .js\n    // .ts\n    // All the other file extensions map to an ArrayBuffer\n    data: string | ArrayBuffer;\n  }\n};\n")),Object(r.b)("h3",{id:"ongridclick"},Object(r.b)("inlineCode",{parentName:"h3"},"@onGridClick")),Object(r.b)("p",null,"A shout that is sent to all bots when the user clicks on empty space."),Object(r.b)("h4",{id:"arguments-28"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  position: {\n    x: number,\n    y: number\n  },\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"ongriddown"},Object(r.b)("inlineCode",{parentName:"h3"},"@onGridDown")),Object(r.b)("p",null,"A shout that is sent to all bots when the user starts clicking on empty space."),Object(r.b)("h4",{id:"arguments-29"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  position: {\n    x: number,\n    y: number\n  },\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"ongridup"},Object(r.b)("inlineCode",{parentName:"h3"},"@onGridUp")),Object(r.b)("p",null,"A shout that is sent to all bots when the user stops clicking on empty space."),Object(r.b)("h4",{id:"arguments-30"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  position: {\n    x: number,\n    y: number\n  },\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onplayerportalchanged"},Object(r.b)("inlineCode",{parentName:"h3"},"@onPlayerPortalChanged")),Object(r.b)("p",null,"A shout that is sent to all bots when a portal changes on the player."),Object(r.b)("h4",{id:"arguments-31"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  portal: string;\n  dimension: string;\n};\n")),Object(r.b)("h3",{id:"onbarcodescanned"},Object(r.b)("inlineCode",{parentName:"h3"},"@onBarcodeScanned")),Object(r.b)("p",null,"A shout that is sent to all bots when the player scans a barcode."),Object(r.b)("h4",{id:"arguments-32"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: string;\n")),Object(r.b)("h3",{id:"onbarcodescanneropened"},Object(r.b)("inlineCode",{parentName:"h3"},"@onBarcodeScannerOpened")),Object(r.b)("p",null,"A shout that is sent to all bots when the barcode scanner is opened."),Object(r.b)("h3",{id:"onbarcodescannerclosed"},Object(r.b)("inlineCode",{parentName:"h3"},"@onBarcodeScannerClosed")),Object(r.b)("p",null,"A shout that is sent to all bots when the barcode scanner is closed."),Object(r.b)("h3",{id:"onqrcodescanned"},Object(r.b)("inlineCode",{parentName:"h3"},"@onQRCodeScanned")),Object(r.b)("p",null,"A shout that is sent to all bots when a QR Code is scanned."),Object(r.b)("h4",{id:"arguments-33"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: string;\n")),Object(r.b)("h3",{id:"onqrcodescanneropened"},Object(r.b)("inlineCode",{parentName:"h3"},"@onQRCodeScannerOpened")),Object(r.b)("p",null,"A shout that is sent to all bots when the QR Code Scanner is opened."),Object(r.b)("h3",{id:"onqrcodescannerclosed"},Object(r.b)("inlineCode",{parentName:"h3"},"@onQRCodeScannerClosed")),Object(r.b)("p",null,"A shout that is sent to all bots when the QR Code Scanner is closed."),Object(r.b)("h3",{id:"ontapcode"},Object(r.b)("inlineCode",{parentName:"h3"},"@onTapCode")),Object(r.b)("p",null,"A shout that is sent to all bots whenever a 4-digit tap code is entered."),Object(r.b)("h4",{id:"arguments-34"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: string;\n")),Object(r.b)("h3",{id:"onkeydown"},Object(r.b)("inlineCode",{parentName:"h3"},"@onKeyDown")),Object(r.b)("p",null,"A shout that is sent to all bots whenever the user starts pressing a key."),Object(r.b)("h4",{id:"arguments-35"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  keys: string[]\n};\n")),Object(r.b)("h3",{id:"onkeyup"},Object(r.b)("inlineCode",{parentName:"h3"},"@onKeyUp")),Object(r.b)("p",null,"A shout that is sent to all bots whenever the user stops pressing a key."),Object(r.b)("h4",{id:"arguments-36"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  keys: string[]\n};\n")),Object(r.b)("h3",{id:"onstorysubscribed"},Object(r.b)("inlineCode",{parentName:"h3"},"@onStorySubscribed")),Object(r.b)("p",null,"A shout that is sent when a story is loaded.\nSent to every story that is loaded."),Object(r.b)("h4",{id:"arguments-37"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  story: string\n};\n")),Object(r.b)("h3",{id:"onstoryunsubscribed"},Object(r.b)("inlineCode",{parentName:"h3"},"@onStoryUnsubscribed")),Object(r.b)("p",null,"A shout that is sent when a story is unloaded.\nSent to every story that is loaded."),Object(r.b)("h4",{id:"arguments-38"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  story: string\n};\n")),Object(r.b)("h3",{id:"onstorystreaming"},Object(r.b)("inlineCode",{parentName:"h3"},"@onStoryStreaming")),Object(r.b)("p",null,"A shout that is sent when a story is connected and fully synced.\nSent to every story that is loaded."),Object(r.b)("h4",{id:"arguments-39"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  story: string\n};\n")),Object(r.b)("h3",{id:"onstorystreamlost"},Object(r.b)("inlineCode",{parentName:"h3"},"@onStoryStreamLost")),Object(r.b)("p",null,"A shout that is sent when a story has been temporarily disconnected from the server.\nSent to every story that is loaded."),Object(r.b)("h4",{id:"arguments-40"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  story: string\n};\n")),Object(r.b)("h3",{id:"oncheckout"},Object(r.b)("inlineCode",{parentName:"h3"},"@onCheckout")),Object(r.b)("p",null,"A shout that is sent when the user submits their credit card info to purchase something."),Object(r.b)("h4",{id:"arguments-41"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  token: string, \n  productId: string, \n  user: { \n    username: string, \n    device: string, \n    token: string\n  }\n};\n")),Object(r.b)("h3",{id:"onpaste"},Object(r.b)("inlineCode",{parentName:"h3"},"@onPaste")),Object(r.b)("p",null,"A shout that is sent when some text is pasted into the story."),Object(r.b)("p",null,"This happens by pressing ",Object(r.b)("kbd",null,"Ctrl"),"+",Object(r.b)("kbd",null,"V")," or ",Object(r.b)("kbd",null,"Cmd"),"+",Object(r.b)("kbd",null,"V")," while something is in your clipboard."),Object(r.b)("h4",{id:"arguments-42"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  text: string;\n};\n")),Object(r.b)("h3",{id:"onpaymentsuccessful"},Object(r.b)("inlineCode",{parentName:"h3"},"@onPaymentSuccessful")),Object(r.b)("p",null,"A shout that is sent when payment has been approved for a checkout."),Object(r.b)("h4",{id:"arguments-43"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  /**\n   * The bot that was created for the transaction.\n   */\n  bot: Bot,\n  charge: any,\n  extra: any\n};\n")),Object(r.b)("h3",{id:"onpaymentfailed"},Object(r.b)("inlineCode",{parentName:"h3"},"@onPaymentFailed")),Object(r.b)("p",null,"A shout that is sent when payment has been rejected for a checkout."),Object(r.b)("h4",{id:"arguments-44"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  /**\n   * The bot that was created for the transaction.\n   */\n  bot: Bot,\n  error: any,\n  extra: any\n};\n")),Object(r.b)("h3",{id:"onanybotdrag"},Object(r.b)("inlineCode",{parentName:"h3"},"@onAnyBotDrag")),Object(r.b)("p",null,"A shout that is sent whenever a bot starts to be dragged."),Object(r.b)("h4",{id:"arguments-45"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  face: 'left' | 'right' | 'front' | 'back' | 'top' | 'bottom',\n  from: {\n    x: number,\n    y: number,\n    dimension: string\n  }\n};\n")),Object(r.b)("h3",{id:"onanybotdrop"},Object(r.b)("inlineCode",{parentName:"h3"},"@onAnyBotDrop")),Object(r.b)("p",null,"A shout that is sent whenever a bot is dropped after being dragged."),Object(r.b)("h4",{id:"arguments-46"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  to: {\n    x: number,\n    y: number,\n    dimension: string\n  },\n  from: {\n    x: number,\n    y: number,\n    dimension: string\n  }\n};\n")),Object(r.b)("h3",{id:"onanylisten"},Object(r.b)("inlineCode",{parentName:"h3"},"@onAnyListen")),Object(r.b)("p",null,"A shout that is sent whenever a whisper or shout is issued."),Object(r.b)("h4",{id:"arguments-47"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  name: string,\n  that: any,\n  targets: Bot[],\n  listeners: Bot[],\n  responses: any[]\n};\n")),Object(r.b)("h3",{id:"onanymaxlodenter"},Object(r.b)("inlineCode",{parentName:"h3"},"@onAnyMaxLODEnter")),Object(r.b)("p",null,"A shout that is sent whenever a bot enters its maximum Level-Of-Detail."),Object(r.b)("p",null,"Only sent for bots that have one of ",Object(r.b)(i.TagLink,{tag:"@onMaxLODEnter",mdxType:"TagLink"}),",  ",Object(r.b)(i.TagLink,{tag:"@onMaxLODExit",mdxType:"TagLink"}),", ",Object(r.b)(i.TagLink,{tag:"@onMinLODEnter",mdxType:"TagLink"}),", ",Object(r.b)(i.TagLink,{tag:"@onMinLODExit",mdxType:"TagLink"}),", ",Object(r.b)(i.TagLink,{tag:"maxLODThreshold",mdxType:"TagLink"})," or ",Object(r.b)(i.TagLink,{tag:"minLODThreshold",mdxType:"TagLink"})," specified."),Object(r.b)("h4",{id:"arguments-48"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onanyminlodenter"},Object(r.b)("inlineCode",{parentName:"h3"},"@onAnyMinLODEnter")),Object(r.b)("p",null,"A shout that is sent whenever a bot enters its minimum Level-Of-Detail."),Object(r.b)("p",null,"Only sent for bots that have one of ",Object(r.b)(i.TagLink,{tag:"@onMaxLODEnter",mdxType:"TagLink"}),", ",Object(r.b)(i.TagLink,{tag:"@onMaxLODExit",mdxType:"TagLink"}),", ",Object(r.b)(i.TagLink,{tag:"@onMinLODEnter",mdxType:"TagLink"}),", ",Object(r.b)(i.TagLink,{tag:"@onMinLODExit",mdxType:"TagLink"}),", ",Object(r.b)(i.TagLink,{tag:"maxLODThreshold",mdxType:"TagLink"})," or ",Object(r.b)(i.TagLink,{tag:"minLODThreshold",mdxType:"TagLink"})," specified."),Object(r.b)("h4",{id:"arguments-49"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onanymaxlodexit"},Object(r.b)("inlineCode",{parentName:"h3"},"@onAnyMaxLODExit")),Object(r.b)("p",null,"A shout that is sent whenever a bot exits its maximum Level-Of-Detail."),Object(r.b)("p",null,"Only sent for bots that have one of ",Object(r.b)(i.TagLink,{tag:"@onMaxLODEnter",mdxType:"TagLink"}),", ",Object(r.b)(i.TagLink,{tag:"@onMaxLODExit",mdxType:"TagLink"}),", ",Object(r.b)(i.TagLink,{tag:"@onMinLODEnter",mdxType:"TagLink"}),", ",Object(r.b)(i.TagLink,{tag:"@onMinLODExit",mdxType:"TagLink"}),", ",Object(r.b)(i.TagLink,{tag:"maxLODThreshold",mdxType:"TagLink"})," or ",Object(r.b)(i.TagLink,{tag:"minLODThreshold",mdxType:"TagLink"})," specified."),Object(r.b)("h4",{id:"arguments-50"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onanyminlodexit"},Object(r.b)("inlineCode",{parentName:"h3"},"@onAnyMinLODExit")),Object(r.b)("p",null,"A shout that is sent whenever a bot exits its minimum Level-Of-Detail."),Object(r.b)("p",null,"Only sent for bots that have one of ",Object(r.b)(i.TagLink,{tag:"@onMaxLODEnter",mdxType:"TagLink"}),", ",Object(r.b)(i.TagLink,{tag:"@onMaxLODExit",mdxType:"TagLink"}),", ",Object(r.b)(i.TagLink,{tag:"@onMinLODEnter",mdxType:"TagLink"}),", ",Object(r.b)(i.TagLink,{tag:"@onMinLODExit",mdxType:"TagLink"}),", ",Object(r.b)(i.TagLink,{tag:"maxLODThreshold",mdxType:"TagLink"})," or ",Object(r.b)(i.TagLink,{tag:"minLODThreshold",mdxType:"TagLink"})," specified."),Object(r.b)("h4",{id:"arguments-51"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onanyfocusenter"},Object(r.b)("inlineCode",{parentName:"h3"},"@onAnyFocusEnter")),Object(r.b)("p",null,"A shout that is sent whenever a bot starts being focused by the player."),Object(r.b)("p",null,"Focus is when the bot is in the center of the screen."),Object(r.b)("p",null,"Only sent if ",Object(r.b)(i.TagLink,{tag:"focusable",mdxType:"TagLink"})," is true."),Object(r.b)("h4",{id:"arguments-52"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onanyfocusexit"},Object(r.b)("inlineCode",{parentName:"h3"},"@onAnyFocusExit")),Object(r.b)("p",null,"A shout that is sent whenever a bot stops being focused by the player."),Object(r.b)("p",null,"Focus is when the bot is in the center of the screen."),Object(r.b)("h4",{id:"arguments-53"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),Object(r.b)("h3",{id:"onwebhook"},Object(r.b)("inlineCode",{parentName:"h3"},"@onWebhook")),Object(r.b)("p",null,"A shout that is sent whenever a webhook is received."),Object(r.b)("h4",{id:"arguments-54"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  method: string,\n  url: string,\n  data: any,\n  headers: any\n};\n")),Object(r.b)("h3",{id:"onstoryaction"},Object(r.b)("inlineCode",{parentName:"h3"},"@onStoryAction")),Object(r.b)("p",null,"A shout that is sent whenever an action happens."),Object(r.b)("h4",{id:"arguments-55"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  action: any\n};\n")),Object(r.b)("h3",{id:"onremotewhisper"},Object(r.b)("inlineCode",{parentName:"h3"},"@onRemoteWhisper")),Object(r.b)("p",null,"A shout that is sent whenever a message is received from another player."),Object(r.b)("h4",{id:"arguments-56"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n    /**\n     * The name of the message.\n     */\n    name: string,\n\n    /**\n     * The argument that was included in the message.\n     */\n    that: any,\n\n    /**\n     * The ID of the player that sent the message.\n     */\n    playerId: string\n};\n")),Object(r.b)("h4",{id:"examples"},"Examples:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},'Show a toast when a "custom" message is received.')),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'if (that.name === "custom") {\n    player.toast("Got message from " + that.playerId + " with " + that.that);\n}\n')),Object(r.b)("ol",{start:2},Object(r.b)("li",{parentName:"ol"},"Send a message back to the player that sent the message.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'if (that.name === "hello") {\n    remoteWhisper(that.playerId, "hi");\n}\n')),Object(r.b)("h3",{id:"onremoteplayersubscribed"},Object(r.b)("inlineCode",{parentName:"h3"},"@onRemotePlayerSubscribed")),Object(r.b)("p",null,"A shout that is run on every other player when a player joins the current story."),Object(r.b)("p",null,"Since this shout is run on every player, you should be careful about performing duplicate actions.\nWhen in doubt, elect a player to perform all actions that should only be executed once.\nSee example 2 below."),Object(r.b)("h4",{id:"arguments-57"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n    /**\n     * The ID of the player that joined the story.\n     */\n    playerId: string\n};\n")),Object(r.b)("h4",{id:"examples-1"},"Examples:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Show a toast when a player joins.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'player.toast("Player joined: " + that.playerId);\n')),Object(r.b)("ol",{start:2},Object(r.b)("li",{parentName:"ol"},"Create a bot when a player joins.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"// Check if the current player is the \"server\" player.\n// This will ensure that only one bot is created.\nif (getID(player.getBot()) === 'server') {\n    create({\n        playerLog: true,\n        label: 'Player Joined: ' + that.playerId\n    });\n}\n")),Object(r.b)("h3",{id:"onremoteplayerunsubscribed"},Object(r.b)("inlineCode",{parentName:"h3"},"@onRemotePlayerUnsubscribed")),Object(r.b)("p",null,"A shout that is run on every other player when a player leaves the current story."),Object(r.b)("p",null,"Since this shout is run on every player, you should be careful about performing duplicate actions.\nWhen in doubt, elect a player to perform all actions that should only be executed once.\nSee example 2 below."),Object(r.b)("h4",{id:"arguments-58"},"Arguments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"let that: {\n    /**\n     * The ID of the player that left the story.\n     */\n    playerId: string\n};\n")),Object(r.b)("h4",{id:"examples-2"},"Examples:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Show a toast when a player leaves.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'player.toast("Player joined: " + that.playerId);\n')),Object(r.b)("ol",{start:2},Object(r.b)("li",{parentName:"ol"},"Create a bot when a player leaves.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"// Check if the current player is the \"server\" player.\n// This will ensure that only one bot is created.\nif (getID(player.getBot()) === 'server') {\n    create({\n        playerLog: true,\n        label: 'Player Left: ' + that.playerId\n    });\n}\n")))}d.isMDXComponent=!0}}]);