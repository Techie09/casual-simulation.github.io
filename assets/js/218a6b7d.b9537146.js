(self.webpackChunkcasual_simulation=self.webpackChunkcasual_simulation||[]).push([[283,658],{9662:function(e,t,n){"use strict";function a(e){if(null==e)throw new TypeError("Cannot destructure undefined")}n.r(t),n.d(t,{ActionLink:function(){return f},Alert:function(){return F},AnyColorValues:function(){return g},AnyCursorValues:function(){return k},AutomaticBadge:function(){return D},Badge:function(){return w},Badges:function(){return T},ConfigBotBadge:function(){return L},DataTagLink:function(){return y},Example:function(){return U},ExampleIframe:function(){return j},HistoryBotBadge:function(){return B},ImuPortalBadge:function(){return R},InventoryPortalBadge:function(){return E},LabelAnchorValues:function(){return x},LeftWristPortalBadge:function(){return S},ListenTagLink:function(){return v},MeetPortalBadge:function(){return V},MenuPortalBadge:function(){return O},NormalCode:function(){return N},PagePortalBadge:function(){return P},PossibleValue:function(){return c},PossibleValueCode:function(){return m},PossibleValuesTable:function(){return p},ReadOnlyBadge:function(){return A},RightWristPortalBadge:function(){return M},SheetPortalBadge:function(){return z},TagLink:function(){return b},TagPortalBadge:function(){return I},VideoBadge:function(){return C},default:function(){return H},frontMatter:function(){return d},metadata:function(){return h},toc:function(){return u}});var o=n(4034),r=n(9973),i=n(7294),s=n(3905),l=n(4996),d={},h={unversionedId:"components",id:"components",isDocsHomePage:!1,title:"components",description:"Value",source:"@site/docs/components.mdx",sourceDirName:".",slug:"/components",permalink:"/docs/components",editUrl:"https://github.com/casual-simulation/casualos/tree/develop/docs/docs/components.mdx",version:"current",frontMatter:{}},u=[],p=function(e){var t=e.children;return(0,s.kt)("table",null,(0,s.kt)("thead",null,(0,s.kt)("tr",null,(0,s.kt)("th",null,"Value"),(0,s.kt)("th",null,"Description"))),(0,s.kt)("tbody",null,t))},c=function(e){var t=e.value,n=e.children,a=(0,r.Z)(e,["value","children"]);return(0,s.kt)("tr",a,(0,s.kt)("td",null,t),(0,s.kt)("td",null,n))},m=function(e){var t=e.value,n=e.children,a=(0,r.Z)(e,["value","children"]);return(0,s.kt)(c,(0,o.Z)({value:(0,s.kt)("code",null,t)},a,{mdxType:"PossibleValue"}),n)},g=function(e){return a(e),(0,s.kt)(i.Fragment,null,(0,s.kt)(c,{value:"Any X11 Color",mdxType:"PossibleValue"},(0,s.kt)("a",{href:"https://en.wikipedia.org/wiki/X11_color_names",target:"_blank"},"X11 colors")," are a list of standard colors that web browsers support."),(0,s.kt)(c,{value:"Any Hex Color",mdxType:"PossibleValue"},(0,s.kt)("a",{href:"https://en.wikipedia.org/wiki/Web_colors#Hex_triplet",target:"_blank"},"Hex colors")," are three or six digit numbers that specify a color by its red, green, and blue components."))},k=function(e){return a(e),(0,s.kt)(i.Fragment,null,(0,s.kt)(m,{value:"auto",mdxType:"PossibleValueCode"},"The cursor automatically changes its look based on the context. For page portal bots, this means that the arrow cursor is used. For menu portal bots, this means that the pointer is used when the bot has a ",(0,s.kt)(b,{tag:"@onClick",mdxType:"TagLink"})," and the arrow is used otherwise. (default)"),(0,s.kt)(m,{value:"default",mdxType:"PossibleValueCode"},"The cursor looks like the default cursor for the platform. Generally, this means the arrow cursor."),(0,s.kt)(m,{value:"none",mdxType:"PossibleValueCode"},"The cursor is invisible."),(0,s.kt)(m,{value:"wait",mdxType:"PossibleValueCode"},"wait"),(0,s.kt)(m,{value:"context-menu",mdxType:"PossibleValueCode"},"context-menu"),(0,s.kt)(m,{value:"help",mdxType:"PossibleValueCode"},"help"),(0,s.kt)(m,{value:"pointer",mdxType:"PossibleValueCode"},"pointer"),(0,s.kt)(m,{value:"progress",mdxType:"PossibleValueCode"},"progress"),(0,s.kt)(m,{value:"cell",mdxType:"PossibleValueCode"},"cell"),(0,s.kt)(m,{value:"crosshair",mdxType:"PossibleValueCode"},"crosshair"),(0,s.kt)(m,{value:"text",mdxType:"PossibleValueCode"},"text"),(0,s.kt)(m,{value:"vertical-text",mdxType:"PossibleValueCode"},"vertical-text"),(0,s.kt)(m,{value:"alias",mdxType:"PossibleValueCode"},"alias"),(0,s.kt)(m,{value:"copy",mdxType:"PossibleValueCode"},"copy"),(0,s.kt)(m,{value:"move",mdxType:"PossibleValueCode"},"move"),(0,s.kt)(m,{value:"no-drop",mdxType:"PossibleValueCode"},"no-drop"),(0,s.kt)(m,{value:"not-allowed",mdxType:"PossibleValueCode"},"not-allowed"),(0,s.kt)(m,{value:"grab",mdxType:"PossibleValueCode"},"grab"),(0,s.kt)(m,{value:"grabbing",mdxType:"PossibleValueCode"},"grabbing"),(0,s.kt)(m,{value:"all-scroll",mdxType:"PossibleValueCode"},"all-scroll"),(0,s.kt)(m,{value:"col-resize",mdxType:"PossibleValueCode"},"col-resize"),(0,s.kt)(m,{value:"row-resize",mdxType:"PossibleValueCode"},"row-resize"),(0,s.kt)(m,{value:"n-resize",mdxType:"PossibleValueCode"},"n-resize"),(0,s.kt)(m,{value:"e-resize",mdxType:"PossibleValueCode"},"e-resize"),(0,s.kt)(m,{value:"s-resize",mdxType:"PossibleValueCode"},"s-resize"),(0,s.kt)(m,{value:"w-resize",mdxType:"PossibleValueCode"},"w-resize"),(0,s.kt)(m,{value:"ne-resize",mdxType:"PossibleValueCode"},"ne-resize"),(0,s.kt)(m,{value:"nw-resize",mdxType:"PossibleValueCode"},"nw-resize"),(0,s.kt)(m,{value:"se-resize",mdxType:"PossibleValueCode"},"se-resize"),(0,s.kt)(m,{value:"sw-resize",mdxType:"PossibleValueCode"},"sw-resize"),(0,s.kt)(m,{value:"ew-resize",mdxType:"PossibleValueCode"},"ew-resize"),(0,s.kt)(m,{value:"ns-resize",mdxType:"PossibleValueCode"},"ns-resize"),(0,s.kt)(m,{value:"nesw-resize",mdxType:"PossibleValueCode"},"nesw-resize"),(0,s.kt)(m,{value:"nwse-resize",mdxType:"PossibleValueCode"},"nwse-resize"),(0,s.kt)(m,{value:"zoom-in",mdxType:"PossibleValueCode"},"zoom-in"),(0,s.kt)(m,{value:"zoom-out",mdxType:"PossibleValueCode"},"zoom-out"),(0,s.kt)(c,{value:"Any URL",mdxType:"PossibleValue"},"The image at the given URL will be used as the cursor. Images should be 32x32 pixels or smaller otherwise they may not work."))},b=function(e){var t=e.tag;return t.startsWith("@")?(0,s.kt)(v,{tag:t,mdxType:"ListenTagLink"}):(0,s.kt)(y,{tag:t,mdxType:"DataTagLink"})},y=function(e){var t=e.tag;return(0,s.kt)("a",{href:(0,l.Z)("docs/tags")+"#"+t.replace(/\./g,"").toLowerCase()},(0,s.kt)(N,{mdxType:"NormalCode"},"#",t))},v=function(e){var t=e.tag;return(0,s.kt)("a",{href:(0,l.Z)("docs/listen-tags/tags")+"#"+t.replace(/[\.\(\)\@\[\]]/g,"").toLowerCase()},(0,s.kt)(N,{mdxType:"NormalCode"},t))},f=function(e){var t=e.action,n=e.children;return(0,s.kt)("a",{href:(0,l.Z)("docs/actions")+"#"+t.replace(/[\.\(\)\,\?]/g,"").replace(/\s/g,"-").toLowerCase()},n||(0,s.kt)(N,{mdxType:"NormalCode"},t))},N=function(e){var t=e.children;return i.createElement.apply(i,["code",{}].concat(t))},x=function(e){return a(e),(0,s.kt)(i.Fragment,null,(0,s.kt)(m,{value:"top",mdxType:"PossibleValueCode"},"Top of the bot facing world oriented up. (default)"),(0,s.kt)(m,{value:"front",mdxType:"PossibleValueCode"},"Front of the bot facing world oriented forward."),(0,s.kt)(m,{value:"back",mdxType:"PossibleValueCode"},"Back of the bot facing world oriented back."),(0,s.kt)(m,{value:"right",mdxType:"PossibleValueCode"},"Right of the bot facing world oriented right."),(0,s.kt)(m,{value:"left",mdxType:"PossibleValueCode"},"Left of the bot facing world oriented left."),(0,s.kt)(m,{value:"floating",mdxType:"PossibleValueCode"},"Floating above the bot."))},T=function(e){var t=e.children;return(0,s.kt)("div",{className:"row badge-row"},(0,s.kt)("div",{className:"col"},t))},w=function(e){var t=e.type,n=e.title,a=e.children;return(0,s.kt)("span",{title:n,className:"badge badge--"+t},a)},A=function(e){return a(e),(0,s.kt)(w,{type:"warning",mdxType:"Badge"},"Read-Only")},C=function(e){var t=e.url;return(0,s.kt)(w,{type:"info",mdxType:"Badge"},(0,s.kt)("a",{href:t,target:"_blank"},"Video"))},L=function(e){e.url;return(0,s.kt)(w,{type:"primary",mdxType:"Badge"},"Config Bot")},B=function(e){e.url;return(0,s.kt)(w,{type:"primary",mdxType:"Badge"},"History Bot")},D=function(e){e.url;return(0,s.kt)(w,{type:"success",title:"This tag is automatically set by CasualOS.",mdxType:"Badge"},"Automatic")},P=function(e){e.url;return(0,s.kt)(w,{type:"normal",title:"This tag is available on the page portal bot.",mdxType:"Badge"},"pagePortalBot")},E=function(e){e.url;return(0,s.kt)(w,{type:"normal",title:"This tag is available on the inventory portal bot.",mdxType:"Badge"},"inventoryPortalBot")},O=function(e){e.url;return(0,s.kt)(w,{type:"normal",title:"This tag is available on the menu portal bot.",mdxType:"Badge"},"menuPortalBot")},V=function(e){e.url;return(0,s.kt)(w,{type:"normal",title:"This tag is available on the meet portal bot.",mdxType:"Badge"},"meetPortalBot")},S=function(e){e.url;return(0,s.kt)(w,{type:"normal",title:"This tag is available on the left wrist portal bot.",mdxType:"Badge"},"leftWristPortalBot")},M=function(e){e.url;return(0,s.kt)(w,{type:"normal",title:"This tag is available on the right wrist portal bot.",mdxType:"Badge"},"rightWristPortalBot")},z=function(e){e.url;return(0,s.kt)(w,{type:"normal",title:"This tag is available on the sheet portal bot.",mdxType:"Badge"},"sheetPortalBot")},I=function(e){e.url;return(0,s.kt)(w,{type:"normal",title:"This tag is available on the tag portal bot.",mdxType:"Badge"},"tagPortalBot")},R=function(e){e.url;return(0,s.kt)(w,{type:"normal",title:"This tag is available on the IMU portal bot.",mdxType:"Badge"},"imuPortalBot")},F=function(e){var t=e.type,n=e.children;return(0,s.kt)("div",{className:"alert alert--"+t,role:"alert"},n)},U=function(e){var t=e.code;return(0,s.kt)(w,{type:"info",mdxType:"Badge"},(0,s.kt)("a",{target:"_blank",href:"https://casualos.com?auxCode="+t},"Example"))},j=function(e){var t=e.code;return(0,s.kt)("iframe",{className:"example",src:"https://casualos.com?auxCode="+t})},W={toc:u,PossibleValuesTable:p,PossibleValue:c,PossibleValueCode:m,AnyColorValues:g,AnyCursorValues:k,TagLink:b,DataTagLink:y,ListenTagLink:v,ActionLink:f,NormalCode:N,LabelAnchorValues:x,Badges:T,Badge:w,ReadOnlyBadge:A,VideoBadge:C,ConfigBotBadge:L,HistoryBotBadge:B,AutomaticBadge:D,PagePortalBadge:P,Alert:F,Example:U,ExampleIframe:j};function H(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,o.Z)({},W,n,{components:t,mdxType:"MDXLayout"}))}H.isMDXComponent=!0},6156:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d},default:function(){return u}});var a=n(4034),o=n(9973),r=(n(7294),n(3905)),i=n(9662),s={id:"tags",title:"Listen Tags",sidebar_label:"Tags",description:"Listen tags are tags that can receive shouts and whispers from other bots and actoins that happen from the user."},l={unversionedId:"listen-tags/tags",id:"listen-tags/tags",isDocsHomePage:!1,title:"Listen Tags",description:"Listen tags are tags that can receive shouts and whispers from other bots and actoins that happen from the user.",source:"@site/docs/listen-tags/tags.mdx",sourceDirName:"listen-tags",slug:"/listen-tags/tags",permalink:"/docs/listen-tags/tags",editUrl:"https://github.com/casual-simulation/casualos/tree/develop/docs/docs/listen-tags/tags.mdx",version:"current",sidebar_label:"Tags",frontMatter:{id:"tags",title:"Listen Tags",sidebar_label:"Tags",description:"Listen tags are tags that can receive shouts and whispers from other bots and actoins that happen from the user."},sidebar:"docs",previous:{title:"Tags",permalink:"/docs/tags"},next:{title:"Listen Tag Variables",permalink:"/docs/listen-tags/variables"}},d=[{value:"Whisper Tags",id:"whisper-tags",children:[{value:"<code>@onCreate</code>",id:"oncreate",children:[]},{value:"<code>@onDestroy</code>",id:"ondestroy",children:[]},{value:"<code>@onModDrop</code>",id:"onmoddrop",children:[]},{value:"<code>@onModDropEnter</code>",id:"onmoddropenter",children:[]},{value:"<code>@onModDropExit</code>",id:"onmoddropexit",children:[]},{value:"<code>@onClick</code>",id:"onclick",children:[]},{value:"<code>@onPointerEnter</code>",id:"onpointerenter",children:[]},{value:"<code>@onPointerExit</code>",id:"onpointerexit",children:[]},{value:"<code>@onPointerDown</code>",id:"onpointerdown",children:[]},{value:"<code>@onPointerUp</code>",id:"onpointerup",children:[]},{value:"<code>@onDrag</code>",id:"ondrag",children:[]},{value:"<code>@onDragging</code>",id:"ondragging",children:[]},{value:"<code>@onDrop</code>",id:"ondrop",children:[]},{value:"<code>@onDropEnter</code>",id:"ondropenter",children:[]},{value:"<code>@onDropExit</code>",id:"ondropexit",children:[]},{value:"<code>@onSaveInput</code>",id:"onsaveinput",children:[]},{value:"<code>@onCloseInput</code>",id:"oncloseinput",children:[]},{value:"<code>@onListen</code>",id:"onlisten",children:[]},{value:"<code>@onMaxLODEnter</code>",id:"onmaxlodenter",children:[]},{value:"<code>@onMinLODEnter</code>",id:"onminlodenter",children:[]},{value:"<code>@onMaxLODExit</code>",id:"onmaxlodexit",children:[]},{value:"<code>@onMinLODExit</code>",id:"onminlodexit",children:[]},{value:"<code>@onFocusEnter</code>",id:"onfocusenter",children:[]},{value:"<code>@onFocusExit</code>",id:"onfocusexit",children:[]},{value:"<code>@onInputTyping</code>",id:"oninputtyping",children:[]},{value:"<code>@onSubmit</code>",id:"onsubmit",children:[]},{value:"<code>@onBotAdded</code>",id:"onbotadded",children:[]},{value:"<code>@onBotChanged</code>",id:"onbotchanged",children:[]},{value:"<code>@[groupName][stateName]OnEnter</code>",id:"groupnamestatenameonenter",children:[]},{value:"<code>@[groupName][stateName]OnExit</code>",id:"groupnamestatenameonexit",children:[]}]},{value:"Shout Tags",id:"shout-tags",children:[{value:"<code>@onAnyCreate</code>",id:"onanycreate",children:[]},{value:"<code>@onAnyBotClicked</code>",id:"onanybotclicked",children:[]},{value:"<code>@onAnyBotPointerEnter</code>",id:"onanybotpointerenter",children:[]},{value:"<code>@onAnyBotPointerExit</code>",id:"onanybotpointerexit",children:[]},{value:"<code>@onAnyBotPointerDown</code>",id:"onanybotpointerdown",children:[]},{value:"<code>@onAnyBotPointerUp</code>",id:"onanybotpointerup",children:[]},{value:"<code>@onChat</code>",id:"onchat",children:[]},{value:"<code>@onChatTyping</code>",id:"onchattyping",children:[]},{value:"<code>@onFileUpload</code>",id:"onfileupload",children:[]},{value:"<code>@onGridClick</code>",id:"ongridclick",children:[]},{value:"<code>@onGridDown</code>",id:"ongriddown",children:[]},{value:"<code>@onGridUp</code>",id:"ongridup",children:[]},{value:"<code>@onPortalChanged</code>",id:"onportalchanged",children:[]},{value:"<code>@onBarcodeScanned</code>",id:"onbarcodescanned",children:[]},{value:"<code>@onBarcodeScannerOpened</code>",id:"onbarcodescanneropened",children:[]},{value:"<code>@onBarcodeScannerClosed</code>",id:"onbarcodescannerclosed",children:[]},{value:"<code>@onQRCodeScanned</code>",id:"onqrcodescanned",children:[]},{value:"<code>@onQRCodeScannerOpened</code>",id:"onqrcodescanneropened",children:[]},{value:"<code>@onQRCodeScannerClosed</code>",id:"onqrcodescannerclosed",children:[]},{value:"<code>@onTapCode</code>",id:"ontapcode",children:[]},{value:"<code>@onKeyDown</code>",id:"onkeydown",children:[]},{value:"<code>@onKeyUp</code>",id:"onkeyup",children:[]},{value:"<code>@onServerJoined</code>",id:"onserverjoined",children:[]},{value:"<code>@onServerLeave</code>",id:"onserverleave",children:[]},{value:"<code>@onServerStreaming</code>",id:"onserverstreaming",children:[]},{value:"<code>@onServerStreamLost</code>",id:"onserverstreamlost",children:[]},{value:"<code>@onCheckout</code>",id:"oncheckout",children:[]},{value:"<code>@onPaste</code>",id:"onpaste",children:[]},{value:"<code>@onPaymentSuccessful</code>",id:"onpaymentsuccessful",children:[]},{value:"<code>@onPaymentFailed</code>",id:"onpaymentfailed",children:[]},{value:"<code>@onAnyBotDrag</code>",id:"onanybotdrag",children:[]},{value:"<code>@onAnyBotDragging</code>",id:"onanybotdragging",children:[]},{value:"<code>@onAnyBotDrop</code>",id:"onanybotdrop",children:[]},{value:"<code>@onAnyBotDropEnter</code>",id:"onanybotdropenter",children:[]},{value:"<code>@onAnyBotDropExit</code>",id:"onanybotdropexit",children:[]},{value:"<code>@onAnyListen</code>",id:"onanylisten",children:[]},{value:"<code>@onAnyMaxLODEnter</code>",id:"onanymaxlodenter",children:[]},{value:"<code>@onAnyMinLODEnter</code>",id:"onanyminlodenter",children:[]},{value:"<code>@onAnyMaxLODExit</code>",id:"onanymaxlodexit",children:[]},{value:"<code>@onAnyMinLODExit</code>",id:"onanyminlodexit",children:[]},{value:"<code>@onAnyFocusEnter</code>",id:"onanyfocusenter",children:[]},{value:"<code>@onAnyFocusExit</code>",id:"onanyfocusexit",children:[]},{value:"<code>@onWebhook</code>",id:"onwebhook",children:[]},{value:"<code>@onServerAction</code>",id:"onserveraction",children:[]},{value:"<code>@onSerialData</code>",id:"onserialdata",children:[]},{value:"<code>@onSheetTagClick</code>",id:"onsheettagclick",children:[]},{value:"<code>@onSheetBotClick</code>",id:"onsheetbotclick",children:[]},{value:"<code>@onSheetBotIDClick</code>",id:"onsheetbotidclick",children:[]},{value:"<code>@onRemoteData</code>",id:"onremotedata",children:[]},{value:"<code>@onRemoteJoined</code>",id:"onremotejoined",children:[]},{value:"<code>@onRemoteLeave</code>",id:"onremoteleave",children:[]},{value:"<code>@onAnyBotsAdded</code>",id:"onanybotsadded",children:[]},{value:"<code>@onAnyBotsRemoved</code>",id:"onanybotsremoved",children:[]},{value:"<code>@onAnyBotsChanged</code>",id:"onanybotschanged",children:[]},{value:"<code>@onError</code>",id:"onerror",children:[]}]}],h={toc:d};function u(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'Listen tags are tags that can receive shouts and whispers from other bots and actions that happen from the user.\nTo create a listen tag, you make a normal tag and enter a "@" as the first character of the tag\'s value.'),(0,r.kt)("p",null,"Each listen tag has some predefined variables that can be used. You can read about those ",(0,r.kt)("a",{parentName:"p",href:"/docs/listen-tags/variables"},"here"),"."),(0,r.kt)("h2",{id:"whisper-tags"},"Whisper Tags"),(0,r.kt)("p",null,"Whispers are shouts that are sent to specific bots instead of all bots."),(0,r.kt)("h3",{id:"oncreate"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onCreate")),(0,r.kt)("p",null,"A whisper that is sent to a bot when it is first created."),(0,r.kt)("h3",{id:"ondestroy"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onDestroy")),(0,r.kt)("p",null,"A whisper that is sent to a bot when it is being destroyed."),(0,r.kt)("h3",{id:"onmoddrop"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onModDrop")),(0,r.kt)("p",null,"A whisper that is sent to a bot that a mod was dropped on.\nIf a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"@onModDrop")," is not specified, then the mod will be applied automatically.\nIf a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"@onModDrop")," is specified, then the mod needs to be applied manually via ",(0,r.kt)(i.ActionLink,{action:"applyMod(bot, ...mods)",mdxType:"ActionLink"}),"."),(0,r.kt)("h4",{id:"arguments"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Mod {\n  [tag: string]: any;\n}\n\nlet that: {\n  mod: Mod\n};\n")),(0,r.kt)("h3",{id:"onmoddropenter"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onModDropEnter")),(0,r.kt)("p",null,"A whisper that is sent to the bot that a mod started to be dragged onto."),(0,r.kt)("h4",{id:"arguments-1"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  mod: Mod,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onmoddropexit"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onModDropExit")),(0,r.kt)("p",null,"A whisper that is sent to the bot that a mod was just dragged off of."),(0,r.kt)("h4",{id:"arguments-2"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  mod: Mod,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onclick"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onClick")),(0,r.kt)("p",null,"A whisper that is sent to the bot that was clicked."),(0,r.kt)("h4",{id:"arguments-3"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  face: 'left' | 'right' | 'front' | 'back' | 'top' | 'bottom',\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onpointerenter"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onPointerEnter")),(0,r.kt)("p",null,"A whisper that is sent to a bot when the mouse cursor starts to hover over it."),(0,r.kt)("h4",{id:"arguments-4"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onpointerexit"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onPointerExit")),(0,r.kt)("p",null,"A whisper that is sent to a bot when the mouse cursor stops hovering over it."),(0,r.kt)("h4",{id:"arguments-5"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onpointerdown"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onPointerDown")),(0,r.kt)("p",null,"A whipser that is sent to a bot when the user starts clicking it."),(0,r.kt)("h4",{id:"arguments-6"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onpointerup"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onPointerUp")),(0,r.kt)("p",null,"A whisper that is sent to a bot when the user stops clicking it."),(0,r.kt)("h4",{id:"arguments-7"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"ondrag"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onDrag")),(0,r.kt)("p",null,"A whisper that is sent whenever a bot is starting to be dragged."),(0,r.kt)("h4",{id:"arguments-8"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  face: 'left' | 'right' | 'front' | 'back' | 'top' | 'bottom',\n  from: {\n    x: number,\n    y: number,\n    dimension: string\n  }\n};\n")),(0,r.kt)("h3",{id:"ondragging"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onDragging")),(0,r.kt)("p",null,"A whisper that is sent whenever a bot would be moved while dragging.\nNote that this whisper is only sent for drag operations that have called ",(0,r.kt)(i.ActionLink,{action:"os.enableCustomDragging()",mdxType:"ActionLink"}),"."),(0,r.kt)("h4",{id:"arguments-9"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  to: {\n    x: number,\n    y: number,\n    bot: Bot,\n    dimension: string\n  },\n  from: {\n    x: number,\n    y: number,\n    dimension: string\n  }\n};\n")),(0,r.kt)("h3",{id:"ondrop"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onDrop")),(0,r.kt)("p",null,"A whisper that is sent whenever a bot has been dropped after being dragged.\nThe whisper is sent to both the bot that was dropped and the bot that was dropped on."),(0,r.kt)("h4",{id:"arguments-10"},"Arguments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  to: {\n    bot: Bot,\n    x: number,\n    y: number,\n    dimension: string\n  },\n  from: {\n    x: number,\n    y: number,\n    dimension: string\n  }\n};\n")),(0,r.kt)("h3",{id:"ondropenter"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onDropEnter")),(0,r.kt)("p",null,"A whisper that is sent to both bots when a bot is dragged onto another bot."),(0,r.kt)("h4",{id:"arguments-11"},"Arguments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  dragBot: Bot,\n  to: {\n    bot: Bot,\n    x: number,\n    y: number,\n    dimension: string\n  },\n  from: {\n    x: number,\n    y: number,\n    dimension: string\n  }\n};\n")),(0,r.kt)("h3",{id:"ondropexit"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onDropExit")),(0,r.kt)("p",null,"A whisper that is sent to both bots when a bot is dragged off of another bot."),(0,r.kt)("h4",{id:"arguments-12"},"Arguments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  dragBot: Bot,\n  to: {\n    bot: Bot,\n    x: number,\n    y: number,\n    dimension: string\n  },\n  from: {\n    x: number,\n    y: number,\n    dimension: string\n  }\n};\n")),(0,r.kt)("h3",{id:"onsaveinput"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onSaveInput")),(0,r.kt)("p",null,"A whisper that is sent when the input box for a bot has been changed by the user."),(0,r.kt)("h4",{id:"arguments-13"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that = null;\n")),(0,r.kt)("h3",{id:"oncloseinput"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onCloseInput")),(0,r.kt)("p",null,"A whisper that is sent when the input box for a bot has been closed by the user."),(0,r.kt)("h4",{id:"arguments-14"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that = null;\n")),(0,r.kt)("h3",{id:"onlisten"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onListen")),(0,r.kt)("p",null,"A whisper that is sent whenever this bot receives a whisper or shout."),(0,r.kt)("h4",{id:"arguments-15"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  name: string,\n  that: any,\n  targets: Bot[],\n  listeners: Bot[],\n  responses: any[]\n};\n")),(0,r.kt)("h3",{id:"onmaxlodenter"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onMaxLODEnter")),(0,r.kt)("p",null,"A whisper that is sent whenever a bot enters its maximum Level-Of-Detail."),(0,r.kt)("h4",{id:"arguments-16"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onminlodenter"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onMinLODEnter")),(0,r.kt)("p",null,"A whisper that is sent whenever a bot enters its minimum Level-Of-Detail."),(0,r.kt)("h4",{id:"arguments-17"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onmaxlodexit"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onMaxLODExit")),(0,r.kt)("p",null,"A whisper that is sent whenever a bot exits its maximum Level-Of-Detail."),(0,r.kt)("h4",{id:"arguments-18"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onminlodexit"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onMinLODExit")),(0,r.kt)("p",null,"A whisper that is sent whenever a bot exits its minimum Level-Of-Detail."),(0,r.kt)("h4",{id:"arguments-19"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onfocusenter"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onFocusEnter")),(0,r.kt)("p",null,"A whisper that is sent whenever a bot starts being focused by the player."),(0,r.kt)("p",null,"Focus is when the bot is in the center of the screen."),(0,r.kt)("p",null,"Only sent if ",(0,r.kt)(i.TagLink,{tag:"focusable",mdxType:"TagLink"})," is true."),(0,r.kt)("h4",{id:"arguments-20"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onfocusexit"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onFocusExit")),(0,r.kt)("p",null,"A whisper that is sent whenever a bot stops being focused by the player."),(0,r.kt)("p",null,"Focus is when the bot is in the center of the screen."),(0,r.kt)("h4",{id:"arguments-21"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"oninputtyping"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onInputTyping")),(0,r.kt)("p",null,"A whisper that is sent whenever the player is typing in the menu bot's input box.\nOnly sent for bots that are in a menu and have ",(0,r.kt)(i.TagLink,{tag:"form",mdxType:"TagLink"})," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"input"),"."),(0,r.kt)("h4",{id:"arguments-22"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  text: string\n};\n")),(0,r.kt)("h3",{id:"onsubmit"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onSubmit")),(0,r.kt)("p",null,"A whisper that is sent whenever the player submits the text in the menu bot's input box.\nThis can happen by pressing enter while there is text in the box or by clicking the send button on the right side of the box."),(0,r.kt)("p",null,"Only sent for bots that are in a menu and have ",(0,r.kt)(i.TagLink,{tag:"form",mdxType:"TagLink"})," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"input"),"."),(0,r.kt)("h4",{id:"arguments-23"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  text: string\n};\n")),(0,r.kt)("h3",{id:"onbotadded"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onBotAdded")),(0,r.kt)("p",null,"A whisper that is sent when the bot is added to the local server."),(0,r.kt)("p",null,"Unlike ",(0,r.kt)(i.TagLink,{tag:"@onCreate",mdxType:"TagLink"}),", this listen tag is triggered whenever the bot as been added to the current device's server, even if the bot has already been created.\nAn example of this happening is when you first load a server. Even though all the bots have already been created, they still need to be added to the server in order for you to interact with them."),(0,r.kt)("p",null,"Note that this listen tag is triggered after any pending scripts have finished running. This means that if a script creates multiple bots, ",(0,r.kt)("inlineCode",{parentName:"p"},"@onBotAdded")," will be triggered after all the bots have been created."),(0,r.kt)("p",null,"There is no ",(0,r.kt)("inlineCode",{parentName:"p"},"that")," argument for this listen tag."),(0,r.kt)("h3",{id:"onbotchanged"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onBotChanged")),(0,r.kt)("p",null,"A whisper that is sent when a tag on the bot is updated."),(0,r.kt)("p",null,"This listen tag is triggered whenever the bot has been updated in the current device's server, even if the bot was not updated locally.\nAn example of this happening is when another player changes a tag in the sheet portal. Even though the change was made on their device, it will show up on the current device."),(0,r.kt)("p",null,"Note that this listen tag is triggered after any pending scripts have finished running. This means that if a script updates the same tag multiple times, ",(0,r.kt)("inlineCode",{parentName:"p"},"@onBotChanged")," will still only be triggered once."),(0,r.kt)("h4",{id:"arguments-24"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n    /**\n     * The list of tags that were changed on the bot.\n     */\n    tags: string[]\n};\n")),(0,r.kt)("h3",{id:"groupnamestatenameonenter"},(0,r.kt)("inlineCode",{parentName:"h3"},"@[groupName][stateName]OnEnter")),(0,r.kt)("p",null,"A whisper that is sent whenever the ",(0,r.kt)("inlineCode",{parentName:"p"},"[groupName]")," tag is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"[stateName]")," via the ",(0,r.kt)(i.ActionLink,{action:"changeState(bot, stateName, groupName?)",mdxType:"ActionLink"})," function."),(0,r.kt)("h4",{id:"arguments-25"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  /**\n   * The stateName that the bot is coming from.\n   */\n  from: string,\n\n  /**\n   * The stateName that the bot is going to.\n   */\n  to: string,\n};\n")),(0,r.kt)("h3",{id:"groupnamestatenameonexit"},(0,r.kt)("inlineCode",{parentName:"h3"},"@[groupName][stateName]OnExit")),(0,r.kt)("p",null,"A whisper that is sent whenever the ",(0,r.kt)("inlineCode",{parentName:"p"},"[groupName]")," tag is changed from ",(0,r.kt)("inlineCode",{parentName:"p"},"[stateName]")," via the ",(0,r.kt)(i.ActionLink,{action:"changeState(bot, stateName, groupName?)",mdxType:"ActionLink"})," function."),(0,r.kt)("h4",{id:"arguments-26"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  /**\n   * The stateName that the bot is coming from.\n   */\n  from: string,\n\n  /**\n   * The stateName that the bot is going to.\n   */\n  to: string,\n};\n")),(0,r.kt)("h2",{id:"shout-tags"},"Shout Tags"),(0,r.kt)("p",null,"Shouts are events which are sent to all bots."),(0,r.kt)("h3",{id:"onanycreate"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyCreate")),(0,r.kt)("p",null,"A shout that is sent to all bots when a bot is created. Sent immediately after ",(0,r.kt)(i.TagLink,{tag:"@onCreate",mdxType:"TagLink"})," is sent."),(0,r.kt)("h4",{id:"arguments-27"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot\n};\n")),(0,r.kt)("h3",{id:"onanybotclicked"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyBotClicked")),(0,r.kt)("p",null,"A shout that is sent to all bots when a bot is clicked."),(0,r.kt)("h4",{id:"arguments-28"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  face: 'left' | 'right' | 'front' | 'back' | 'top' | 'bottom',\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onanybotpointerenter"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyBotPointerEnter")),(0,r.kt)("p",null,"A shout that is sent to all bots when the mouse cursor starts to hover over a bot."),(0,r.kt)("h4",{id:"arguments-29"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onanybotpointerexit"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyBotPointerExit")),(0,r.kt)("p",null,"A shout that is sent to all bots when the mouse cursor stops hovering over a bot."),(0,r.kt)("h4",{id:"arguments-30"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string1\n};\n")),(0,r.kt)("h3",{id:"onanybotpointerdown"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyBotPointerDown")),(0,r.kt)("p",null,"A shout that is sent all bots when the user starts clicking a bot."),(0,r.kt)("h4",{id:"arguments-31"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onanybotpointerup"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyBotPointerUp")),(0,r.kt)("p",null,"A shout that is sent to all bots when the user stops clicking a bot."),(0,r.kt)("h4",{id:"arguments-32"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onchat"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onChat")),(0,r.kt)("p",null,'A shout that is sent to all bots when the player sends a chat message.\nChat messages can be sent when the player presses the Enter key while writing a message or by clicking/tapping the "Send Message" button to the right of the chat bar.'),(0,r.kt)("h4",{id:"arguments-33"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  message: string\n};\n")),(0,r.kt)("h3",{id:"onchattyping"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onChatTyping")),(0,r.kt)("p",null,"A shout that is sent to all bots when the player changes the text in the chat bar.\nOnly triggered when the chat bar is visible."),(0,r.kt)("h4",{id:"arguments-34"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  message: string\n};\n")),(0,r.kt)("h3",{id:"onfileupload"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onFileUpload")),(0,r.kt)("p",null,"A shout that is sent to all bots when the user drags a file into the window."),(0,r.kt)("h4",{id:"arguments-35"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  file: {\n    // The name of the file. Includes the file extension.\n    name: string;\n\n    // The size of the file in bytes.\n    size: number;\n\n    // The data in the file.\n    // If the file is a text file, the data will be a string.\n    // If the file is not a text file, then the data will be an ArrayBuffer.\n    //\n    // Text files have one of the following extensions:\n    // .txt\n    // .json\n    // .md\n    // .aux\n    // .html\n    // .js\n    // .ts\n    // All the other file extensions map to an ArrayBuffer\n    data: string | ArrayBuffer;\n  }\n};\n")),(0,r.kt)("h3",{id:"ongridclick"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onGridClick")),(0,r.kt)("p",null,"A shout that is sent to all bots when the user clicks on empty space."),(0,r.kt)("h4",{id:"arguments-36"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  position: {\n    x: number,\n    y: number\n  },\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"ongriddown"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onGridDown")),(0,r.kt)("p",null,"A shout that is sent to all bots when the user starts clicking on empty space."),(0,r.kt)("h4",{id:"arguments-37"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  position: {\n    x: number,\n    y: number\n  },\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"ongridup"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onGridUp")),(0,r.kt)("p",null,"A shout that is sent to all bots when the user stops clicking on empty space."),(0,r.kt)("h4",{id:"arguments-38"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  position: {\n    x: number,\n    y: number\n  },\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onportalchanged"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onPortalChanged")),(0,r.kt)("p",null,"A shout that is sent to all bots when a portal changes on the config bot."),(0,r.kt)("h4",{id:"arguments-39"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  portal: string;\n  dimension: string;\n};\n")),(0,r.kt)("h3",{id:"onbarcodescanned"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onBarcodeScanned")),(0,r.kt)("p",null,"A shout that is sent to all bots when the player scans a barcode."),(0,r.kt)("h4",{id:"arguments-40"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: string;\n")),(0,r.kt)("h3",{id:"onbarcodescanneropened"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onBarcodeScannerOpened")),(0,r.kt)("p",null,"A shout that is sent to all bots when the barcode scanner is opened."),(0,r.kt)("h3",{id:"onbarcodescannerclosed"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onBarcodeScannerClosed")),(0,r.kt)("p",null,"A shout that is sent to all bots when the barcode scanner is closed."),(0,r.kt)("h3",{id:"onqrcodescanned"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onQRCodeScanned")),(0,r.kt)("p",null,"A shout that is sent to all bots when a QR Code is scanned."),(0,r.kt)("h4",{id:"arguments-41"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: string;\n")),(0,r.kt)("h3",{id:"onqrcodescanneropened"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onQRCodeScannerOpened")),(0,r.kt)("p",null,"A shout that is sent to all bots when the QR Code Scanner is opened."),(0,r.kt)("h3",{id:"onqrcodescannerclosed"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onQRCodeScannerClosed")),(0,r.kt)("p",null,"A shout that is sent to all bots when the QR Code Scanner is closed."),(0,r.kt)("h3",{id:"ontapcode"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onTapCode")),(0,r.kt)("p",null,"A shout that is sent to all bots whenever a 4-digit tap code is entered."),(0,r.kt)("h4",{id:"arguments-42"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: string;\n")),(0,r.kt)("h3",{id:"onkeydown"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onKeyDown")),(0,r.kt)("p",null,"A shout that is sent to all bots whenever the user starts pressing a key."),(0,r.kt)("h4",{id:"arguments-43"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  keys: string[]\n};\n")),(0,r.kt)("h3",{id:"onkeyup"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onKeyUp")),(0,r.kt)("p",null,"A shout that is sent to all bots whenever the user stops pressing a key."),(0,r.kt)("h4",{id:"arguments-44"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  keys: string[]\n};\n")),(0,r.kt)("h3",{id:"onserverjoined"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onServerJoined")),(0,r.kt)("p",null,"A shout that is sent when a server is loaded.\nSent to every server that is loaded."),(0,r.kt)("h4",{id:"arguments-45"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  server: string\n};\n")),(0,r.kt)("h3",{id:"onserverleave"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onServerLeave")),(0,r.kt)("p",null,"A shout that is sent when a server is unloaded.\nSent to every server that is loaded."),(0,r.kt)("h4",{id:"arguments-46"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  server: string\n};\n")),(0,r.kt)("h3",{id:"onserverstreaming"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onServerStreaming")),(0,r.kt)("p",null,"A shout that is sent when a server is connected and fully synced."),(0,r.kt)("p",null,"Note that this can occur multiple times throughout the lifetime of a session because the player can lose and regain its connection to the server."),(0,r.kt)("p",null,"Sent to every server that is loaded."),(0,r.kt)("h4",{id:"arguments-47"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  server: string\n};\n")),(0,r.kt)("h3",{id:"onserverstreamlost"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onServerStreamLost")),(0,r.kt)("p",null,"A shout that is sent when a server has been temporarily disconnected from the server."),(0,r.kt)("p",null,"Note that this can occur multiple times throughout the lifetime of a session because the player can lose and regain its connection to the server."),(0,r.kt)("p",null,"Sent to every server that is loaded."),(0,r.kt)("h4",{id:"arguments-48"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  server: string\n};\n")),(0,r.kt)("h3",{id:"oncheckout"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onCheckout")),(0,r.kt)("p",null,"A shout that is sent when the user submits their credit card info to purchase something."),(0,r.kt)("h4",{id:"arguments-49"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  token: string, \n  productId: string, \n  user: { \n    username: string, \n    device: string, \n    token: string\n  }\n};\n")),(0,r.kt)("h3",{id:"onpaste"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onPaste")),(0,r.kt)("p",null,"A shout that is sent when some text is pasted into the server."),(0,r.kt)("p",null,"This happens by pressing ",(0,r.kt)("kbd",null,"Ctrl"),"+",(0,r.kt)("kbd",null,"V")," or ",(0,r.kt)("kbd",null,"Cmd"),"+",(0,r.kt)("kbd",null,"V")," while something is in your clipboard."),(0,r.kt)("h4",{id:"arguments-50"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  text: string;\n};\n")),(0,r.kt)("h3",{id:"onpaymentsuccessful"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onPaymentSuccessful")),(0,r.kt)("p",null,"A shout that is sent when payment has been approved for a checkout."),(0,r.kt)("h4",{id:"arguments-51"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  /**\n   * The bot that was created for the transaction.\n   */\n  bot: Bot,\n  charge: any,\n  extra: any\n};\n")),(0,r.kt)("h3",{id:"onpaymentfailed"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onPaymentFailed")),(0,r.kt)("p",null,"A shout that is sent when payment has been rejected for a checkout."),(0,r.kt)("h4",{id:"arguments-52"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  /**\n   * The bot that was created for the transaction.\n   */\n  bot: Bot,\n  error: any,\n  extra: any\n};\n")),(0,r.kt)("h3",{id:"onanybotdrag"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyBotDrag")),(0,r.kt)("p",null,"A shout that is sent whenever a bot starts to be dragged."),(0,r.kt)("h4",{id:"arguments-53"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  face: 'left' | 'right' | 'front' | 'back' | 'top' | 'bottom',\n  from: {\n    x: number,\n    y: number,\n    dimension: string\n  }\n};\n")),(0,r.kt)("h3",{id:"onanybotdragging"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyBotDragging")),(0,r.kt)("p",null,"A shout that is sent whenever a bot would be moved while dragging.\nNote that this whisper is only sent for drag operations that have called ",(0,r.kt)(i.ActionLink,{action:"os.enableCustomDragging()",mdxType:"ActionLink"}),"."),(0,r.kt)("h4",{id:"arguments-54"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  to: {\n    bot: Bot,\n    x: number,\n    y: number,\n    dimension: string\n  },\n  from: {\n    x: number,\n    y: number,\n    dimension: string\n  }\n};\n")),(0,r.kt)("h3",{id:"onanybotdrop"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyBotDrop")),(0,r.kt)("p",null,"A shout that is sent whenever a bot is dropped after being dragged."),(0,r.kt)("h4",{id:"arguments-55"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  to: {\n    bot: Bot,\n    x: number,\n    y: number,\n    dimension: string\n  },\n  from: {\n    x: number,\n    y: number,\n    dimension: string\n  }\n};\n")),(0,r.kt)("h3",{id:"onanybotdropenter"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyBotDropEnter")),(0,r.kt)("p",null,"A shout that is sent whenever a bot is dragged onto another bot."),(0,r.kt)("h4",{id:"arguments-56"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  dragBot: Bot,\n  to: {\n    bot: Bot,\n    x: number,\n    y: number,\n    dimension: string\n  },\n  from: {\n    x: number,\n    y: number,\n    dimension: string\n  }\n};\n")),(0,r.kt)("h3",{id:"onanybotdropexit"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyBotDropExit")),(0,r.kt)("p",null,"A shout that is sent whenever a bot is dragged off of another bot."),(0,r.kt)("h4",{id:"arguments-57"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  dragBot: Bot,\n  to: {\n    bot: Bot,\n    x: number,\n    y: number,\n    dimension: string\n  },\n  from: {\n    x: number,\n    y: number,\n    dimension: string\n  }\n};\n")),(0,r.kt)("h3",{id:"onanylisten"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyListen")),(0,r.kt)("p",null,"A shout that is sent whenever a whisper or shout is issued."),(0,r.kt)("h4",{id:"arguments-58"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  name: string,\n  that: any,\n  targets: Bot[],\n  listeners: Bot[],\n  responses: any[]\n};\n")),(0,r.kt)("h3",{id:"onanymaxlodenter"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyMaxLODEnter")),(0,r.kt)("p",null,"A shout that is sent whenever a bot enters its maximum Level-Of-Detail."),(0,r.kt)("p",null,"Only sent for bots that have one of ",(0,r.kt)(i.TagLink,{tag:"@onMaxLODEnter",mdxType:"TagLink"}),",  ",(0,r.kt)(i.TagLink,{tag:"@onMaxLODExit",mdxType:"TagLink"}),", ",(0,r.kt)(i.TagLink,{tag:"@onMinLODEnter",mdxType:"TagLink"}),", ",(0,r.kt)(i.TagLink,{tag:"@onMinLODExit",mdxType:"TagLink"}),", ",(0,r.kt)(i.TagLink,{tag:"maxLODThreshold",mdxType:"TagLink"})," or ",(0,r.kt)(i.TagLink,{tag:"minLODThreshold",mdxType:"TagLink"})," specified."),(0,r.kt)("h4",{id:"arguments-59"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onanyminlodenter"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyMinLODEnter")),(0,r.kt)("p",null,"A shout that is sent whenever a bot enters its minimum Level-Of-Detail."),(0,r.kt)("p",null,"Only sent for bots that have one of ",(0,r.kt)(i.TagLink,{tag:"@onMaxLODEnter",mdxType:"TagLink"}),", ",(0,r.kt)(i.TagLink,{tag:"@onMaxLODExit",mdxType:"TagLink"}),", ",(0,r.kt)(i.TagLink,{tag:"@onMinLODEnter",mdxType:"TagLink"}),", ",(0,r.kt)(i.TagLink,{tag:"@onMinLODExit",mdxType:"TagLink"}),", ",(0,r.kt)(i.TagLink,{tag:"maxLODThreshold",mdxType:"TagLink"})," or ",(0,r.kt)(i.TagLink,{tag:"minLODThreshold",mdxType:"TagLink"})," specified."),(0,r.kt)("h4",{id:"arguments-60"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onanymaxlodexit"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyMaxLODExit")),(0,r.kt)("p",null,"A shout that is sent whenever a bot exits its maximum Level-Of-Detail."),(0,r.kt)("p",null,"Only sent for bots that have one of ",(0,r.kt)(i.TagLink,{tag:"@onMaxLODEnter",mdxType:"TagLink"}),", ",(0,r.kt)(i.TagLink,{tag:"@onMaxLODExit",mdxType:"TagLink"}),", ",(0,r.kt)(i.TagLink,{tag:"@onMinLODEnter",mdxType:"TagLink"}),", ",(0,r.kt)(i.TagLink,{tag:"@onMinLODExit",mdxType:"TagLink"}),", ",(0,r.kt)(i.TagLink,{tag:"maxLODThreshold",mdxType:"TagLink"})," or ",(0,r.kt)(i.TagLink,{tag:"minLODThreshold",mdxType:"TagLink"})," specified."),(0,r.kt)("h4",{id:"arguments-61"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onanyminlodexit"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyMinLODExit")),(0,r.kt)("p",null,"A shout that is sent whenever a bot exits its minimum Level-Of-Detail."),(0,r.kt)("p",null,"Only sent for bots that have one of ",(0,r.kt)(i.TagLink,{tag:"@onMaxLODEnter",mdxType:"TagLink"}),", ",(0,r.kt)(i.TagLink,{tag:"@onMaxLODExit",mdxType:"TagLink"}),", ",(0,r.kt)(i.TagLink,{tag:"@onMinLODEnter",mdxType:"TagLink"}),", ",(0,r.kt)(i.TagLink,{tag:"@onMinLODExit",mdxType:"TagLink"}),", ",(0,r.kt)(i.TagLink,{tag:"maxLODThreshold",mdxType:"TagLink"})," or ",(0,r.kt)(i.TagLink,{tag:"minLODThreshold",mdxType:"TagLink"})," specified."),(0,r.kt)("h4",{id:"arguments-62"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onanyfocusenter"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyFocusEnter")),(0,r.kt)("p",null,"A shout that is sent whenever a bot starts being focused by the player."),(0,r.kt)("p",null,"Focus is when the bot is in the center of the screen."),(0,r.kt)("p",null,"Only sent if ",(0,r.kt)(i.TagLink,{tag:"focusable",mdxType:"TagLink"})," is true."),(0,r.kt)("h4",{id:"arguments-63"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onanyfocusexit"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyFocusExit")),(0,r.kt)("p",null,"A shout that is sent whenever a bot stops being focused by the player."),(0,r.kt)("p",null,"Focus is when the bot is in the center of the screen."),(0,r.kt)("h4",{id:"arguments-64"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  bot: Bot,\n  dimension: string\n};\n")),(0,r.kt)("h3",{id:"onwebhook"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onWebhook")),(0,r.kt)("p",null,"A shout that is sent whenever a webhook is received.\nIf data is returned, the first result will be used as the HTTP response."),(0,r.kt)("h4",{id:"arguments-65"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  method: string,\n  url: string,\n  data: any,\n  headers: any\n};\n")),(0,r.kt)("h4",{id:"return-value"},"Return Value:"),(0,r.kt)("p",null,"If an object is returned, it is expected to have the following form:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let response: {\n    headers?: {\n        [key: string]: any\n    },\n    status?: number,\n    data: any,\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"headers")," property is an object that specifies the ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers"},"HTTP headers")," that should be set on the response.\nEach property is a header name and the value is the value set on the header."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," property is the numerical ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"},"status code")," that should be set on the response. If omitted, then status code 200 will be used."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," property is the data that should be included in the response body."),(0,r.kt)("h4",{id:"examples"},"Examples:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Return an arbitrary string of data.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"return 'hello from webhook!';\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Return a response with a custom header.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"return {\n    headers: {\n        'Content-Type': 'text/plain',\n        MyCustomHeader: 'custom value'\n    },\n    data: 'hello from webhook!'\n};\n")),(0,r.kt)("h3",{id:"onserveraction"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onServerAction")),(0,r.kt)("p",null,"A shout that is sent whenever an action happens."),(0,r.kt)("h4",{id:"arguments-66"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  action: any\n};\n")),(0,r.kt)("h3",{id:"onserialdata"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onSerialData")),(0,r.kt)("p",null,"A shout that is sent whenever a stream data is received."),(0,r.kt)("h4",{id:"arguments-67"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n  data: any\n};\n")),(0,r.kt)("h3",{id:"onsheettagclick"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onSheetTagClick")),(0,r.kt)("p",null,"A shout that is sent when a tag name is clicked in the sheet portal."),(0,r.kt)("h4",{id:"arguments-68"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n    tag: string;\n};\n")),(0,r.kt)("h3",{id:"onsheetbotclick"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onSheetBotClick")),(0,r.kt)("p",null,"A shout that is sent when a Bot is clicked in the sheet portal."),(0,r.kt)("h4",{id:"arguments-69"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n    bot: Bot;\n};\n")),(0,r.kt)("h3",{id:"onsheetbotidclick"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onSheetBotIDClick")),(0,r.kt)("p",null,"A shout that is sent when a Bot ID is clicked in the sheet portal."),(0,r.kt)("h4",{id:"arguments-70"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n    bot: Bot;\n};\n")),(0,r.kt)("h3",{id:"onremotedata"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onRemoteData")),(0,r.kt)("p",null,"A shout that is sent whenever a message is received from another remote device."),(0,r.kt)("h4",{id:"arguments-71"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n    /**\n     * The name of the message.\n     */\n    name: string,\n\n    /**\n     * The argument that was included in the message.\n     */\n    that: any,\n\n    /**\n     * The ID of the remote device that sent the message.\n     */\n    remoteId: string\n};\n")),(0,r.kt)("h4",{id:"examples-1"},"Examples:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},'Show a toast when a "custom" message is received.')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'if (that.name === "custom") {\n    os.toast("Got message from " + that.remoteId + " with " + that.that);\n}\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Send a message back to the remote that sent the message.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'if (that.name === "hello") {\n    sendRemoteData(that.remoteId, "hi");\n}\n')),(0,r.kt)("h3",{id:"onremotejoined"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onRemoteJoined")),(0,r.kt)("p",null,"A shout that is run on every other remote device when it joins the current server."),(0,r.kt)("p",null,"Since this shout is run on every device, you should be careful about performing duplicate actions.\nWhen in doubt, elect a remote to perform all actions that should only be executed once.\nSee example 2 below."),(0,r.kt)("h4",{id:"arguments-72"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n    /**\n     * The ID of the remote that joined the server.\n     */\n    remoteId: string\n};\n")),(0,r.kt)("h4",{id:"examples-2"},"Examples:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Show a toast when a remote joins.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'os.toast("Remote joined: " + that.remoteId);\n')),(0,r.kt)("h3",{id:"onremoteleave"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onRemoteLeave")),(0,r.kt)("p",null,"A shout that is run on every other remote device when it leaves the current server."),(0,r.kt)("p",null,"Since this shout is run on every device, you should be careful about performing duplicate actions.\nWhen in doubt, elect a remote to perform all actions that should only be executed once.\nSee example 2 below."),(0,r.kt)("h4",{id:"arguments-73"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n    /**\n     * The ID of the remote that left the server.\n     */\n    remoteId: string\n};\n")),(0,r.kt)("h4",{id:"examples-3"},"Examples:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Show a toast when a player leaves.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'os.toast("Remote joined: " + that.remoteId);\n')),(0,r.kt)("h3",{id:"onanybotsadded"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyBotsAdded")),(0,r.kt)("p",null,"A shout that is sent when a list of bots is added to the current server."),(0,r.kt)("p",null,"Unlike ",(0,r.kt)(i.TagLink,{tag:"@onAnyCreate",mdxType:"TagLink"}),", this listen tag is triggered whenever the bots have been added to the current device's server, even if the bots have already been created.\nAn example of this happening is when you first load a server. Even though all the bots have already been created, they still need to be added to the server in order for you to interact with them."),(0,r.kt)("p",null,"Note that this listen tag is triggered after any pending scripts have finished running. This means that if a script creates multiple bots, ",(0,r.kt)("inlineCode",{parentName:"p"},"@onAnyBotsAdded")," will only be triggered once."),(0,r.kt)("h4",{id:"arguments-74"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n    /**\n     * The array of bots that were added to the server.\n     */\n    bots: Bot[];\n};\n")),(0,r.kt)("h3",{id:"onanybotsremoved"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyBotsRemoved")),(0,r.kt)("p",null,"A shout that is sent when a list of bots is removed from the current server."),(0,r.kt)("p",null,"Unlike ",(0,r.kt)(i.TagLink,{tag:"@onDestroy",mdxType:"TagLink"}),", this listen tag is triggered whenever the bots have been removed from the current device's server, even if the bots were not destroyed.\nAn example of this happening is when another player disconnects. Even though their config bots were not destroyed, they still need to be removed from the server."),(0,r.kt)("p",null,"Note that this listen tag is triggered after any pending scripts have finished running. This means that if a script deletes multiple bots, ",(0,r.kt)("inlineCode",{parentName:"p"},"@onAnyBotsRemoved")," will only be triggered once."),(0,r.kt)("h4",{id:"arguments-75"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n    /**\n     * The array of bot IDs that were removed from the server.\n     */\n    botIDs: string[];\n};\n")),(0,r.kt)("h3",{id:"onanybotschanged"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onAnyBotsChanged")),(0,r.kt)("p",null,"A shout that is sent when one or more tags are changed on a list of bots in the current server."),(0,r.kt)("p",null,"This listen tag is triggered whenever the bots have been updated in the current device's server, even if the bots were not updated locally.\nAn example of this happening is when another player changes a tag in the sheet portal. Even though the change was made on their device, it will show up on the current device."),(0,r.kt)("p",null,"Note that this listen tag is triggered after any pending scripts have finished running. This means that if a script updates multiple bots, ",(0,r.kt)("inlineCode",{parentName:"p"},"@onAnyBotsChanged")," will only be triggered once."),(0,r.kt)("h4",{id:"arguments-76"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n    /**\n     * The bot that was updated.\n     */\n    bot: Bot,\n\n    /**\n     * The list of tags that were changed on the bot.\n     */\n    tags: string[]\n}[];\n")),(0,r.kt)("h3",{id:"onerror"},(0,r.kt)("inlineCode",{parentName:"h3"},"@onError")),(0,r.kt)("p",null,'A shout that is sent when an unhandled error occurs in a listen tag.\nErrors can occur for many reasons, but common ones include data being unexpectedly missing (e.g. "Cannot read property xyz of undefined") or invalid usage (e.g. "xyz is not a function").'),(0,r.kt)("p",null,"Note that errors which occur in a ",(0,r.kt)("inlineCode",{parentName:"p"},"@onError")," listen tag will not trigger further ",(0,r.kt)("inlineCode",{parentName:"p"},"onError")," calls.\nTo view those errors, open the developer tools console."),(0,r.kt)("h4",{id:"arguments-77"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let that: {\n    /**\n     * The bot that the error originated from.\n     */\n    bot: Bot,\n\n    /**\n     * The tag that the error originated from.\n     */\n    tag: string,\n\n    /**\n     * The error that occurred.\n     */\n    error: Error\n}\n")))}u.isMDXComponent=!0}}]);