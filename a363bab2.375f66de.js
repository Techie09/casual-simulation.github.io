(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{142:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return b})),a.d(t,"metadata",(function(){return r})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return p}));var n=a(1),o=a(9),i=(a(0),a(157)),l=a(127),b={id:"actions",title:"Actions",sidebar_label:"Actions",description:"Actions affect the data in bots and also do things to the outside world."},r={id:"actions",title:"Actions",description:"Actions affect the data in bots and also do things to the outside world.",source:"@site/docs/actions.mdx",permalink:"/docs/actions",sidebar_label:"Actions",sidebar:"docs",previous:{title:"Listen Tags",permalink:"/docs/listen-tags"}},c=[{value:"Data Actions",id:"data-actions",children:[{value:"<code>create(...mods)</code>",id:"createmods",children:[]},{value:"<code>destroy(bot)</code>",id:"destroybot",children:[]},{value:"<code>applyMod(bot, ...mods)</code>",id:"applymodbot-mods",children:[]},{value:"<code>subtractMods(bot, ...mods)</code>",id:"subtractmodsbot-mods",children:[]},{value:"<code>removeTags(bot, tagSection)</code>",id:"removetagsbot-tagsection",children:[]},{value:"<code>changeState(bot, stateName, groupName?)</code>",id:"changestatebot-statename-groupname",children:[]},{value:"<code>getBots(..filters)</code>",id:"getbotsfilters",children:[]},{value:"<code>getBots(tag, value?)</code>",id:"getbotstag-value",children:[]},{value:"<code>getBot(...filters)</code>",id:"getbotfilters",children:[]},{value:"<code>getBot(tag, filter?)</code>",id:"getbottag-filter",children:[]},{value:"<code>getBotTagValues(tag, filter?)</code>",id:"getbottagvaluestag-filter",children:[]},{value:"<code>getID(bot)</code>",id:"getidbot",children:[]},{value:"<code>getJSON(data)</code>",id:"getjsondata",children:[]},{value:"<code>getMod(bot)</code>",id:"getmodbot",children:[]},{value:"<code>webhook(options)</code>",id:"webhookoptions",children:[]},{value:"<code>webhook.post(url, data?, options?)</code>",id:"webhookposturl-data-options",children:[]}]},{value:"Bot Filters",id:"bot-filters",children:[{value:"<code>byTag(tag, value?)</code>",id:"bytagtag-value",children:[]},{value:"<code>inDimension(dimension)</code>",id:"indimensiondimension",children:[]},{value:"<code>atPosition(dimension, x, y)</code>",id:"atpositiondimension-x-y",children:[]},{value:"<code>inStack(bot, dimension)</code>",id:"instackbot-dimension",children:[]},{value:"<code>byCreator(bot)</code>",id:"bycreatorbot",children:[]},{value:"<code>bySpace(space)</code>",id:"byspacespace",children:[]},{value:"<code>byMod(mod)</code>",id:"bymodmod",children:[]},{value:"<code>neighboring(bot, dimension, direction)</code>",id:"neighboringbot-dimension-direction",children:[]},{value:"<code>either(...filters)</code>",id:"eitherfilters",children:[]},{value:"<code>not(filter)</code>",id:"notfilter",children:[]}]},{value:"Event Actions",id:"event-actions",children:[{value:"<code>shout(name, arg?)</code>",id:"shoutname-arg",children:[]},{value:"<code>whisper(bot, name, arg?)</code>",id:"whisperbot-name-arg",children:[]},{value:"<code>superShout(name, arg?)</code>",id:"supershoutname-arg",children:[]},{value:"<code>remote(action, target?)</code>",id:"remoteaction-target",children:[]},{value:"<code>action.perform(action)</code>",id:"actionperformaction",children:[]},{value:"<code>action.reject(action)</code>",id:"actionrejectaction",children:[]}]},{value:"Player Actions",id:"player-actions",children:[{value:"<code>player.checkout(options)</code>",id:"playercheckoutoptions",children:[]},{value:"<code>player.downloadBots(bots, filename)</code>",id:"playerdownloadbotsbots-filename",children:[]},{value:"<code>player.run(script)</code>",id:"playerrunscript",children:[]},{value:"<code>player.replaceDragBot(botOrMod)</code>",id:"playerreplacedragbotbotormod",children:[]},{value:"<code>player.showChat(placeholder?)</code>",id:"playershowchatplaceholder",children:[]},{value:"<code>player.showChat(options)</code>",id:"playershowchatoptions",children:[]},{value:"<code>player.hideChat()</code>",id:"playerhidechat",children:[]},{value:"<code>player.showHtml(html)</code>",id:"playershowhtmlhtml",children:[]},{value:"<code>player.hideHtml()</code>",id:"playerhidehtml",children:[]},{value:"<code>player.toast(message, duration?)</code>",id:"playertoastmessage-duration",children:[]},{value:"<code>player.tweenTo(bot, zoomValue?, rotX?, rotY?, duration?)</code>",id:"playertweentobot-zoomvalue-rotx-roty-duration",children:[]},{value:"<code>player.moveTo(bot, zoomValue?, rotX?, rotY?)</code>",id:"playermovetobot-zoomvalue-rotx-roty",children:[]},{value:"<code>player.openQRCodeScanner(camera?)</code>",id:"playeropenqrcodescannercamera",children:[]},{value:"<code>player.closeQRCodeScanner(camera?)</code>",id:"playercloseqrcodescannercamera",children:[]},{value:"<code>player.showQRCode(code)</code>",id:"playershowqrcodecode",children:[]},{value:"<code>player.hideQRCode()</code>",id:"playerhideqrcode",children:[]},{value:"<code>player.showJoinCode(universe?, dimension?)</code>",id:"playershowjoincodeuniverse-dimension",children:[]},{value:"<code>player.openBarcodeScanner(camera?)</code>",id:"playeropenbarcodescannercamera",children:[]},{value:"<code>player.closeBarcodeScanner(camera?)</code>",id:"playerclosebarcodescannercamera",children:[]},{value:"<code>player.showBarcode(code, format?)</code>",id:"playershowbarcodecode-format",children:[]},{value:"<code>player.hideBarcode()</code>",id:"playerhidebarcode",children:[]},{value:"<code>player.showInputForTag(bot, tag, options?)</code>",id:"playershowinputfortagbot-tag-options",children:[]},{value:"<code>player.setClipboard(text)</code>",id:"playersetclipboardtext",children:[]},{value:"<code>player.showUploadAuxFile()</code>",id:"playershowuploadauxfile",children:[]},{value:"<code>player.loadUniverse(universe)</code>",id:"playerloaduniverseuniverse",children:[]},{value:"<code>player.unloadUniverse()</code>",id:"playerunloaduniverse",children:[]},{value:"<code>player.downloadUniverse()</code>",id:"playerdownloaduniverse",children:[]},{value:"<code>player.enableAR()</code>",id:"playerenablear",children:[]},{value:"<code>player.disableAR()</code>",id:"playerdisablear",children:[]},{value:"<code>player.enableVR()</code>",id:"playerenablevr",children:[]},{value:"<code>player.disableVR()</code>",id:"playerdisablevr",children:[]},{value:"<code>player.getCurrentUniverse()</code>",id:"playergetcurrentuniverse",children:[]},{value:"<code>player.getCurrentDimension()</code>",id:"playergetcurrentdimension",children:[]},{value:"<code>player.getMenuDimension()</code>",id:"playergetmenudimension",children:[]},{value:"<code>player.getInventoryDimension()</code>",id:"playergetinventorydimension",children:[]},{value:"<code>player.hasBotInInventory(bot)</code>",id:"playerhasbotininventorybot",children:[]},{value:"<code>player.getPortalDimension(portal)</code>",id:"playergetportaldimensionportal",children:[]},{value:"<code>player.getDimensionalDepth(dimension)</code>",id:"playergetdimensionaldepthdimension",children:[]},{value:"<code>player.getBot()</code>",id:"playergetbot",children:[]},{value:"<code>player.goToDimension(dimension)</code>",id:"playergotodimensiondimension",children:[]},{value:"<code>player.goToURL(url)</code>",id:"playergotourlurl",children:[]},{value:"<code>player.openURL(url)</code>",id:"playeropenurlurl",children:[]},{value:"<code>player.openDevConsole()</code>",id:"playeropendevconsole",children:[]},{value:"<code>player.playSound(url)</code>",id:"playerplaysoundurl",children:[]},{value:"<code>player.isInDimension(dimension)</code>",id:"playerisindimensiondimension",children:[]},{value:"<code>player.inSheet()</code>",id:"playerinsheet",children:[]},{value:"<code>player.importAUX(url)</code>",id:"playerimportauxurl",children:[]},{value:"<code>player.version()</code>",id:"playerversion",children:[]},{value:"<code>player.device()</code>",id:"playerdevice",children:[]},{value:"<code>player.requestFullscreenMode()</code>",id:"playerrequestfullscreenmode",children:[]},{value:"<code>player.exitFullscreenMode()</code>",id:"playerexitfullscreenmode",children:[]}]},{value:"Server Actions",id:"server-actions",children:[{value:"<code>server.backupToGithub(auth)</code>",id:"serverbackuptogithubauth",children:[]},{value:"<code>server.backupAsDownload(target)</code>",id:"serverbackupasdownloadtarget",children:[]},{value:"<code>server.finishCheckout(options)</code>",id:"serverfinishcheckoutoptions",children:[]},{value:"<code>server.setupUniverse(universe, botOrMod?)</code>",id:"serversetupuniverseuniverse-botormod",children:[]},{value:"<code>server.browseHistory()</code>",id:"serverbrowsehistory",children:[]},{value:"<code>server.markHistory(options)</code>",id:"servermarkhistoryoptions",children:[]},{value:"<code>server.restoreHistoryMark(mark)</code>",id:"serverrestorehistorymarkmark",children:[]},{value:"<code>server.restoreHistoryMarkToUniverse(mark, universe)</code>",id:"serverrestorehistorymarktouniversemark-universe",children:[]},{value:"<code>server.shell(script)</code>",id:"servershellscript",children:[]},{value:"<code>server.loadFile(path, options?)</code>",id:"serverloadfilepath-options",children:[]},{value:"<code>server.saveFile(path, data, options?)</code>",id:"serversavefilepath-data-options",children:[]}]},{value:"Utility Actions",id:"utility-actions",children:[{value:"<code>setTag(bot, tag, value)</code>",id:"settagbot-tag-value",children:[]},{value:"<code>getTag(bot, tag)</code>",id:"gettagbot-tag",children:[]}]},{value:"Math Actions",id:"math-actions",children:[{value:"<code>math.sum(list)</code>",id:"mathsumlist",children:[]},{value:"<code>math.avg(list)</code>",id:"mathavglist",children:[]},{value:"<code>math.sqrt(value)</code>",id:"mathsqrtvalue",children:[]},{value:"<code>math.abs(number)</code>",id:"mathabsnumber",children:[]},{value:"<code>math.stdDev(list)</code>",id:"mathstddevlist",children:[]},{value:"<code>math.randomInt(min, max)</code>",id:"mathrandomintmin-max",children:[]},{value:"<code>math.random(min, max)</code>",id:"mathrandommin-max",children:[]}]}],s={rightToc:c};function p(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"data-actions"},"Data Actions"),Object(i.b)("h3",{id:"createmods"},Object(i.b)("inlineCode",{parentName:"h3"},"create(...mods)")),Object(i.b)(l.FunctionCode,{name:"create",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Creates a new bot or combination of bots with the given mods. Also triggers ",Object(i.b)(l.TagLink,{tag:"@onCreate",mdxType:"TagLink"})," on all the created bots.\nBy default, bots are created with a unique ",Object(i.b)(l.TagLink,{tag:"id",mdxType:"TagLink"}),", ",Object(i.b)(l.TagLink,{tag:"auxCreator",mdxType:"TagLink"})," set to the current ",Object(i.b)("inlineCode",{parentName:"p"},"bot.id"),", and ",Object(i.b)(l.TagLink,{tag:"space",mdxType:"TagLink"})," set to ",Object(i.b)("inlineCode",{parentName:"p"},"shared"),"."),Object(i.b)("p",null,"If ",Object(i.b)(l.TagLink,{tag:"auxCreator",mdxType:"TagLink"})," references a non-existent bot or a bot with a different ",Object(i.b)(l.TagLink,{tag:"space",mdxType:"TagLink"})," than the created bot, then ",Object(i.b)(l.TagLink,{tag:"auxCreator",mdxType:"TagLink"})," will be set to ",Object(i.b)("inlineCode",{parentName:"p"},"null"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Each parameter")," is a mod that should be applied to the new bot(s).\nIf no parameters are specified, then the new bot will have its ",Object(i.b)(l.TagLink,{tag:"auxCreator",mdxType:"TagLink"})," set to ",Object(i.b)("inlineCode",{parentName:"p"},"bot.id")," and ",Object(i.b)(l.TagLink,{tag:"space",mdxType:"TagLink"})," set to ",Object(i.b)("inlineCode",{parentName:"p"},"shared"),".\nIf an array of mods is used for a parameter, then one bot will be created for ",Object(i.b)("em",{parentName:"p"},"each unique combination of mods"),"."),Object(i.b)("h4",{id:"examples"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Create an empty bot:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"let myNewBot = create();\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Create a red bot:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let myRedBot = create({\n    auxColor: "red"\n});\n')),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},"Create a parent and a child bot:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let myParentBot = create({\n    auxCreator: null,\n    auxLabel: "Parent"\n});\nlet myChildBot = create({\n    auxCreator: getID(myParentBot),\n    auxLabel: "Child"\n});\n')),Object(i.b)("ol",{start:4},Object(i.b)("li",{parentName:"ol"},"Create a empty bot in the ",Object(i.b)("inlineCode",{parentName:"li"},"tempLocal")," space:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let myBot = create({ space: "tempLocal" });\n')),Object(i.b)("ol",{start:5},Object(i.b)("li",{parentName:"ol"},"Create a bot from multiple mods:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// myBot is placed in the "myDimension" dimension and is colored green\nlet myBot = create({ myDimension: true }, {\n    auxColor: "green"\n});\n')),Object(i.b)("ol",{start:6},Object(i.b)("li",{parentName:"ol"},"Create a red bot and a blue bot:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let [myRedBot, myBlueBot] = create({ auxCreator: null}, [\n    {\n        "auxColor": "red"\n    },\n    {\n        "auxColor": "blue"\n    }\n]);\n')),Object(i.b)("h3",{id:"destroybot"},Object(i.b)("inlineCode",{parentName:"h3"},"destroy(bot)")),Object(i.b)(l.FunctionCode,{name:"destroy",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Removes the given bot, list of bots, or bot by ",Object(i.b)(l.TagLink,{tag:"id",mdxType:"TagLink"})," and triggers ",Object(i.b)(l.TagLink,{tag:"@onDestroy",mdxType:"TagLink"})," for each of the destroyed bots."),Object(i.b)("p",null,"Note that only destroyable bots will be destroyed.\nBots that have ",Object(i.b)(l.TagLink,{tag:"auxDestroyable",mdxType:"TagLink"})," set to ",Object(i.b)("inlineCode",{parentName:"p"},"false")," will not be destroyed."),Object(i.b)("p",null,"Also note that all bots that have ",Object(i.b)(l.TagLink,{tag:"auxCreator",mdxType:"TagLink"})," set to the ",Object(i.b)(l.TagLink,{tag:"id",mdxType:"TagLink"})," of a destroyed bot will also be destroyed (unless they are not destroyable).\nThis happens recursively until there are no more bots to destroy."),Object(i.b)("h4",{id:"examples-1"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Destroying a single bot:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// Destroy a single bot that has #name set to "bob"\ndestroy(getBot("#name", "bob"));\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Destroying a list of bots:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// Destroy all the bots that have #auxColor set to "red"\ndestroy(getBots("#auxColor", "red"));\n')),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},"Destroying a bot by its id")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// Destroy the bot with the #id: "config"\ndestroy("config");\n')),Object(i.b)("h3",{id:"applymodbot-mods"},Object(i.b)("inlineCode",{parentName:"h3"},"applyMod(bot, ...mods)")),Object(i.b)(l.FunctionCode,{name:"applyMod",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Applies the given mods to the given bot."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot that the mods should be applied to."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"other parameters")," are the mods that should be applied to the bot. If two mods have the same tag, then the mod that is last in the list will win."),Object(i.b)("h4",{id:"examples-2"},"Examples"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Set the "test" tag and "name" tag on a bot.')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'applyMod(bot, {\n    test: true,\n    name: "bob"\n});\n')),Object(i.b)("h3",{id:"subtractmodsbot-mods"},Object(i.b)("inlineCode",{parentName:"h3"},"subtractMods(bot, ...mods)")),Object(i.b)(l.FunctionCode,{name:"subtractMods",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Removes the tags contained in the given mod(s) from the given bot or mod."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot or mod that the tags should be removed from."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"other parameters")," are the bots or mods that contain the tags which should be removed from the original bot."),Object(i.b)("h4",{id:"examples-3"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Remove a mod from this bot.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const mod = {\n    auxColor: 'red',\n    name: 'bob'\n};\n\nsubtractMods(this, mod);\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Remove multiple mods from this bot.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"subtractMods(this, {\n    auxColor: 'red'\n}, {\n    name: 'bob'\n});\n")),Object(i.b)("h3",{id:"removetagsbot-tagsection"},Object(i.b)("inlineCode",{parentName:"h3"},"removeTags(bot, tagSection)")),Object(i.b)(l.FunctionCode,{name:"removeTags",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Removes all the tags from the given bot that match the given tag section."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot or list of bots that should have the tags removed."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is a string or regex that specifies which tags to remove.\nIf given a string, then all the tags that start with the given string will be removed.\nIf given a regex, then all the tags which match the regex will be removed."),Object(i.b)("h4",{id:"examples-4"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Remove tags started with ",Object(i.b)("inlineCode",{parentName:"li"},"abc")," from the ",Object(i.b)("inlineCode",{parentName:"li"},"this")," bot.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'removeTags(this, "abc");\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Remove tags named ",Object(i.b)("inlineCode",{parentName:"li"},"hello")," using a case-insensitive regex from the ",Object(i.b)("inlineCode",{parentName:"li"},"this")," bot.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"removeTags(this, /^hello$/gi)\n")),Object(i.b)("h3",{id:"changestatebot-statename-groupname"},Object(i.b)("inlineCode",{parentName:"h3"},"changeState(bot, stateName, groupName?)")),Object(i.b)(l.FunctionCode,{name:"changeState",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Changes the state that the given bot occupies in the given group.\nIf the state was changed, then the ",Object(i.b)(l.TagLink,{tag:"@[groupName][stateName]OnExit",mdxType:"TagLink"})," and ",Object(i.b)(l.TagLink,{tag:"@[groupName][stateName]OnEnter",mdxType:"TagLink"})," whispers are sent to the ",Object(i.b)("inlineCode",{parentName:"p"},"bot"),"."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot whose state should be changed."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the value that should be set on the bot."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"third parameter")," is the name of the tag that should be changed on the bot. If not specified, then the ",Object(i.b)("inlineCode",{parentName:"p"},"#state")," tag will be used."),Object(i.b)("h4",{id:"examples-5"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Change the ",Object(i.b)("inlineCode",{parentName:"li"},"#state"),' of the bot to "Running".')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// Triggers @stateRunningOnEnter\nchangeState(bot, "Running");\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Change the ",Object(i.b)("inlineCode",{parentName:"li"},"#playbackState"),' of the bot to "Playing".')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// Triggers @playbackStatePlayingOnEnter\nchangeState(bot, "Playing", "playbackState");\n')),Object(i.b)("h3",{id:"getbotsfilters"},Object(i.b)("inlineCode",{parentName:"h3"},"getBots(..filters)")),Object(i.b)(l.FunctionCode,{name:"getBots",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets an array of bots that match all of the given filter(s). The returned array is sorted alphabetically by the ",Object(i.b)(l.TagLink,{tag:"id",mdxType:"TagLink"})," tag."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Each parameter")," is a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#bot-filters"}),"bot filter"),". If no filters are specified, then all bots in the universe are returned.\nIf multiple filters are specified, then only the bots that match all of the filters are returned."),Object(i.b)("h4",{id:"examples-6"},"Examples"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Find all bots with the "test" tag.')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(byTag("#test"));\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Find all bots with ",Object(i.b)("inlineCode",{parentName:"li"},"#name"),' set to "bob" ',Object(i.b)("em",{parentName:"li"},"and"),' in the "people" dimension.')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(byTag("#name", "bob"), inDimension("people"));\n')),Object(i.b)("h3",{id:"getbotstag-value"},Object(i.b)("inlineCode",{parentName:"h3"},"getBots(tag, value?)")),Object(i.b)(l.FunctionCode,{name:"getBots",overload:1,mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets an array of bots that match the given tag and value. The returned array is sorted alphabetically by the ",Object(i.b)(l.TagLink,{tag:"id",mdxType:"TagLink"})," tag."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the name of the tag. Bots that have this tag will be included as long as they also match the second parameter."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the value the tag should match. If not specified, then all bots with the tag will be included.\nIf specified, then only bots that have the same tag and value will be included. If you specify a function as the value, then it will be used to match tag values."),Object(i.b)(l.Alert,{type:"info",mdxType:"Alert"},"This function behaves exactly like ",Object(i.b)(l.ActionLink,{action:"getBots(...filters)",mdxType:"ActionLink"})," with ",Object(i.b)(l.ActionLink,{action:"byTag(tag, value?)",mdxType:"ActionLink"})),Object(i.b)("h4",{id:"examples-7"},"Examples"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Find all the bots with ",Object(i.b)("inlineCode",{parentName:"li"},"#name"),' set to "bob".')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots("#name", "bob");\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Find all bots with a height larger than 2.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots("#height", height => height > 2);\n')),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},'Find all bots with the "test" tag.')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots("#test");\n')),Object(i.b)("h3",{id:"getbotfilters"},Object(i.b)("inlineCode",{parentName:"h3"},"getBot(...filters)")),Object(i.b)(l.FunctionCode,{name:"getBot",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Get the first bot that matches all of the given filter(s). If multiple bots match the given filter(s), then bots are sorted alphabetically by the ",Object(i.b)(l.TagLink,{tag:"id",mdxType:"TagLink"})," tag and the first one is returned. If no bots match the given filter(s), then ",Object(i.b)("inlineCode",{parentName:"p"},"undefined")," is returned."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Each parameter")," is a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#bot-filters"}),"bot filter"),". If no filters are specified, then the first bot in the universe is returned.\nIf multiple filters are specified, then the first bot that matches all of the filters is returned."),Object(i.b)("h4",{id:"examples-8"},"Examples"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Find a bot with the "test" tag.')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let foundBot = getBot(byTag("#test"));\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Find a bot with ",Object(i.b)("inlineCode",{parentName:"li"},"#name"),' set to "bob" ',Object(i.b)("em",{parentName:"li"},"and"),' in the "people" dimension.')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let foundBot = getBot(byTag("#name", "bob"), inDimension("people"));\n')),Object(i.b)("h3",{id:"getbottag-filter"},Object(i.b)("inlineCode",{parentName:"h3"},"getBot(tag, filter?)")),Object(i.b)(l.FunctionCode,{name:"getBot",overload:1,mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets the first bot that matches the given tag and value. If multiple bots match the given tag and value, then bots are sorted alphabetically by the ",Object(i.b)(l.TagLink,{tag:"id",mdxType:"TagLink"})," tag and the first one is returned. If no bots match the given tag and value, then ",Object(i.b)("inlineCode",{parentName:"p"},"undefined")," is returned."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the name of the tag to search for."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the value the tag should match. If not specified, then the first bot with the tag will be returned.\nIf specified, then the first bot that has the same tag and value will be returned. If you specify a function as the value, then it will be used to match tag values."),Object(i.b)(l.Alert,{type:"info",mdxType:"Alert"},"This function behaves exactly like ",Object(i.b)(l.ActionLink,{action:"getBot(...filters)",mdxType:"ActionLink"})," with ",Object(i.b)(l.ActionLink,{action:"byTag(tag, value?)",mdxType:"ActionLink"})),Object(i.b)("h4",{id:"examples-9"},"Examples"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Find the first bot with ",Object(i.b)("inlineCode",{parentName:"li"},"#name"),' set to "bob".')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let foundBot = getBot("#name", "bob");\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Find the first bot with a height larger than 2.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let foundBot = getBot("#height", height => height > 2);\n')),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},'Find the first bot with the "test" tag.')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let foundBot = getBot("#test");\n')),Object(i.b)("h3",{id:"getbottagvaluestag-filter"},Object(i.b)("inlineCode",{parentName:"h3"},"getBotTagValues(tag, filter?)")),Object(i.b)(l.FunctionCode,{name:"getBotTagValues",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets a list of all the values in the universe for the given tag. Optionally accepts a filter for the tag values."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the name of the tag to search for."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is optional and is the filter that the tag values should match. If not specified, then all the tag values are included.\nIf it is a function, then it will be used to match values. Otherwise, only tags that match the value will be included."),Object(i.b)("h4",{id:"examples-10"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Find the number of bots named bot and print it.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'const numberOfBobs = getBotTagValues("#name", "bob").length;\nplayer.toast(numberOfBobs);\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Find all the bot ages above ",Object(i.b)("inlineCode",{parentName:"li"},"10"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'const agesOver10 = getBotTagValues("#age", age => age > 10);\n')),Object(i.b)("h3",{id:"getidbot"},Object(i.b)("inlineCode",{parentName:"h3"},"getID(bot)")),Object(i.b)(l.FunctionCode,{name:"getID",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets the ID of the given bot."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot whose ID should be retrieved.\nIf given a bot ID, then it will be returned. If given ",Object(i.b)("inlineCode",{parentName:"p"},"null")," or something that is not a bot, then ",Object(i.b)("inlineCode",{parentName:"p"},"null")," will be returned."),Object(i.b)("h4",{id:"examples-11"},"Examples"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Get the ID of the current bot.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"let id = getID(bot);\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Get the ID of a bot with ",Object(i.b)("inlineCode",{parentName:"li"},"#name"),' set to "bob".')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let id = getID(getBot("#name", "bob"));\n')),Object(i.b)("h3",{id:"getjsondata"},Object(i.b)("inlineCode",{parentName:"h3"},"getJSON(data)")),Object(i.b)(l.FunctionCode,{name:"getJSON",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/JSON"}),"JSON")," representation of the given data."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the data that should be ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Serialization"}),"cloned")," into the JSON format.\nIf given a bot, then the returned JSON will be able to be able to be converted back into a mod via ",Object(i.b)(l.ActionLink,{action:"getMod(bot)",mdxType:"ActionLink"}),"."),Object(i.b)("h4",{id:"examples-12"},"Examples"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Store a copy of a bot in a tag.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bob = getBot("#name", "bob");\ntags.savedBot = getJSON(bob);\n')),Object(i.b)("h3",{id:"getmodbot"},Object(i.b)("inlineCode",{parentName:"h3"},"getMod(bot)")),Object(i.b)(l.FunctionCode,{name:"getMod",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets a mod for the given bot and list of tags. The returned mod will only contain tags that are contained in the given list."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot or JSON string that should be cloned into a mod."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"other parameters")," are the tags that should be included in the returned mod.\nIf no other parameters are specified, then all tags are included.\nIf a parameter is a RegEx (",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"}),"Regular Expression"),"), then it will include all the tags that match the expression."),Object(i.b)("h4",{id:"examples-13"},"Examples"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Get a mod with the current bot's tags.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"let mod = getMod(bot);\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Get a mod with only the ",Object(i.b)(l.TagLink,{tag:"auxColor",mdxType:"TagLink"})," and ",Object(i.b)(l.TagLink,{tag:"auxLabel",mdxType:"TagLink"})," tags.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let mod = getMod(bot, "auxColor", "auxLabel");\n')),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},'Get a mod with every tag that starts with "on".')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"let mod = getMod(bot, /^on/g);\n")),Object(i.b)("h3",{id:"webhookoptions"},Object(i.b)("inlineCode",{parentName:"h3"},"webhook(options)")),Object(i.b)("p",null,"Sends a webhook using the given options."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is an object with the following properties:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"let options: {\n    /**\n     * The HTTP Method that the request should use.\n     */\n    method: string;\n\n    /**\n     * The URL that the request should be made to.\n     */\n    url: string;\n\n    /**\n     * The headers to include in the request.\n     */\n    headers?: {\n        [key: string]: string;\n    };\n\n    /**\n     * The data to send with the request.\n     */\n    data?: any;\n\n    /**\n     * The shout that should be made when the request finishes.\n     */\n    responseShout?: string;\n};\n")),Object(i.b)("h4",{id:"examples-14"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Send a HTTP GET request to ",Object(i.b)("inlineCode",{parentName:"li"},"https://example.com"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"webhook({\n    method: 'GET',\n    url: 'https://example.com',\n    responseShout: 'onResponse'\n});\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Send a HTTP PUT request to ",Object(i.b)("inlineCode",{parentName:"li"},"https://example.com")," with some data.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"webhook({\n    method: 'PUT',\n    url: 'https://example.com',\n    data: {\n        some: 'data'\n    }\n});\n")),Object(i.b)("h3",{id:"webhookposturl-data-options"},Object(i.b)("inlineCode",{parentName:"h3"},"webhook.post(url, data?, options?)")),Object(i.b)("p",null,"Sends a HTTP POST request using the given options."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the URL that the request should be sent to."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the data that should be included in the request."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"third parameter")," is an optional object with the following properties:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"let options: {\n    /**\n     * The headers to include in the request.\n     */\n    headers?: {\n        [key: string]: string;\n    };\n\n    /**\n     * The shout that should be made when the request finishes.\n     */\n    responseShout?: string;\n};\n")),Object(i.b)("h4",{id:"examples-15"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Send a HTTP POST request to ",Object(i.b)("inlineCode",{parentName:"li"},"https://example.com"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"webhook.post('https://example.com', {\n    some: 'data'\n}, {\n    responseShout: 'onResponse'\n});\n")),Object(i.b)("h2",{id:"bot-filters"},"Bot Filters"),Object(i.b)("h3",{id:"bytagtag-value"},Object(i.b)("inlineCode",{parentName:"h3"},"byTag(tag, value?)")),Object(i.b)(l.FunctionCode,{name:"byTag",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Creates a bot filter that includes bots that have the given tag that matches the given value."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the name of the tag. Bots that have this tag will be included as long as they also match the second parameter."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the value that the tag should match. If not specified, then all bots with the tag will be included.\nIf specified, then only bots that have the same tag value will be included. If you specify a function as the value, then it will be used to match tag values."),Object(i.b)("h4",{id:"examples-16"},"Examples"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Find all the bots with ",Object(i.b)("inlineCode",{parentName:"li"},"#name"),' set to "bob".')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(byTag("#name", "bob"));\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Find all bots with a height larger than 2.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(byTag("#height", height => height > 2));\n')),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},'Find all bots with the "test" tag.')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(byTag("#test"));\n')),Object(i.b)("h3",{id:"indimensiondimension"},Object(i.b)("inlineCode",{parentName:"h3"},"inDimension(dimension)")),Object(i.b)(l.FunctionCode,{name:"inDimension",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Creates a bot filter that includes bots that are in the given dimension. That is, they have the given tag set to ",Object(i.b)("inlineCode",{parentName:"p"},"true"),"."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the name of the dimension."),Object(i.b)(l.Alert,{type:"info",mdxType:"Alert"},"This function behaves exactly like ",Object(i.b)(l.ActionLink,{action:"byTag(tag, value?)",mdxType:"ActionLink"})," with the `value` parameter set to `true`."),Object(i.b)("h4",{id:"examples-17"},"Examples"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Find all the bots in the "test" dimension.')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(inDimension("test"));\n')),Object(i.b)("h3",{id:"atpositiondimension-x-y"},Object(i.b)("inlineCode",{parentName:"h3"},"atPosition(dimension, x, y)")),Object(i.b)("p",null,"Creates a bot filter that includes bots that are in the given dimension and at the given X and Y position."),Object(i.b)("p",null,"When this filter is used with ",Object(i.b)(l.ActionLink,{action:"getBots(...filters)",mdxType:"ActionLink"}),", the returned bots are sorted in the same order that they are stacked.\nThis means that the first bot in the array is at the bottom of the stack and the last bot is at the top of the stack (assuming they're stackable)."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the name of the dimension."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the X position. That is, the left-right position of the bots in the dimension."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"third parameter")," is the Y position. That is, the forward-backward position of the bots in the dimension."),Object(i.b)("h4",{id:"examples-18"},"Examples"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Find all the bots at (1, 2) in the "test" dimension.')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(atPosition("test", 1, 2));\n')),Object(i.b)("h3",{id:"instackbot-dimension"},Object(i.b)("inlineCode",{parentName:"h3"},"inStack(bot, dimension)")),Object(i.b)("p",null,"Creates a bot filter that includes bots in the same stack as the given bot. The given bot will always be included by this filter as long the given bot is in the given dimension."),Object(i.b)("p",null,"When this filter is used with ",Object(i.b)(l.ActionLink,{action:"getBots(...filters)",mdxType:"ActionLink"}),", the returned bots are sorted in the same order that they are stacked.\nThis means that the first bot in the array is at the bottom of the stack and the last bot is at the top of the stack (assuming they're stackable)."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot that other bots should be in the same stack with."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the name of the dimension."),Object(i.b)("h4",{id:"examples-19"},"Examples"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Find all bots in the same stack as ",Object(i.b)("inlineCode",{parentName:"li"},"this"),' in the "test" dimension.')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(inStack(this, "test"));\n')),Object(i.b)("h3",{id:"bycreatorbot"},Object(i.b)("inlineCode",{parentName:"h3"},"byCreator(bot)")),Object(i.b)(l.FunctionCode,{name:"byCreator",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Creates a bot filter that includes bots created by the given bot. That is, they have ",Object(i.b)(l.TagLink,{tag:"auxCreator",mdxType:"TagLink"})," set to the ",Object(i.b)(l.TagLink,{tag:"id",mdxType:"TagLink"})," of the given bot."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot that created the other bots."),Object(i.b)(l.Alert,{type:"info",mdxType:"Alert"},"This function behaves exactly like ",Object(i.b)(l.NormalCode,{mdxType:"NormalCode"},'byTag("auxCreator", getID(bot))'),"."),Object(i.b)("h4",{id:"examples-20"},"Examples"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Find all the bots created by this bot.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"let bots = getBots(byCreator(this));\n")),Object(i.b)("h3",{id:"byspacespace"},Object(i.b)("inlineCode",{parentName:"h3"},"bySpace(space)")),Object(i.b)(l.FunctionCode,{name:"bySpace",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Creates a bot filter that includes bots in the given space. That is, they have ",Object(i.b)(l.TagLink,{tag:"space",mdxType:"TagLink"})," set to the given value."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the space that the bots are in."),Object(i.b)(l.Alert,{type:"info",mdxType:"Alert"},"This function behaves exactly like ",Object(i.b)(l.NormalCode,{mdxType:"NormalCode"},'byTag("space", space)'),"."),Object(i.b)("h4",{id:"examples-21"},"Examples"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Find all bots in the ",Object(i.b)("inlineCode",{parentName:"li"},"tempLocal")," space.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(bySpace("tempLocal"));\n')),Object(i.b)("h3",{id:"bymodmod"},Object(i.b)("inlineCode",{parentName:"h3"},"byMod(mod)")),Object(i.b)(l.FunctionCode,{name:"byMod",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Creates a bot filter that includes bots that match the given mod."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot or mod that the other bots should match."),Object(i.b)("h4",{id:"examples-22"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Find all the bots with ",Object(i.b)("inlineCode",{parentName:"li"},"#height")," set to ",Object(i.b)("inlineCode",{parentName:"li"},"1")," and ",Object(i.b)("inlineCode",{parentName:"li"},"#auxColor")," set to ",Object(i.b)("inlineCode",{parentName:"li"},"red"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'const bots = getBots(byMod({\n    height: 1,\n    auxColor: "red"\n}));\n')),Object(i.b)("h3",{id:"neighboringbot-dimension-direction"},Object(i.b)("inlineCode",{parentName:"h3"},"neighboring(bot, dimension, direction)")),Object(i.b)(l.FunctionCode,{name:"neighboring",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Creates a bot filter that includes bots which are neighboring the given bot.\nOptionally takes a direction that the neighboring bots must be in."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot that the other bots need to be neighboring."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the dimension that the other bots need to be in."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"third parameter")," is the neighboring direction to check."),Object(i.b)("h4",{id:"examples-23"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Find all bots in front of ",Object(i.b)("inlineCode",{parentName:"li"},"this")," bot in the ",Object(i.b)("inlineCode",{parentName:"li"},"test")," dimension.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'const bots = getBots(neighboring(this, "test", "front"));\n')),Object(i.b)("h3",{id:"eitherfilters"},Object(i.b)("inlineCode",{parentName:"h3"},"either(...filters)")),Object(i.b)("p",null,"Creates a bot filter that includes bots which match any (i.e. one or more) of the given filters."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Each parameter")," is a bot filter."),Object(i.b)("h4",{id:"examples-24"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Find all bots with the ",Object(i.b)("inlineCode",{parentName:"li"},"#name")," ",Object(i.b)("inlineCode",{parentName:"li"},"bob")," or a ",Object(i.b)("inlineCode",{parentName:"li"},"#height")," of 2.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'const bots = getBots(\n    either(\n        byTag("#name", "bob"),\n        byTag("height", 2)\n    )\n);\n')),Object(i.b)("h3",{id:"notfilter"},Object(i.b)("inlineCode",{parentName:"h3"},"not(filter)")),Object(i.b)("p",null,"Creates a function that includes bots which ",Object(i.b)("em",{parentName:"p"},"do not")," match the given filter."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot filter whose results should be negated."),Object(i.b)("h4",{id:"examples-25"},"Examples."),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Find all bots that are not in the ",Object(i.b)("inlineCode",{parentName:"li"},"test")," dimension.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'const bots = getBots(not(inDimension("test")));\n')),Object(i.b)("h2",{id:"event-actions"},"Event Actions"),Object(i.b)("h3",{id:"shoutname-arg"},Object(i.b)("inlineCode",{parentName:"h3"},"shout(name, arg?)")),Object(i.b)(l.FunctionCode,{name:"shout",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Sends a shout to all bots that are ",Object(i.b)(l.TagLink,{tag:"auxListening",mdxType:"TagLink"})," and have a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"docs/listen-tags"}),"listen tag")," for the specified name. Optionally includes a custom ",Object(i.b)("inlineCode",{parentName:"p"},"that")," argument.\nAlso triggers ",Object(i.b)(l.TagLink,{tag:"@onListen",mdxType:"TagLink"})," and ",Object(i.b)(l.TagLink,{tag:"@onAnyListen",mdxType:"TagLink"}),"."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the name of the shout. e.g. Using ",Object(i.b)("inlineCode",{parentName:"p"},"onClick")," for the name will trigger all ",Object(i.b)(l.TagLink,{tag:"@onClick",mdxType:"TagLink"})," listeners."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the ",Object(i.b)("inlineCode",{parentName:"p"},"that")," argument to send with the shout. You do not need to specify this parameter if you do not want to."),Object(i.b)("h4",{id:"examples-26"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Send a ",Object(i.b)("inlineCode",{parentName:"li"},"@reset")," event to all bots:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'shout("reset");\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Send a ",Object(i.b)("inlineCode",{parentName:"li"},"@hello")," event with your name:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'shout("hello", "Bob");\n')),Object(i.b)("h3",{id:"whisperbot-name-arg"},Object(i.b)("inlineCode",{parentName:"h3"},"whisper(bot, name, arg?)")),Object(i.b)(l.FunctionCode,{name:"whisper",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Sends a whisper to the specified bot(s) that are ",Object(i.b)(l.TagLink,{tag:"auxListening",mdxType:"TagLink"})," and have a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"docs/listen-tags"}),"listen tag")," for the given name. Optionally includes a custom ",Object(i.b)("inlineCode",{parentName:"p"},"that")," argument.\nAlso triggers ",Object(i.b)(l.TagLink,{tag:"@onListen",mdxType:"TagLink"})," and ",Object(i.b)(l.TagLink,{tag:"@onAnyListen",mdxType:"TagLink"}),"."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot, array of bots, bot ",Object(i.b)(l.TagLink,{tag:"id",mdxType:"TagLink"}),", or array of bot ",Object(i.b)(l.TagLink,{tag:"id",mdxType:"TagLink"})," that the whisper should be sent to."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the name of the whisper. e.g. Using ",Object(i.b)("inlineCode",{parentName:"p"},"onClick")," for the name will trigger the ",Object(i.b)(l.TagLink,{tag:"@onClick",mdxType:"TagLink"})," listener for the specified bots."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"third parameter")," is the ",Object(i.b)("inlineCode",{parentName:"p"},"that")," argument to send with the shout. You do not need to specify this parameter if you do not want to."),Object(i.b)("h4",{id:"examples-27"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Send a ",Object(i.b)("inlineCode",{parentName:"li"},"@reset")," event to all bots named ",Object(i.b)("inlineCode",{parentName:"li"},"Bob"),":")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots("#name", "Bob");\nwhisper(bots, "reset");\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Send a ",Object(i.b)("inlineCode",{parentName:"li"},"@setColor")," event to ourself:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'whisper(this, "setColor", "red");\n')),Object(i.b)("h3",{id:"supershoutname-arg"},Object(i.b)("inlineCode",{parentName:"h3"},"superShout(name, arg?)")),Object(i.b)(l.FunctionCode,{name:"superShout",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Sends a shout to all of the other universes that are loaded."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the name of the shout. e.g. Using ",Object(i.b)("inlineCode",{parentName:"p"},"onClick")," for the name will trigger all the ",Object(i.b)(l.TagLink,{tag:"@onClick",mdxType:"TagLink"})," listeners."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the optional ",Object(i.b)("inlineCode",{parentName:"p"},"that")," argument to include with the shout."),Object(i.b)("h4",{id:"examples-28"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Send a ",Object(i.b)("inlineCode",{parentName:"li"},"hello")," super shout to all the loaded universes.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'superShout("hello");\n')),Object(i.b)("h3",{id:"remoteaction-target"},Object(i.b)("inlineCode",{parentName:"h3"},"remote(action, target?)")),Object(i.b)(l.FunctionCode,{name:"remote",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Sends the given action to another player."),Object(i.b)("p",null,"In CasualOS, all actions are messages which are placed in a queue and processed one at at time."),Object(i.b)("p",null,"For example, the ",Object(i.b)(l.ActionLink,{action:"player.toast(message, duration?)",mdxType:"ActionLink"})," action queues a message which, when processed, will show a toast message.\nHowever, before any action is performed, it is run through the ",Object(i.b)(l.TagLink,{tag:"@onUniverseAction",mdxType:"TagLink"})," listener which can decide whether reject an action using ",Object(i.b)(l.ActionLink,{action:"action.reject(action)",mdxType:"ActionLink"}),".\nThis lets you write rules for what actions each player is allowed to take."),Object(i.b)("p",null,"There are a couple special cases. First, when you send/receive an action from someone else (i.e. they sent an action to you using the ",Object(i.b)(l.ActionLink,{action:"remote(action)",mdxType:"ActionLink"})," function), it won't run by default.\nInstead it is wrapped as a ",Object(i.b)("inlineCode",{parentName:"p"},"device")," action and sent to ",Object(i.b)(l.TagLink,{tag:"@onUniverseAction",mdxType:"TagLink"})," for processing. This lets you decide whether to allow players to send messages to each other and what the effect of those messages are.\nIf you want to perform the action, you can use ",Object(i.b)(l.ActionLink,{action:"action.perform(action)",mdxType:"ActionLink"})," on the inner device action to queue it for execution."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the action to send."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is optional and is a object specifing which player to send the action to. If not specified, then the action is sent to the server player.\nIf specified, then the action is sent to all players that match the given values."),Object(i.b)("h4",{id:"examples-29"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Send a toast message to another player.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"// TODO: Get the bot ID of the other player.\nconst otherPlayerBotId = 'otherPlayerBotId';\n\n// Create a toast action\nconst toastAction = player.toast('My message!');\n\n// Send the action to the other player\n// The toastAction will not be performed locally because\n// it is being sent to another player.\nremote(toastAction, {\n    session: otherPlayerBotId\n});\n")),Object(i.b)("h3",{id:"actionperformaction"},Object(i.b)("inlineCode",{parentName:"h3"},"action.perform(action)")),Object(i.b)(l.FunctionCode,{name:"perform",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Queues the given action to be performed at a later time."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the action that should be performed."),Object(i.b)("h4",{id:"examples-30"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Perform a toast message by manually queuing it.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"action.perform({\n    type: 'show_toast',\n    message: 'My toast message!',\n    duration: 2000 // 2 seconds in miliseconds\n});\n")),Object(i.b)("h3",{id:"actionrejectaction"},Object(i.b)("inlineCode",{parentName:"h3"},"action.reject(action)")),Object(i.b)(l.FunctionCode,{name:"reject",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Prevents a previous action from being performed."),Object(i.b)("p",null,"This is especially useful when used in a ",Object(i.b)(l.TagLink,{tag:"@onUniverseAction",mdxType:"TagLink"})," listener since it lets you reject actions before they are performed."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the action that should be prevented/rejected."),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Prevent a toast message from being performed.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'const toastAction = player.toast("my message");\naction.reject(toastAction);\n')),Object(i.b)("h2",{id:"player-actions"},"Player Actions"),Object(i.b)("h3",{id:"playercheckoutoptions"},Object(i.b)("inlineCode",{parentName:"h3"},"player.checkout(options)")),Object(i.b)(l.FunctionCode,{name:"checkout",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Shows a payment screen modal that lets the player purchase something.\nTriggers the ",Object(i.b)(l.TagLink,{tag:"@onCheckout",mdxType:"TagLink"})," shout on the server inside the given processing universe."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the options to use to setup the checkout screen."),Object(i.b)(l.Alert,{type:"warning",mdxType:"Alert"},"Note that while this is functional, it is not recommended be used due to potential security issues."),Object(i.b)("h4",{id:"examples-31"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Show a checkout box for 10 cookies.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.checkout({\n    publishableKey: 'YOUR_PUBLISHABLE_API_KEY',\n    productId: '10_cookies',\n    title: '10 Cookies',\n    description: '$5.00',\n    processingUniverse: 'cookies_checkout'\n});\n")),Object(i.b)("h3",{id:"playerdownloadbotsbots-filename"},Object(i.b)("inlineCode",{parentName:"h3"},"player.downloadBots(bots, filename)")),Object(i.b)(l.FunctionCode,{name:"downloadBots",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Downloads the given array of bots as a ",Object(i.b)("inlineCode",{parentName:"p"},".aux")," file with the given filename.\nUseful for quickly backing up a set of bots."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the array of bots that should be downloaded."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the name of the file that the bots should be stored in.\n",Object(i.b)("inlineCode",{parentName:"p"},".aux")," will automatically be added to the end of the filename."),Object(i.b)("h4",{id:"examples-32"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Download all the bots in the "abc" dimension as "abcBots.aux".')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.downloadBots(getBots(inDimension("abc")), "abcBots");\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},'Download the current bot as "currentBot.aux".')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.downloadBots([bot], "currentBot");\n')),Object(i.b)("h3",{id:"playerrunscript"},Object(i.b)("inlineCode",{parentName:"h3"},"player.run(script)")),Object(i.b)(l.FunctionCode,{name:"run",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Runs the given script.\nThe script will be executed in a separate environment with no ",Object(i.b)("inlineCode",{parentName:"p"},"bot"),", ",Object(i.b)("inlineCode",{parentName:"p"},"tags"),", ",Object(i.b)("inlineCode",{parentName:"p"},"this"),", ",Object(i.b)("inlineCode",{parentName:"p"},"data"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"that")," variables.\nThis means that you need to use the ",Object(i.b)(l.ActionLink,{action:"getBot(...filters)",mdxType:"ActionLink"})," or ",Object(i.b)(l.ActionLink,{action:"getBots(...filters)",mdxType:"ActionLink"})," functions to read bot data."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the script that should be executed."),Object(i.b)("h4",{id:"examples-33"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Run a script that says "hello".')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.run(\"player.toast('hello');\");\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Run a script from the ",Object(i.b)("inlineCode",{parentName:"li"},"#script")," tag on the current bot.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.run(tags.script);\n")),Object(i.b)("h3",{id:"playerreplacedragbotbotormod"},Object(i.b)("inlineCode",{parentName:"h3"},"player.replaceDragBot(botOrMod)")),Object(i.b)(l.FunctionCode,{name:"replaceDragBot",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Replaces the bot that the user is dragging with the given bot or mod.\nOnly works if called from inside a ",Object(i.b)(l.TagLink,{tag:"@onDrag",mdxType:"TagLink"})," or ",Object(i.b)(l.TagLink,{tag:"@onAnyBotDrag",mdxType:"TagLink"})," listen tag."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot or mod that should be dragged.\nIf given a bot, then that bot's ",Object(i.b)(l.TagLink,{tag:"@onDrag",mdxType:"TagLink"})," will be skippped but ",Object(i.b)(l.TagLink,{tag:"@onDrop",mdxType:"TagLink"})," will be called."),Object(i.b)("h4",{id:"examples-34"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Drag a clone of this bot.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"let clone = create(this);\nplayer.replaceDragBot(clone);\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Drag a mod that makes other bots red.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.replaceDragBot({\n    "auxColor": "red"\n});\n')),Object(i.b)("h3",{id:"playershowchatplaceholder"},Object(i.b)("inlineCode",{parentName:"h3"},"player.showChat(placeholder?)")),Object(i.b)(l.FunctionCode,{name:"showChat",mdxType:"FunctionCode"}),Object(i.b)("p",null,'Shows the "chat bar" at the top of the screen in auxPlayer, optionally using the given text as the placeholder.\nTyping in the chat bar will send ',Object(i.b)(l.TagLink,{tag:"@onChatTyping",mdxType:"TagLink"})," shouts and pressing Enter will send a ",Object(i.b)(l.TagLink,{tag:"@onChat",mdxType:"TagLink"})," shout and clear the chat bar."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the text that the chat bar should show as the placeholder."),Object(i.b)("h4",{id:"examples-35"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Show the chat bar.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.showChat();\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Show the chat bar with some placeholder text.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.showChat("hello");\n')),Object(i.b)("h3",{id:"playershowchatoptions"},Object(i.b)("inlineCode",{parentName:"h3"},"player.showChat(options)")),Object(i.b)(l.FunctionCode,{name:"showChat",overload:2,mdxType:"FunctionCode"}),Object(i.b)("p",null,'Shows the "chat bar" at the top of the screen in auxPlayer, using the given options.\nTyping in the chat bar will send ',Object(i.b)(l.TagLink,{tag:"@onChatTyping",mdxType:"TagLink"})," shouts and pressing Enter will send a ",Object(i.b)(l.TagLink,{tag:"@onChat",mdxType:"TagLink"})," shout and clear the chat bar."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is an object with the options that the chat bar should use.\nIt should be an object with the following properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"placeholder")," - The text that should be shown as a placeholder. (optional)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"prefill")," - The text that should be filled into the chat bar. If the chat bar already has text in it, then setting this property does nothing.")),Object(i.b)("h4",{id:"examples-36"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Show the chat bar with a placeholder.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.showChat({\n    placeholder: "hello"\n});\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Show the chat bar with some prefilled text.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.showChat({\n    prefill: "this is prefilled"\n});\n')),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},"Show the chat bar with some prefilled text and a placeholder.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.showChat({\n    prefill: "this is prefilled",\n    placeholder: "hello"\n});\n')),Object(i.b)("h3",{id:"playerhidechat"},Object(i.b)("inlineCode",{parentName:"h3"},"player.hideChat()")),Object(i.b)(l.FunctionCode,{name:"hideChat",mdxType:"FunctionCode"}),Object(i.b)("p",null,'Hides the "chat bar" at the top of the screen in auxPlayer.'),Object(i.b)("h4",{id:"examples-37"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Hide the chat bar.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.hideChat();\n")),Object(i.b)("h3",{id:"playershowhtmlhtml"},Object(i.b)("inlineCode",{parentName:"h3"},"player.showHtml(html)")),Object(i.b)(l.FunctionCode,{name:"showHtml",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Shows some HTML to the player in a popup modal. This can be useful for loading a separate webpage or providing some formatted text."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the HTML that should be shown to the user."),Object(i.b)("h4",{id:"examples-38"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Show a header with some text.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.showHtml(`\n  <h1>This is some text!</h1>\n`);\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Show a YouTube video.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.showHtml(`\n  <iframe\n      width="560" \n      height="315"\n      src="https://www.youtube.com/embed/BHACKCNDMW8"\n      frameborder="0"\n      allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"\n      allowfullscreen>\n  </iframe>\n`);\n')),Object(i.b)("h3",{id:"playerhidehtml"},Object(i.b)("inlineCode",{parentName:"h3"},"player.hideHtml()")),Object(i.b)(l.FunctionCode,{name:"hideHtml",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Closes the HTML popup modal."),Object(i.b)("h4",{id:"examples-39"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Hide the HTML popup.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.hideHtml();\n")),Object(i.b)("h3",{id:"playertoastmessage-duration"},Object(i.b)("inlineCode",{parentName:"h3"},"player.toast(message, duration?)")),Object(i.b)(l.FunctionCode,{name:"toast",mdxType:"FunctionCode"}),Object(i.b)("p",null,'Shows a temporary "toast" notification to the player at the bottom of the screen with the given message.\nOptionally accepts a duration parameter which is the number of seconds that the message should be on the screen.'),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the text that the toast message should show."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is optional and is the number of seconds that the message should be on the screen. (Default is 2)"),Object(i.b)("h4",{id:"examples-40"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Show a "Hello!" toast message.')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.toast("Hello!");\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Show the player a code for 5 seconds.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.toast("this is the code", 5);\n')),Object(i.b)("h3",{id:"playertweentobot-zoomvalue-rotx-roty-duration"},Object(i.b)("inlineCode",{parentName:"h3"},"player.tweenTo(bot, zoomValue?, rotX?, rotY?, duration?)")),Object(i.b)(l.FunctionCode,{name:"tweenTo",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Smoothly moves the player's view to center on the given bot. Optionally accepts target values for the zoom, rotation X, and rotation Y.\nAdditionally, a duration can be specified for the length of the tween. If the target bot is in the page portal, then the page portal view will be moved.\nIf the bot is in the inventory portal, then the inventory portal view will be moved. If the target bot is not in either portal, then nothing happens."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot or bot ID that the player's view should be moved to."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is optional and is the zoom value that the camera should be transitioned to. Possible values are between ",Object(i.b)("inlineCode",{parentName:"p"},"0")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Infinity"),". ",Object(i.b)("inlineCode",{parentName:"p"},"1")," is the default.\nIf no value is specified, then the zoom will remain at its current value."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"third parameter")," is optional and is the X rotation value that the camera should be transitioned to."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"fourth parameter")," is optional and is the Y rotation value that the camera should be transitioned to."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"fifth parameter")," is optional and is the amount of time in seconds that the transition should take to finish."),Object(i.b)("h4",{id:"examples-41"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Transition the player's view to show a bot named bob.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.tweenTo(getBot("#name", "bob"))\n')),Object(i.b)("h3",{id:"playermovetobot-zoomvalue-rotx-roty"},Object(i.b)("inlineCode",{parentName:"h3"},"player.moveTo(bot, zoomValue?, rotX?, rotY?)")),Object(i.b)(l.FunctionCode,{name:"moveTo",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Instantly moves the player's view to center on the given bot. Optionally accepts target values for the zoom, rotation X, and rotation Y.\nIf the target bot is in the page portal, then the page portal view will be moved. If the bot is in the inventory portal, then the inventory portal view will be moved.\nIf the target bot is not in either portal, then nothing happens."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot or bot ID that the player's view should be moved to."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is optional and is the zoom value that the camera should be transitioned to. Possible values are between ",Object(i.b)("inlineCode",{parentName:"p"},"0")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Infinity"),". ",Object(i.b)("inlineCode",{parentName:"p"},"1")," is the default.\nIf no value is specified, then the zoom will remain at its current value."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"third parameter")," is optional and is the X rotation value that the camera should be transitioned to.\nIf no value is specified, then the X rotation will remain at its current value."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"fourth parameter")," is optional and is the Y rotation value that the camera should be transitioned to.\nIf no value is specified, then the Y rotation will remain at its current value."),Object(i.b)("h4",{id:"examples-42"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Move the player's view to show a bot named bob.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.moveTo(getBot("#name", "bob"))\n')),Object(i.b)("h3",{id:"playeropenqrcodescannercamera"},Object(i.b)("inlineCode",{parentName:"h3"},"player.openQRCodeScanner(camera?)")),Object(i.b)(l.FunctionCode,{name:"openQRCodeScanner",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Opens the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/QR_code"}),"QR Code")," scanner. While open, each scanned QR Code will send a ",Object(i.b)(l.TagLink,{tag:"@onQRCodeScanned",mdxType:"TagLink"})," shout.\nOptionally accepts which camera to use for scanning. (front/back)"),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is optional and is a string specifing which camera to use. Defaults to 'rear'.\nIf the given camera type is not available, then the default camera will be used.\nPossible values are:"),Object(i.b)(l.PossibleValuesTable,{mdxType:"PossibleValuesTable"},Object(i.b)(l.PossibleValueCode,{value:"rear",mdxType:"PossibleValueCode"},"The rear-facing camera. (Default)"),Object(i.b)(l.PossibleValueCode,{value:"front",mdxType:"PossibleValueCode"},"The front-facing camera.")),Object(i.b)("h4",{id:"examples-43"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Open the QR Code scanner.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.openQRCodeScanner();\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Open the QR Code scanner for the front-facing camera.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.openQRCodeScanner("front");\n')),Object(i.b)("h3",{id:"playercloseqrcodescannercamera"},Object(i.b)("inlineCode",{parentName:"h3"},"player.closeQRCodeScanner(camera?)")),Object(i.b)(l.FunctionCode,{name:"closeQRCodeScanner",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Closes the QR Code scanner."),Object(i.b)("h4",{id:"examples-44"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Close the QR Code scanner.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.closeQRCodeScanner();\n")),Object(i.b)("h3",{id:"playershowqrcodecode"},Object(i.b)("inlineCode",{parentName:"h3"},"player.showQRCode(code)")),Object(i.b)(l.FunctionCode,{name:"showQRCode",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Shows a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/QR_code"}),"QR Code")," for the given data."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the text or data that the generated QR Code should represent."),Object(i.b)("h4",{id:"examples-45"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Show a QR Code that contains the data "hello".')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.showQRCode("hello");\n')),Object(i.b)("h3",{id:"playerhideqrcode"},Object(i.b)("inlineCode",{parentName:"h3"},"player.hideQRCode()")),Object(i.b)(l.FunctionCode,{name:"hideQRCode",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Closes the QR Code popup modal."),Object(i.b)("h4",{id:"examples-46"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Hides the QR Code popup modal.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.hideQRCode();\n")),Object(i.b)("h3",{id:"playershowjoincodeuniverse-dimension"},Object(i.b)("inlineCode",{parentName:"h3"},"player.showJoinCode(universe?, dimension?)")),Object(i.b)(l.FunctionCode,{name:"showJoinCode",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Shows a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/QR_code"}),"QR Code")," with a link to join the given universe and dimension.\nIf the universe and dimension are omitted, then the current universe and dimension will be used."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the universe that the code should be shown for."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the dimension that the code should be shown for."),Object(i.b)("h4",{id:"examples-47"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Show a join QR Code.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.showJoinCode();\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Show a join QR Code for a universe and dimension.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.showJoinCode("universe", "dimension");\n')),Object(i.b)("h3",{id:"playeropenbarcodescannercamera"},Object(i.b)("inlineCode",{parentName:"h3"},"player.openBarcodeScanner(camera?)")),Object(i.b)(l.FunctionCode,{name:"openBarcodeScanner",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Opens the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Barcode"}),"Barcode")," scanner. While open, each scanned Barcode will send a ",Object(i.b)(l.TagLink,{tag:"@onBarcodeScanned",mdxType:"TagLink"})," shout.\nOptionally accepts which camera to use for scanning. (front/back)"),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is optional and is a string specifing which camera to use. Defaults to 'rear'.\nIf the given camera type is not available, then the default camera will be used.\nPossible values are:"),Object(i.b)(l.PossibleValuesTable,{mdxType:"PossibleValuesTable"},Object(i.b)(l.PossibleValueCode,{value:"rear",mdxType:"PossibleValueCode"},"The rear-facing camera. (Default)"),Object(i.b)(l.PossibleValueCode,{value:"front",mdxType:"PossibleValueCode"},"The front-facing camera.")),Object(i.b)("h4",{id:"examples-48"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Open the Barcode scanner.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.openBarcodeScanner();\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Open the Barcode scanner for the front-facing camera.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.openBarcodeScanner("front");\n')),Object(i.b)("h3",{id:"playerclosebarcodescannercamera"},Object(i.b)("inlineCode",{parentName:"h3"},"player.closeBarcodeScanner(camera?)")),Object(i.b)(l.FunctionCode,{name:"closeBarcodeScanner",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Closes the Barcode scanner."),Object(i.b)("h4",{id:"examples-49"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Close the Barcode scanner.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.closeBarcodeScanner();\n")),Object(i.b)("h3",{id:"playershowbarcodecode-format"},Object(i.b)("inlineCode",{parentName:"h3"},"player.showBarcode(code, format?)")),Object(i.b)(l.FunctionCode,{name:"showBarcode",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Shows a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Barcode"}),"Barcode")," for the given data. Optionally accepts the format that the barcode should be displayed in."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the text or data that the generated Barcode should represent."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is optional and is the format that the barcode should be displayed in.\nPossible values are:"),Object(i.b)(l.PossibleValuesTable,{mdxType:"PossibleValuesTable"},Object(i.b)(l.PossibleValueCode,{value:"code128",mdxType:"PossibleValueCode"},"The ",Object(i.b)("a",{href:"https://en.wikipedia.org/wiki/Code_128"},"Code 128")," barcode format. (Default)"),Object(i.b)(l.PossibleValueCode,{value:"code39",mdxType:"PossibleValueCode"},"The ",Object(i.b)("a",{href:"https://en.wikipedia.org/wiki/Code_39"},"Code 39")," barcode format."),Object(i.b)(l.PossibleValueCode,{value:"ean13",mdxType:"PossibleValueCode"},"The ",Object(i.b)("a",{href:"https://en.wikipedia.org/wiki/International_Article_Number"},"EAN-13")," barcode format."),Object(i.b)(l.PossibleValueCode,{value:"ean8",mdxType:"PossibleValueCode"},"The ",Object(i.b)("a",{href:"https://en.wikipedia.org/wiki/International_Article_Number"},"EAN-8")," barcode format."),Object(i.b)(l.PossibleValueCode,{value:"upc",mdxType:"PossibleValueCode"},"The ",Object(i.b)("a",{href:"https://en.wikipedia.org/wiki/Universal_Product_Code"},"UPC")," barcode format."),Object(i.b)(l.PossibleValueCode,{value:"itf14",mdxType:"PossibleValueCode"},"The ",Object(i.b)("a",{href:"https://en.wikipedia.org/wiki/ITF-14"},"IFT-14")," barcode format."),Object(i.b)(l.PossibleValueCode,{value:"msi",mdxType:"PossibleValueCode"},"The ",Object(i.b)("a",{href:"https://en.wikipedia.org/wiki/MSI_Barcode"},"MSI")," barcode format."),Object(i.b)(l.PossibleValueCode,{value:"pharmacode",mdxType:"PossibleValueCode"},"The ",Object(i.b)("a",{href:"https://en.wikipedia.org/wiki/Pharmacode"},"Pharmacode")," barcode format."),Object(i.b)(l.PossibleValueCode,{value:"codabar",mdxType:"PossibleValueCode"},"The ",Object(i.b)("a",{href:"https://en.wikipedia.org/wiki/Codabar"},"Codabar")," barcode format.")),Object(i.b)("h4",{id:"examples-50"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Show a Barcode that contains the data "hello".')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.showBarcode("hello");\n')),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Show a UPC Barcode that contains the data "123456".')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.showBarcode(\"123456\", 'upc');\n")),Object(i.b)("h3",{id:"playerhidebarcode"},Object(i.b)("inlineCode",{parentName:"h3"},"player.hideBarcode()")),Object(i.b)(l.FunctionCode,{name:"hideBarcode",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Closes the Barcode popup modal."),Object(i.b)("h4",{id:"examples-51"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Hides the Barcode popup modal.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.hideBarcode();\n")),Object(i.b)("h3",{id:"playershowinputfortagbot-tag-options"},Object(i.b)("inlineCode",{parentName:"h3"},"player.showInputForTag(bot, tag, options?)")),Object(i.b)(l.FunctionCode,{name:"showInputForTag",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Shows an input modal for the given bot and tag with the given options.\nWhen shown, the player will be able to change the value stored in the given tag.\nTriggers the ",Object(i.b)(l.TagLink,{tag:"@onSaveInput",mdxType:"TagLink"})," whisper when the modal is closed with saving and the ",Object(i.b)(l.TagLink,{tag:"@onCloseInput",mdxType:"TagLink"})," whisper when the modal is closed without saving."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot or bot ID that the input should be shown for,"),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the tag that should be edited on the bot."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"third parameter")," is optional and is the possible cusomization options for the input modal."),Object(i.b)("h4",{id:"examples-52"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Show a basic text input modal for the ",Object(i.b)("inlineCode",{parentName:"li"},"#name")," tag on this bot.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.showInputForTag(this, "name");\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Show a text input modal with a placeholder for the ",Object(i.b)("inlineCode",{parentName:"li"},"#name")," tag.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.showInputForTag(this, \"name\", {\n    placeholder: 'Enter a name'\n});\n")),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},"Show a input modal with a custom title.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.showInputForTag(this, \"name\", {\n    title: 'Edit name'\n});\n")),Object(i.b)("ol",{start:4},Object(i.b)("li",{parentName:"ol"},"Show a color input modal with a custom title.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.showInputForTag(this, \"auxColor\", {\n    type: 'color',\n    title: 'Enter a custom color'\n});\n")),Object(i.b)("h3",{id:"playersetclipboardtext"},Object(i.b)("inlineCode",{parentName:"h3"},"player.setClipboard(text)")),Object(i.b)(l.FunctionCode,{name:"setClipboard",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Copies the given text to the player's clipboard. On Chrome and Firefox, this will act like a ",Object(i.b)("inlineCode",{parentName:"p"},"Ctrl+C"),"/",Object(i.b)("inlineCode",{parentName:"p"},"Cmd+C"),".\nOn Safari and all iOS browsers this will open a popup which prompts the player to copy the text."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the text that should be copied to the player's clipboard."),Object(i.b)("h4",{id:"examples-53"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Copy "hello" to the player\'s clipboard.')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.setClipboard("hello");\n')),Object(i.b)("h3",{id:"playershowuploadauxfile"},Object(i.b)("inlineCode",{parentName:"h3"},"player.showUploadAuxFile()")),Object(i.b)(l.FunctionCode,{name:"showUploadAuxFile",mdxType:"FunctionCode"}),Object(i.b)("p",null,'Shows the "Upload AUX File" dialog which lets the user select a ',Object(i.b)("inlineCode",{parentName:"p"},".aux")," file to upload to the universe."),Object(i.b)("h4",{id:"examples-54"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Show the "Upload AUX File" dialog.')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.showUploadAuxFile();\n")),Object(i.b)("h3",{id:"playerloaduniverseuniverse"},Object(i.b)("inlineCode",{parentName:"h3"},"player.loadUniverse(universe)")),Object(i.b)(l.FunctionCode,{name:"loadUniverse",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Loads the given univese into the current browser tab. When the universe is loaded, the ",Object(i.b)(l.TagLink,{tag:"@onUniverseSubscribed",mdxType:"TagLink"})," shout will be triggered."),Object(i.b)("p",null,"Note that separate universes cannot interact directly. They must instead interact via super shouts."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the name of the universe to load."),Object(i.b)("h4",{id:"examples-55"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Load the ",Object(i.b)("inlineCode",{parentName:"li"},"fun")," universe.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.loadUniverse("fun");\n')),Object(i.b)("h3",{id:"playerunloaduniverse"},Object(i.b)("inlineCode",{parentName:"h3"},"player.unloadUniverse()")),Object(i.b)("p",null,"Unloads the given universe from the current browser tab. When the universe is unloaded, the ",Object(i.b)(l.TagLink,{tag:"@onUniverseUnsubscribed",mdxType:"TagLink"})," shout will be triggered."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the name of the universe to unload."),Object(i.b)("h4",{id:"examples-56"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Unload the ",Object(i.b)("inlineCode",{parentName:"li"},"fun")," universe.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.unloadUniverse('fun');\n")),Object(i.b)("h3",{id:"playerdownloaduniverse"},Object(i.b)("inlineCode",{parentName:"h3"},"player.downloadUniverse()")),Object(i.b)(l.FunctionCode,{name:"downloadUniverse",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Downloads all of the shared bots into a ",Object(i.b)("inlineCode",{parentName:"p"},".aux")," file on the player's computer.\nThe file will have the same name as the universe."),Object(i.b)("p",null,"Note that this function is almost exactly the same as ",Object(i.b)(l.ActionLink,{action:"player.downloadBots(bots, filename)",mdxType:"ActionLink"}),".\nThe only difference is that all bots in the shared space are included and the file is named for you automatically."),Object(i.b)("h4",{id:"examples-57"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Download the entire universe.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.downloadUniverse();\n")),Object(i.b)("h3",{id:"playerenablear"},Object(i.b)("inlineCode",{parentName:"h3"},"player.enableAR()")),Object(i.b)(l.FunctionCode,{name:"enableAR",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Enables augmented reality on the device."),Object(i.b)("h4",{id:"examples-58"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Enable AR.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.enableAR();\n")),Object(i.b)("h3",{id:"playerdisablear"},Object(i.b)("inlineCode",{parentName:"h3"},"player.disableAR()")),Object(i.b)(l.FunctionCode,{name:"disableAR",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Disables augmented reality on the device."),Object(i.b)("h4",{id:"examples-59"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Disable AR.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.disableAR();\n")),Object(i.b)("h3",{id:"playerenablevr"},Object(i.b)("inlineCode",{parentName:"h3"},"player.enableVR()")),Object(i.b)(l.FunctionCode,{name:"enableVR",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Enables virtual reality on the device."),Object(i.b)("h4",{id:"examples-60"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Enable VR.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.enableVR();\n")),Object(i.b)("h3",{id:"playerdisablevr"},Object(i.b)("inlineCode",{parentName:"h3"},"player.disableVR()")),Object(i.b)(l.FunctionCode,{name:"disableVR",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Disables virtual reality on the device."),Object(i.b)("h4",{id:"examples-61"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Disable VR.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.disableVR();\n")),Object(i.b)("h3",{id:"playergetcurrentuniverse"},Object(i.b)("inlineCode",{parentName:"h3"},"player.getCurrentUniverse()")),Object(i.b)(l.FunctionCode,{name:"getCurrentUniverse",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets the universe that the player is in."),Object(i.b)("h4",{id:"examples-62"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Show a message of the current universe.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const universe = player.getCurrentUniverse();\nplayer.toast(universe);\n")),Object(i.b)("h3",{id:"playergetcurrentdimension"},Object(i.b)("inlineCode",{parentName:"h3"},"player.getCurrentDimension()")),Object(i.b)(l.FunctionCode,{name:"getCurrentDimension",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets the dimension that is loaded into the ",Object(i.b)(l.TagLink,{tag:"auxPagePortal",mdxType:"TagLink"})," portal."),Object(i.b)(l.Alert,{type:"info",mdxType:"Alert"},"This function behaves exactly like ",Object(i.b)(l.ActionLink,{action:"player.getPortalDimension(portal)",mdxType:"ActionLink"}),' when given "auxPagePortal".'),Object(i.b)("h4",{id:"examples-63"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Show a message of the dimension that is currently in the ",Object(i.b)(l.TagLink,{tag:"auxPagePortal",mdxType:"TagLink"})," portal.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const dimension = player.getCurrentDimension();\nplayer.toast(dimension);\n")),Object(i.b)("h3",{id:"playergetmenudimension"},Object(i.b)("inlineCode",{parentName:"h3"},"player.getMenuDimension()")),Object(i.b)(l.FunctionCode,{name:"getMenuDimension",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets the dimension that is loaded into the ",Object(i.b)(l.TagLink,{tag:"auxMenuPortal",mdxType:"TagLink"})," portal."),Object(i.b)(l.Alert,{type:"info",mdxType:"Alert"},"This function behaves exactly like ",Object(i.b)(l.ActionLink,{action:"player.getPortalDimension(portal)",mdxType:"ActionLink"}),' when given "auxMenuPortal".'),Object(i.b)("h4",{id:"examples-64"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Show a message of the dimension that is currently in the ",Object(i.b)(l.TagLink,{tag:"auxMenuPortal",mdxType:"TagLink"})," portal.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const dimension = player.getMenuDimension();\nplayer.toast(dimension);\n")),Object(i.b)("h3",{id:"playergetinventorydimension"},Object(i.b)("inlineCode",{parentName:"h3"},"player.getInventoryDimension()")),Object(i.b)(l.FunctionCode,{name:"getInventoryDimension",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets the dimension that is loaded into the ",Object(i.b)(l.TagLink,{tag:"auxInventoryPortal",mdxType:"TagLink"})," portal."),Object(i.b)(l.Alert,{type:"info",mdxType:"Alert"},"This function behaves exactly like ",Object(i.b)(l.ActionLink,{action:"player.getPortalDimension(portal)",mdxType:"ActionLink"}),' when given "auxInventoryPortal".'),Object(i.b)("h4",{id:"examples-65"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Show a message of the dimension that is currently in the ",Object(i.b)(l.TagLink,{tag:"auxInventoryPortal",mdxType:"TagLink"})," portal.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const dimension = player.getInventoryDimension();\nplayer.toast(dimension);\n")),Object(i.b)("h3",{id:"playerhasbotininventorybot"},Object(i.b)("inlineCode",{parentName:"h3"},"player.hasBotInInventory(bot)")),Object(i.b)(l.FunctionCode,{name:"hasBotInInventory",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Determines if the given bot is in the dimension that is currently loaded into the ",Object(i.b)(l.TagLink,{tag:"auxInventoryPortal",mdxType:"TagLink"})," portal."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot that should be checked."),Object(i.b)("h4",{id:"examples-66"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Show a message if a bot named bob is in the inventory.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'const bob = getBot("#name", "bob");\nif (player.hasBotInInventory(bob)) {\n    player.toast("bob is in the inventory!");\n}\n')),Object(i.b)("h3",{id:"playergetportaldimensionportal"},Object(i.b)("inlineCode",{parentName:"h3"},"player.getPortalDimension(portal)")),Object(i.b)(l.FunctionCode,{name:"getPortalDimension",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets the dimension that is loaded into the given portal."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the portal that the dimension should be retrieved for.\nPossible values are:"),Object(i.b)(l.PossibleValuesTable,{mdxType:"PossibleValuesTable"},Object(i.b)(l.PossibleValueCode,{value:"page",mdxType:"PossibleValueCode"},"The ",Object(i.b)(l.TagLink,{tag:"auxPagePortal",mdxType:"TagLink"}),"."),Object(i.b)(l.PossibleValueCode,{value:"sheet",mdxType:"PossibleValueCode"},"The ",Object(i.b)(l.TagLink,{tag:"auxSheetPortal",mdxType:"TagLink"}),"."),Object(i.b)(l.PossibleValueCode,{value:"inventory",mdxType:"PossibleValueCode"},"The ",Object(i.b)(l.TagLink,{tag:"auxInventoryPortal",mdxType:"TagLink"}),"."),Object(i.b)(l.PossibleValueCode,{value:"menu",mdxType:"PossibleValueCode"},"The ",Object(i.b)(l.TagLink,{tag:"auxMenuPortal",mdxType:"TagLink"}),".")),Object(i.b)("h4",{id:"examples-67"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Get the dimension that is currently showing in the ",Object(i.b)(l.TagLink,{tag:"auxPagePortal",mdxType:"TagLink"}),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const dimension = player.getPortalDimension('page');\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Get the dimension that is currently showing in the ",Object(i.b)(l.TagLink,{tag:"auxInventoryPortal",mdxType:"TagLink"}),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const dimension = player.getPortalDimension('inventory');\n")),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},"Get the dimension that is currently showing in the ",Object(i.b)("inlineCode",{parentName:"li"},"#auxCustomPortal")," tag.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const dimension = player.getPortalDimension('auxCustomPortal');\n")),Object(i.b)("h3",{id:"playergetdimensionaldepthdimension"},Object(i.b)("inlineCode",{parentName:"h3"},"player.getDimensionalDepth(dimension)")),Object(i.b)(l.FunctionCode,{name:"getDimensionalDepth",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets the distance that the player bot is from the given dimension."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the dimension that should be searched for."),Object(i.b)("p",null,"Possible return values are:"),Object(i.b)(l.PossibleValuesTable,{mdxType:"PossibleValuesTable"},Object(i.b)(l.PossibleValueCode,{value:"-1",mdxType:"PossibleValueCode"},"The player bot cannot access the given dimension."),Object(i.b)(l.PossibleValueCode,{value:"0",mdxType:"PossibleValueCode"},"The player bot is in the given dimension. (dimension tag is true)"),Object(i.b)(l.PossibleValueCode,{value:"1",mdxType:"PossibleValueCode"},"The player bot is viewing the given dimension through a portal. (a portal tag is set to the dimension)")),Object(i.b)("h4",{id:"examples-68"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Get the distance to the "fun" dimension.')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'const distance = player.getDimensionalDepth("fun");\nif (distance === 0) {\n    player.toast("Player is in the fun dimension");\n} else if(distance === 1) {\n    player.toast("Player is viewing the fun dimension");\n} else {\n    player.toast("Player cannot access the fun dimension");\n}\n')),Object(i.b)("h3",{id:"playergetbot"},Object(i.b)("inlineCode",{parentName:"h3"},"player.getBot()")),Object(i.b)(l.FunctionCode,{name:"getUser",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets the player bot. This is the bot that represents the player's browser tab."),Object(i.b)("h4",{id:"examples-69"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Get the player bot and set a username on it.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'const playerBot = player.getBot();\nplayerBot.tags.username = "bob";\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},'Open the sheet to "testDimension".')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'const playerBot = player.getBot();\nplayerBot.tags.auxSheetPortal = "testDimension";\n')),Object(i.b)("h3",{id:"playergotodimensiondimension"},Object(i.b)("inlineCode",{parentName:"h3"},"player.goToDimension(dimension)")),Object(i.b)(l.FunctionCode,{name:"goToDimension",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Loads the given dimension into the ",Object(i.b)(l.TagLink,{tag:"auxPagePortal",mdxType:"TagLink"})," portal.\nTriggers the ",Object(i.b)(l.TagLink,{tag:"@onPlayerPortalChanged",mdxType:"TagLink"})," shout."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the dimension that should be loaded."),Object(i.b)("h4",{id:"examples-70"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Load the ",Object(i.b)("inlineCode",{parentName:"li"},"abc")," dimension.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.goToDimension('abc');\n")),Object(i.b)("h3",{id:"playergotourlurl"},Object(i.b)("inlineCode",{parentName:"h3"},"player.goToURL(url)")),Object(i.b)(l.FunctionCode,{name:"goToURL",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Redirects the current tab to the given URL. Useful for sending the player to another webpage or ambient experience."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/URL"}),"URL")," that the player should be sent to. Usually this is a website like ",Object(i.b)("inlineCode",{parentName:"p"},"https://example.com"),"."),Object(i.b)("h4",{id:"examples-71"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Send the player to ",Object(i.b)("inlineCode",{parentName:"li"},"https://example.com"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.goToURL("https://example.com");\n')),Object(i.b)("h3",{id:"playeropenurlurl"},Object(i.b)("inlineCode",{parentName:"h3"},"player.openURL(url)")),Object(i.b)(l.FunctionCode,{name:"openURL",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Opens a new tab with the given URL. Useful for opening another webpage without redirecting the current tab."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/URL"}),"URL")," that should be loaded. Usually this is a website like ",Object(i.b)("inlineCode",{parentName:"p"},"https://example.com"),"."),Object(i.b)("h4",{id:"examples-72"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Open ",Object(i.b)("inlineCode",{parentName:"li"},"https://example.com")," in a new tab.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.openURL("https://example.com");\n')),Object(i.b)("h3",{id:"playeropendevconsole"},Object(i.b)("inlineCode",{parentName:"h3"},"player.openDevConsole()")),Object(i.b)(l.FunctionCode,{name:"openDevConsole",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Opens the developer console which contains a list of errors that scripts have issued."),Object(i.b)("h4",{id:"examples-73"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Open the developer console.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.openDevConsole();\n")),Object(i.b)("h3",{id:"playerplaysoundurl"},Object(i.b)("inlineCode",{parentName:"h3"},"player.playSound(url)")),Object(i.b)(l.FunctionCode,{name:"playSound",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Loads and plays the audio (MP3, WAV, etc.) from the given URL."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/URL"}),"URL")," of the audio/music/sound clip that should be played."),Object(i.b)("h4",{id:"examples-74"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Play a MP3 file from another website.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.playSound("https://www.testsounds.com/track06.mp3");\n')),Object(i.b)("h3",{id:"playerisindimensiondimension"},Object(i.b)("inlineCode",{parentName:"h3"},"player.isInDimension(dimension)")),Object(i.b)(l.FunctionCode,{name:"isInDimension",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets whether the given dimension is loaded into the ",Object(i.b)(l.TagLink,{tag:"auxPagePortal",mdxType:"TagLink"})," portal."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the dimension to check for."),Object(i.b)("h4",{id:"examples-75"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Show a toast if the player is viewing the ",Object(i.b)("inlineCode",{parentName:"li"},"abc")," dimension.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'if (player.isInDimension("abc")) {\n    player.toast("In the dimension!");\n}\n')),Object(i.b)("h3",{id:"playerinsheet"},Object(i.b)("inlineCode",{parentName:"h3"},"player.inSheet()")),Object(i.b)(l.FunctionCode,{name:"inSheet",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets whether the player is in the sheet dimension."),Object(i.b)("h4",{id:"examples-76"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Show a toast if the player is viewing the sheet.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'if (player.inSheet()) {\n    player.toast("You are in the sheet!");\n}\n')),Object(i.b)("h3",{id:"playerimportauxurl"},Object(i.b)("inlineCode",{parentName:"h3"},"player.importAUX(url)")),Object(i.b)(l.FunctionCode,{name:"importAUX",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Downloads and imports the AUX file from the given ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/URL"}),"URL"),"."),Object(i.b)("p",null,"This is useful to quickly download a AUX file and load it into the current universe from a site such as ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://gist.github.com/"}),"https://gist.github.com/"),"."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the URL that the AUX file should be downloaded from."),Object(i.b)("h4",{id:"examples-77"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Import an AUX file from a file.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const path = '/drives/myFile.aux';\nplayer.importAUX(path);\n")),Object(i.b)("h3",{id:"playerversion"},Object(i.b)("inlineCode",{parentName:"h3"},"player.version()")),Object(i.b)(l.FunctionCode,{name:"version",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets information about the version of auxPlayer."),Object(i.b)("p",null,"The returned value is an object with the following properties:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const returned: {\n    hash: string;\n    version: string;\n    major: number;\n    minor: number;\n    patch: number;\n};\n")),Object(i.b)("h4",{id:"examples-78"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Get the current version and popup a message with it.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const info = player.version();\nplayer.toast(info.version);\n")),Object(i.b)("h3",{id:"playerdevice"},Object(i.b)("inlineCode",{parentName:"h3"},"player.device()")),Object(i.b)(l.FunctionCode,{name:"device",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets information about the device that the player is using."),Object(i.b)("p",null,"The returned value is an object with the following properties:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const returned: {\n    supportsAR: boolean;\n    supportsVR: boolean;\n};\n")),Object(i.b)("h4",{id:"examples-79"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Get the device info and popup a message with it.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const info = player.device();\nplayer.toast(info);\n")),Object(i.b)("h3",{id:"playerrequestfullscreenmode"},Object(i.b)("inlineCode",{parentName:"h3"},"player.requestFullscreenMode()")),Object(i.b)(l.FunctionCode,{name:"requestFullscreenMode",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Attempts to enter fullscreen mode. Depending on which web browser the player is using, this might ask for permission to go fullscreen."),Object(i.b)("p",null,"Note that iPhones currently don't support fullscreen mode."),Object(i.b)("h4",{id:"examples-80"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Enter fullscreen mode.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.requestFullscreenMode();\n")),Object(i.b)("h3",{id:"playerexitfullscreenmode"},Object(i.b)("inlineCode",{parentName:"h3"},"player.exitFullscreenMode()")),Object(i.b)(l.FunctionCode,{name:"exitFullscreenMode",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Exists fullscreen mode."),Object(i.b)("h4",{id:"examples-81"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Exit fullscreen mode.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.exitFullscreenMode();\n")),Object(i.b)("h2",{id:"server-actions"},"Server Actions"),Object(i.b)("h3",{id:"serverbackuptogithubauth"},Object(i.b)("inlineCode",{parentName:"h3"},"server.backupToGithub(auth)")),Object(i.b)(l.FunctionCode,{name:"backupToGithub",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Saves all the universes to GitHub as a private Gist using the given authentication token."),Object(i.b)("p",null,"Just like ",Object(i.b)(l.ActionLink,{action:"server.shell(script)",mdxType:"ActionLink"}),", you need "),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the Github Personal Access Token that should be used to grant access to your Github account.\nSee ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line"}),"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line")),Object(i.b)(l.Alert,{type:"info",mdxType:"Alert"},"By default, backing up to GitHub is disabled on a universe. To enable it, you have to write a custom ",Object(i.b)(l.TagLink,{tag:"@onUniverseAction",mdxType:"TagLink"})," listener on the config bot and run an ",Object(i.b)(l.ActionLink,{action:"action.perform(action)",mdxType:"ActionLink"}),"."),Object(i.b)("h4",{id:"examples-82"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Backup all the universes to a Github Gist.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"server.backupToGithub('your auth token');\n")),Object(i.b)("h3",{id:"serverbackupasdownloadtarget"},Object(i.b)("inlineCode",{parentName:"h3"},"server.backupAsDownload(target)")),Object(i.b)(l.FunctionCode,{name:"backupAsDownload",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Saves all the universes to a zip file and downloads it to the session matching the given target."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is an object that indicates which session the zip file should be downloaded to."),Object(i.b)(l.Alert,{type:"info",mdxType:"Alert"},"By default, backing up as a download is disabled on a universe. To enable it, you have to write a custom ",Object(i.b)(l.TagLink,{tag:"@onUniverseAction",mdxType:"TagLink"})," listener on the config bot and run an ",Object(i.b)(l.ActionLink,{action:"action.perform(action)",mdxType:"ActionLink"}),"."),Object(i.b)("h4",{id:"examples-83"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Backup and download to this tab.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"server.backupAsDownload({\n    session: getID(player.getBot())\n});\n")),Object(i.b)("h3",{id:"serverfinishcheckoutoptions"},Object(i.b)("inlineCode",{parentName:"h3"},"server.finishCheckout(options)")),Object(i.b)("p",null,"Finishes the checkout process by charging payment to the player.\nBest used during the ",Object(i.b)(l.TagLink,{tag:"@onCheckout",mdxType:"TagLink"})," shout."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," are the options needed to finish the checkout process."),Object(i.b)("h4",{id:"examples-84"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Finish the checkout process.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"server.finishCheckout({\n    secretKey: 'YOUR_SECRET_API_KEY',\n    \n    token: 'token from onCheckout',\n\n    // 1000 cents == $10.00\n    amount: 1000,\n    currency: 'usd',\n    description: 'Description for purchase'\n});\n")),Object(i.b)("h3",{id:"serversetupuniverseuniverse-botormod"},Object(i.b)("inlineCode",{parentName:"h3"},"server.setupUniverse(universe, botOrMod?)")),Object(i.b)(l.FunctionCode,{name:"setupUniverse",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Sends an action to the server that will create the given universe if it does not exist and places a clone of the given bot or mod in it.\nThe new bot will only be added to the universe if the universe did not exist.\nThe action is only executed if ",Object(i.b)(l.TagLink,{tag:"@onUniverseAction",mdxType:"TagLink"})," has been configured to perform events in ",Object(i.b)("inlineCode",{parentName:"p"},"device")," actions."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the ID of the universe that should be setup."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is optional and is the bot or mod that should be cloned into the new universe. After the bot is created, ",Object(i.b)(l.TagLink,{tag:"@onCreate",mdxType:"TagLink"})," will be triggered."),Object(i.b)("h4",{id:"examples-85"},"Examples:"),Object(i.b)("p",null,"Before ",Object(i.b)("inlineCode",{parentName:"p"},"server.setupUniverse()")," will work, you need to setup the ",Object(i.b)(l.TagLink,{tag:"@onUniverseAction",mdxType:"TagLink"})," tag to execute events from remote devices.\nThis is because when you run ",Object(i.b)("inlineCode",{parentName:"p"},"server.setupUniverse()"),' from a PC or phone (a.k.a. A "remote device"), it needs to send an event to the server to actually create the new universe.\nBy default, AUX does not perform actions that are received from a remote device. You must instruct AUX to execute these yourself.'),Object(i.b)("p",null,"Ensure that ",Object(i.b)(l.TagLink,{tag:"@onUniverseAction",mdxType:"TagLink"})," is setup properly.\nThe following script will execute ",Object(i.b)("inlineCode",{parentName:"p"},"setup_universe")," events that were sent from other devices:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"// Device actions are actions that were sent to this computer from another device\nif (that.action.type === 'device') {\n\n    // The setup_universe action is the action that is created\n    // from server.setupUniverse()\n    if (that.action.event.type === 'setup_universe') {\n\n        // Execute the setup_universe action\n        action.perform(that.action.event);\n    }\n}\n")),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Create the "test" universe:')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'server.setupUniverse("test");\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},'Create the "test" universe with a bot inside it:')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'server.setupUniverse("test", {\n    "name": "bob",\n    "auxColor": "red"\n});\n')),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},'Create the "test" universe with a bot that places a bot in the "abc" dimension:')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'server.setupUniverse("test", {\n    "onCreate": `@\n        create({\n            auxCreator: null,\n            auxLabel: "This is in the dimension!",\n            auxColor: "blue",\n            abc: true\n        });\n\n        destroy(this);\n    `\n});\n')),Object(i.b)("h3",{id:"serverbrowsehistory"},Object(i.b)("inlineCode",{parentName:"h3"},"server.browseHistory()")),Object(i.b)(l.FunctionCode,{name:"browseHistory",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Loads the ",Object(i.b)("inlineCode",{parentName:"p"},"history")," space into the current universe.\nThe ",Object(i.b)("inlineCode",{parentName:"p"},"history")," space is read-only and contains all the marks that have been created for the universe.\nEach mark is a bot that is placed in the ",Object(i.b)("inlineCode",{parentName:"p"},"#auxHistory")," dimension."),Object(i.b)("h4",{id:"examples-86"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Load the ",Object(i.b)("inlineCode",{parentName:"li"},"history")," space.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"server.browseHistory();\n")),Object(i.b)("h3",{id:"servermarkhistoryoptions"},Object(i.b)("inlineCode",{parentName:"h3"},"server.markHistory(options)")),Object(i.b)(l.FunctionCode,{name:"markHistory",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Marks the current state as a save point in history. This save point can be restored by using the ",Object(i.b)(l.ActionLink,{action:"server.restoreHistoryMark(mark)",mdxType:"ActionLink"})," action.\nNote that this only saves bots in the ",Object(i.b)("inlineCode",{parentName:"p"},"shared")," space. ",Object(i.b)("inlineCode",{parentName:"p"},"local")," and ",Object(i.b)("inlineCode",{parentName:"p"},"tempLocal")," bots are unaffected."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," are the options that should be used to mark the history point.\nIt should be an object with the following properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"message")," - The message that the new mark should have. Use this as a way to communicate what was special about this save point.")),Object(i.b)("h4",{id:"examples-87"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Save the current state of the ",Object(i.b)("inlineCode",{parentName:"li"},"shared")," space.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"server.markHistory({\n    message: 'First Version of my AUX'\n});\n")),Object(i.b)("h3",{id:"serverrestorehistorymarkmark"},Object(i.b)("inlineCode",{parentName:"h3"},"server.restoreHistoryMark(mark)")),Object(i.b)(l.FunctionCode,{name:"restoreHistoryMark",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Restores the current state to the state that was saved by the given mark.\nThis will create a new mark with any unsaved changes and another mark with the state that was saved by the given mark."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot or bot ID of the mark that should be restored. You can find available marks in the current universe by using the ",Object(i.b)(l.ActionLink,{action:"server.browseHistory()",mdxType:"ActionLink"})," action."),Object(i.b)("h4",{id:"examples-88"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Restore the state to a given mark.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// Find a random mark that was loaded by server.browseHistory()\nlet mark = getBot(byTag("#auxHistory", true));\n\n// Restore the current state to the given mark.\nserver.restoreHistoryMark(mark);\n')),Object(i.b)("h3",{id:"serverrestorehistorymarktouniversemark-universe"},Object(i.b)("inlineCode",{parentName:"h3"},"server.restoreHistoryMarkToUniverse(mark, universe)")),Object(i.b)(l.FunctionCode,{name:"restoreHistoryMarkToUniverse",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Restores the state in the given universe to the state that was saved by the given mark.\nThis will create a new mark with any unsaved changes in the universe and another mark with the state that was saved by the given mark."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot or bot ID of the mark that should be restored. You can find available marks in the current universe by using the ",Object(i.b)(l.ActionLink,{action:"server.browseHistory()",mdxType:"ActionLink"})," action."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the universe that the state should be restored to. If ",Object(i.b)("inlineCode",{parentName:"p"},"null")," or an empty string, then the current universe will be restored."),Object(i.b)("h4",{id:"examples-89"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Restore the state of the ",Object(i.b)("inlineCode",{parentName:"li"},"test")," universe to a given mark.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// Find a random mark that was loaded by server.browseHistory()\nlet mark = getBot(byTag("#auxHistory", true));\n\n// Restore the current state to the given mark.\nserver.restoreHistoryMarkToUniverse(mark, "test");\n')),Object(i.b)("h3",{id:"servershellscript"},Object(i.b)("inlineCode",{parentName:"h3"},"server.shell(script)")),Object(i.b)(l.FunctionCode,{name:"shell",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Executes the given script on the server."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the shell script that should be executed."),Object(i.b)(l.Alert,{type:"info",mdxType:"Alert"},"By default, shell scripts are disabled on a universe. To enable them, you have to write a custom ",Object(i.b)(l.TagLink,{tag:"@onUniverseAction",mdxType:"TagLink"})," listener on the config bot and run an ",Object(i.b)(l.ActionLink,{action:"action.perform(action)",mdxType:"ActionLink"}),"."),Object(i.b)("h3",{id:"serverloadfilepath-options"},Object(i.b)("inlineCode",{parentName:"h3"},"server.loadFile(path, options?)")),Object(i.b)(l.FunctionCode,{name:"serverLoadFile",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Loads a file from the server at the given path."),Object(i.b)("p",null,"Note that on a Raspberry PI, all USB storage devices are mapped into the ",Object(i.b)("inlineCode",{parentName:"p"},"/drives")," directory based on the port they were plugged into.\nLoading a file from a USB drive is as simple as specifying the file name.\nIf multiple USB drives are plugged in and have files with the same name, then the file from the USB drive in the smallest numbered port is used."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the path that the file should be loaded from. This is usually just the full name of the file to load. (name + file extension)"),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," are the options that should be used for loading the file."),Object(i.b)(l.Alert,{type:"info",mdxType:"Alert"},"By default, loading files is disabled on a universe. To enable it, you have to write a custom ",Object(i.b)(l.TagLink,{tag:"@onUniverseAction",mdxType:"TagLink"})," listener on the config bot and run an ",Object(i.b)(l.ActionLink,{action:"action.perform(action)",mdxType:"ActionLink"}),"."),Object(i.b)("h4",{id:"examples-90"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Load a file named "book.txt" and trigger a ',Object(i.b)("inlineCode",{parentName:"li"},"@onBookLoaded")," shout when it is loaded.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"server.loadFile('book.txt', {\n    callbackShout: 'onBookLoaded'\n});\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},'Load a file named "book.txt" from drive ',Object(i.b)("inlineCode",{parentName:"li"},"2")," and trigger a ",Object(i.b)("inlineCode",{parentName:"li"},"@onBookLoaded")," shout when it is loaded.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"server.loadFile('/2/book.txt', {\n    callbackShout: 'onBookLoaded'\n});\n")),Object(i.b)("h3",{id:"serversavefilepath-data-options"},Object(i.b)("inlineCode",{parentName:"h3"},"server.saveFile(path, data, options?)")),Object(i.b)(l.FunctionCode,{name:"serverSaveFile",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Saves a file at the given path with the given data.\nIf the file already exists, then the options are used to determine if the file should be overwritten. By default the file will not be overwritten."),Object(i.b)("p",null,"Note that on a Raspberry PI, all USB storage devices are mapped into the ",Object(i.b)("inlineCode",{parentName:"p"},"/drives")," directory based on the port they were plugged into.\nSaving a file to a USB drive is as simple as specifying the file name.\nIf multiple USB drives are plugged in and a drive is not specified, then the file will be saved to the first drive."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the path that the file should be saved to. This is usually just the full name of the file to save. (name + file extension)"),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the data that should be saved into the file."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"third parameter")," are the options that should be used for saving the file."),Object(i.b)(l.Alert,{type:"info",mdxType:"Alert"},"By default, saving files is disabled on a universe. To enable it, you have to write a custom ",Object(i.b)(l.TagLink,{tag:"@onUniverseAction",mdxType:"TagLink"})," listener on the config bot and run an ",Object(i.b)(l.ActionLink,{action:"action.perform(action)",mdxType:"ActionLink"}),"."),Object(i.b)("h4",{id:"examples-91"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Save a file named "book.txt" and trigger a ',Object(i.b)("inlineCode",{parentName:"li"},"@onBookSaved")," shout when it is saved.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"server.saveFile('book.txt', 'My memoirs', {\n    callbackShout: 'onBookSaved'\n});\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},'Save a file named "book.txt" to drive ',Object(i.b)("inlineCode",{parentName:"li"},"2")," and trigger a ",Object(i.b)("inlineCode",{parentName:"li"},"@onBookSaved")," shout when it is loaded.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"server.loadFile('/2/book.txt', 'My memoirs', {\n    callbackShout: 'onBookSaved',\n    overwriteExistingFile: true\n});\n")),Object(i.b)("h2",{id:"utility-actions"},"Utility Actions"),Object(i.b)("h3",{id:"settagbot-tag-value"},Object(i.b)("inlineCode",{parentName:"h3"},"setTag(bot, tag, value)")),Object(i.b)(l.FunctionCode,{name:"setTag",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Sets the given tag to the given value on the given bot, list of bots, or mod."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot, list of bots, or mod that the tag should be set on."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the tag that should be changed."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"third parameter")," is the value that should be placed into the tag(s)."),Object(i.b)("h4",{id:"examples-92"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Set a bot's ",Object(i.b)(l.TagLink,{tag:"auxColor",mdxType:"TagLink"})," to ",Object(i.b)("inlineCode",{parentName:"li"},"green"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'setTag(this, "#auxColor", "green");\n')),Object(i.b)("h3",{id:"gettagbot-tag"},Object(i.b)("inlineCode",{parentName:"h3"},"getTag(bot, tag)")),Object(i.b)(l.FunctionCode,{name:"getTag",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Gets the given tag value from the given bot."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the bot that the tag should be retrieved from."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the tag that should be retrieved."),Object(i.b)("h4",{id:"examples-93"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Get the ",Object(i.b)(l.TagLink,{tag:"auxColor",mdxType:"TagLink"})," tag from ",Object(i.b)("inlineCode",{parentName:"li"},"this")," bot.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'const color = getTag(this, "#auxColor");\n')),Object(i.b)("h2",{id:"math-actions"},"Math Actions"),Object(i.b)("h3",{id:"mathsumlist"},Object(i.b)("inlineCode",{parentName:"h3"},"math.sum(list)")),Object(i.b)(l.FunctionCode,{name:"sum",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Calculates the numerical sum of the given values."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the list of values that should be summed up.\nIf any value in the list is not a number, it will be converted to one.\nIf the list is not actually a list, then it will be converted to a number and returned."),Object(i.b)("h4",{id:"examples-94"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Calculate the sum of a list of numbers.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const total = math.sum([92, 123, 21]);\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Calculate the total ",Object(i.b)("inlineCode",{parentName:"li"},"#age")," of all the bots.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const totalAge = math.sum(getBotTagValues('#age'));\n")),Object(i.b)("h3",{id:"mathavglist"},Object(i.b)("inlineCode",{parentName:"h3"},"math.avg(list)")),Object(i.b)(l.FunctionCode,{name:"avg",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Calculates the arithmetic mean of the given list of values.\nThat is, the sum of the values divided by the number of values."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the list of values that average should be calculated for."),Object(i.b)("h4",{id:"examples-95"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Calculate the average of a list of numbers.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const average = math.avg([4, 54.2, 31]);\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Calculate the average ",Object(i.b)("inlineCode",{parentName:"li"},"#age")," of all the bots.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const averageAge = math.avg(getBotTagValues('#age'));\n")),Object(i.b)("h3",{id:"mathsqrtvalue"},Object(i.b)("inlineCode",{parentName:"h3"},"math.sqrt(value)")),Object(i.b)(l.FunctionCode,{name:"sqrt",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Calculates the square root of the given value."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the value that the square root should be calculated for."),Object(i.b)("h4",{id:"examples-96"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Calculate the square root of ",Object(i.b)("inlineCode",{parentName:"li"},"4"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const rootOf4 = math.sqrt(4);\n")),Object(i.b)("h3",{id:"mathabsnumber"},Object(i.b)("inlineCode",{parentName:"h3"},"math.abs(number)")),Object(i.b)(l.FunctionCode,{name:"abs",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Calculates the absolute value of the given number."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the number that the absolute value should be calculated for."),Object(i.b)("h4",{id:"examples-97"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Calculate the absolute value for the number ",Object(i.b)("inlineCode",{parentName:"li"},"-42"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const _42 = math.abs(-42);\n")),Object(i.b)("h3",{id:"mathstddevlist"},Object(i.b)("inlineCode",{parentName:"h3"},"math.stdDev(list)")),Object(i.b)(l.FunctionCode,{name:"stdDev",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Calculates the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Standard_deviation"}),"standard deviation")," for the given list of values."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the list of values that the standard deviation should be calculated for."),Object(i.b)("h4",{id:"examples-98"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Calculate the standard deviation of a list of numbers.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const standardDeviation = math.stdDev([2, 97, 745]);\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Calculate the standard deviation of the ",Object(i.b)("inlineCode",{parentName:"li"},"#age")," of all the bots.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const ageDeviation = math.stdDev(getBotTagValues('#age'));\n")),Object(i.b)("h3",{id:"mathrandomintmin-max"},Object(i.b)("inlineCode",{parentName:"h3"},"math.randomInt(min, max)")),Object(i.b)(l.FunctionCode,{name:"randomInt",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Generates a random integer number between the given minimum and maximum values."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the smallest allowed value that can be generated."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the largest allowed value that can be generated."),Object(i.b)("h4",{id:"examples-99"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Generate a random number between ",Object(i.b)("inlineCode",{parentName:"li"},"5")," and ",Object(i.b)("inlineCode",{parentName:"li"},"10"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const number = math.randomInt(5, 10);\n")),Object(i.b)("h3",{id:"mathrandommin-max"},Object(i.b)("inlineCode",{parentName:"h3"},"math.random(min, max)")),Object(i.b)(l.FunctionCode,{name:"random",mdxType:"FunctionCode"}),Object(i.b)("p",null,"Generates a random number between the given minimum and maximum values."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"first parameter")," is the smallest allowed value that can be generated."),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"second parameter")," is the largest allowed value that can be generated."),Object(i.b)("h4",{id:"examples-100"},"Examples:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Generate a random number between ",Object(i.b)("inlineCode",{parentName:"li"},"0")," and ",Object(i.b)("inlineCode",{parentName:"li"},"Math.PI"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const number = math.random(0, Math.PI);\n")))}p.isMDXComponent=!0}}]);