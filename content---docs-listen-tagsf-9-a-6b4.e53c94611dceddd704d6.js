(window.webpackJsonp=window.webpackJsonp||[]).push([[16,15],{36:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"rightToc",(function(){return d})),n.d(t,"PossibleValuesTable",(function(){return h})),n.d(t,"PossibleValue",(function(){return u})),n.d(t,"PossibleValueCode",(function(){return p})),n.d(t,"AnyColorValues",(function(){return O})),n.d(t,"TagLink",(function(){return j})),n.d(t,"NormalCode",(function(){return g})),n.d(t,"LabelAnchorValues",(function(){return m})),n.d(t,"Badges",(function(){return y})),n.d(t,"Badge",(function(){return f})),n.d(t,"ReadOnlyBadge",(function(){return w})),n.d(t,"VideoBadge",(function(){return v})),n.d(t,"UserBotBadge",(function(){return C})),n.d(t,"Alert",(function(){return N})),n.d(t,"default",(function(){return x}));var a=n(0),o=n.n(a),r=n(65);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function b(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function l(e){if(null==e)throw new TypeError("Cannot destructure undefined")}var s={},d=[],h=function(e){var t=e.children;return Object(r.b)("table",null,Object(r.b)("thead",null,Object(r.b)("tr",null,Object(r.b)("th",null,"Value"),Object(r.b)("th",null,"Description"))),Object(r.b)("tbody",null,t))},u=function(e){var t=e.value,n=e.children;return Object(r.b)("tr",null,Object(r.b)("td",null,t),Object(r.b)("td",null,n))},p=function(e){var t=e.value,n=e.children;return Object(r.b)(u,{value:Object(r.b)("code",null,t),mdxType:"PossibleValue"},n)},O=function(e){return l(e),Object(r.b)(o.a.Fragment,null,Object(r.b)(u,{value:"Any X11 Color",mdxType:"PossibleValue"},Object(r.b)("a",{href:"https://en.wikipedia.org/wiki/X11_color_names",target:"_blank"},"X11 colors")," are a list of standard colors that web browsers support."),Object(r.b)(u,{value:"Any Hex Color",mdxType:"PossibleValue"},Object(r.b)("a",{href:"https://en.wikipedia.org/wiki/Web_colors#Hex_triplet",target:"_blank"},"Hex colors")," are three or six digit numbers that specify a color by its red, green, and blue components."))},j=function(e){var t=e.tag;return Object(r.b)("a",{href:"#"+t.replace(/\./g,"").toLowerCase()},Object(r.b)(g,{mdxType:"NormalCode"},"#",t))},g=function(e){var t=e.children;return o.a.createElement.apply(o.a,["code",{}].concat(b(t)))},m=function(e){return l(e),Object(r.b)(o.a.Fragment,null,Object(r.b)(p,{value:"top",mdxType:"PossibleValueCode"},"Top of the bot facing world oriented up. (default)"),Object(r.b)(p,{value:"front",mdxType:"PossibleValueCode"},"Front of the bot facing world oriented forward."),Object(r.b)(p,{value:"back",mdxType:"PossibleValueCode"},"Back of the bot facing world oriented back."),Object(r.b)(p,{value:"right",mdxType:"PossibleValueCode"},"Right of the bot facing world oriented right."),Object(r.b)(p,{value:"left",mdxType:"PossibleValueCode"},"Left of the bot facing world oriented left."),Object(r.b)(p,{value:"floating",mdxType:"PossibleValueCode"},"Floating above the bot."))},y=function(e){var t=e.children;return Object(r.b)("div",{class:"row badge-row"},Object(r.b)("div",{class:"col"},t))},f=function(e){var t=e.type,n=e.children;return Object(r.b)("span",{class:"badge badge--".concat(t)},n)},w=function(e){return l(e),Object(r.b)(f,{type:"warning",mdxType:"Badge"},"Read-Only")},v=function(e){var t=e.url;return Object(r.b)(f,{type:"info",mdxType:"Badge"},Object(r.b)("a",{href:t,target:"_blank"},"Video"))},C=function(e){e.url;return Object(r.b)(f,{type:"primary",mdxType:"Badge"},"Player Bot")},N=function(e){var t=e.type,n=e.children;return Object(r.b)("div",{class:"alert alert--".concat(t),role:"alert"},n)},A={rightToc:d,PossibleValuesTable:h,PossibleValue:u,PossibleValueCode:p,AnyColorValues:O,TagLink:j,NormalCode:g,LabelAnchorValues:m,Badges:y,Badge:f,ReadOnlyBadge:w,VideoBadge:v,UserBotBadge:C,Alert:N},k="wrapper";function x(e){var t=e.components,n=i(e,["components"]);return Object(r.b)(k,c({},A,n,{components:t,mdxType:"MDXLayout"}))}x.isMDXComponent=!0},46:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return s}));n(0);var a=n(65);n(36);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c={id:"listen-tags",title:"Listen Tags",sidebar_label:"Listen Tags"},i=[{value:"Whisper Tags",id:"whisper-tags",children:[{value:"onCreate()",id:"oncreate",children:[]},{value:"onDestroy()",id:"ondestroy",children:[]},{value:"onMod()",id:"onmod",children:[]},{value:"onCombine()",id:"oncombine",children:[]},{value:"onCombineEnter()",id:"oncombineenter",children:[]},{value:"onCombineExit()",id:"oncombineexit",children:[]},{value:"onClick()",id:"onclick",children:[]},{value:"onPointerEnter()",id:"onpointerenter",children:[]},{value:"onPointerExit()",id:"onpointerexit",children:[]},{value:"onPointerDown()",id:"onpointerdown",children:[]},{value:"onPointerUp()",id:"onpointerup",children:[]},{value:"onListen()",id:"onlisten",children:[]}]},{value:"Shout Tags",id:"shout-tags",children:[{value:"onAnyBotClicked()",id:"onanybotclicked",children:[]},{value:"onGridClick()",id:"ongridclick",children:[]},{value:"onPlayerEnterContext()",id:"onplayerentercontext",children:[]},{value:"onBarcodeScanned()",id:"onbarcodescanned",children:[]},{value:"onBarcodeScannerOpened()",id:"onbarcodescanneropened",children:[]},{value:"onBarcodeScannerClosed()",id:"onbarcodescannerclosed",children:[]},{value:"onQRCodeScanned()",id:"onqrcodescanned",children:[]},{value:"onQRCodeScannerOpened()",id:"onqrcodescanneropened",children:[]},{value:"onQRCodeScannerClosed()",id:"onqrcodescannerclosed",children:[]},{value:"onTapCode()",id:"ontapcode",children:[]},{value:"onKeyDown()",id:"onkeydown",children:[]},{value:"onKeyUp()",id:"onkeyup",children:[]},{value:"onChannelSubscribed()",id:"onchannelsubscribed",children:[]},{value:"onChannelUnsubscribed()",id:"onchannelunsubscribed",children:[]},{value:"onChannelStreaming()",id:"onchannelstreaming",children:[]},{value:"onChannelStreamLost()",id:"onchannelstreamlost",children:[]},{value:"onAnyListen()",id:"onanylisten",children:[]},{value:"onWebhook()",id:"onwebhook",children:[]},{value:"onAnyAction()",id:"onanyaction",children:[]}]}],b={rightToc:i},l="wrapper";function s(e){var t=e.components,n=r(e,["components"]);return Object(a.b)(l,o({},b,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Listen tags are tags which can recieve shouts and whispers from other bots and actions that happen from the user."),Object(a.b)("h2",{id:"whisper-tags"},"Whisper Tags"),Object(a.b)("p",null,"Whispers are shouts which are sent to specific bots instead of all bots."),Object(a.b)("h3",{id:"oncreate"},Object(a.b)("inlineCode",{parentName:"h3"},"onCreate()")),Object(a.b)("p",null,"A whisper that is sent to a bot when it is first created."),Object(a.b)("h3",{id:"ondestroy"},Object(a.b)("inlineCode",{parentName:"h3"},"onDestroy()")),Object(a.b)("p",null,"A whisper that is sent to a bot when it is being destroyed."),Object(a.b)("h3",{id:"onmod"},Object(a.b)("inlineCode",{parentName:"h3"},"onMod()")),Object(a.b)("p",null,"A whisper that is sent to a bot that a mod was applied to."),Object(a.b)("h4",{id:"arguments"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"\ninterface Mod {\n  [tag: string]: any;\n}\n\nlet that: {\n  diffs: Mod[]\n};\n")),Object(a.b)("h3",{id:"oncombine"},Object(a.b)("inlineCode",{parentName:"h3"},"onCombine()")),Object(a.b)("p",null,"A whisper that is sent to both of the bots that are being combined."),Object(a.b)("h4",{id:"arguments-1"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  context: string\n};\n")),Object(a.b)("h3",{id:"oncombineenter"},Object(a.b)("inlineCode",{parentName:"h3"},"onCombineEnter()")),Object(a.b)("p",null,"A whisper that is sent to both of the bots when one bot is dragged onto the other bot."),Object(a.b)("h4",{id:"arguments-2"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  context: string\n};\n")),Object(a.b)("h3",{id:"oncombineexit"},Object(a.b)("inlineCode",{parentName:"h3"},"onCombineExit()")),Object(a.b)("p",null,"A whisper that is sent to both of the bots when one bot is dragged off of the other bot."),Object(a.b)("h4",{id:"arguments-3"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  context: string\n};\n")),Object(a.b)("h3",{id:"onclick"},Object(a.b)("inlineCode",{parentName:"h3"},"onClick()")),Object(a.b)("p",null,"A whisper that is sent to the bot that was clicked."),Object(a.b)("h4",{id:"arguments-4"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  face: 'left' | 'right' | 'front' | 'back' | 'top' | 'bottom',\n  context: string\n};\n")),Object(a.b)("h3",{id:"onpointerenter"},Object(a.b)("inlineCode",{parentName:"h3"},"onPointerEnter()")),Object(a.b)("p",null,"A whisper that is sent to a bot when the mouse cursor starts to hover over it."),Object(a.b)("h4",{id:"arguments-5"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  context: string\n};\n")),Object(a.b)("h3",{id:"onpointerexit"},Object(a.b)("inlineCode",{parentName:"h3"},"onPointerExit()")),Object(a.b)("p",null,"A whisper that is sent to a bot when the mouse cursor stops hovering over it."),Object(a.b)("h4",{id:"arguments-6"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  context: string\n};\n")),Object(a.b)("h3",{id:"onpointerdown"},Object(a.b)("inlineCode",{parentName:"h3"},"onPointerDown()")),Object(a.b)("p",null,"A whipser that is sent to a bot when the user starts clicking it."),Object(a.b)("h4",{id:"arguments-7"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  context: string\n};\n")),Object(a.b)("h3",{id:"onpointerup"},Object(a.b)("inlineCode",{parentName:"h3"},"onPointerUp()")),Object(a.b)("p",null,"A whisper that is sent to a bot when the user stops clicking it."),Object(a.b)("h4",{id:"arguments-8"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  context: string\n};\n")),Object(a.b)("h3",{id:"onlisten"},Object(a.b)("inlineCode",{parentName:"h3"},"onListen()")),Object(a.b)("p",null,"A whisper that is sent whenever a whisper or shout is sent to this bot."),Object(a.b)("h4",{id:"arguments-9"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  name: string,\n  that: any,\n  targets: Bot[],\n  listeners: Bot[],\n  responses: any[]\n};\n")),Object(a.b)("h2",{id:"shout-tags"},"Shout Tags"),Object(a.b)("p",null,"Shouts are events which are sent to all bots."),Object(a.b)("h3",{id:"onanybotclicked"},Object(a.b)("inlineCode",{parentName:"h3"},"onAnyBotClicked()")),Object(a.b)("p",null,"A shout that is sent to all bots when a bot is clicked."),Object(a.b)("h4",{id:"arguments-10"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  bot: Bot,\n  face: 'left' | 'right' | 'front' | 'back' | 'top' | 'bottom',\n  context: string\n};\n")),Object(a.b)("h3",{id:"ongridclick"},Object(a.b)("inlineCode",{parentName:"h3"},"onGridClick()")),Object(a.b)("p",null,"A shout that is sent to all bots when the user clicks on empty space."),Object(a.b)("h4",{id:"arguments-11"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  position: {\n    x: number,\n    y: number\n  },\n  context: string\n};\n")),Object(a.b)("h3",{id:"onplayerentercontext"},Object(a.b)("inlineCode",{parentName:"h3"},"onPlayerEnterContext()")),Object(a.b)("p",null,"A shout that is sent to all bots when the player enters a context."),Object(a.b)("h4",{id:"arguments-12"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  context: string\n};\n")),Object(a.b)("h3",{id:"onbarcodescanned"},Object(a.b)("inlineCode",{parentName:"h3"},"onBarcodeScanned()")),Object(a.b)("p",null,"A shout that is sent to all bots when the player scans a barcode."),Object(a.b)("h4",{id:"arguments-13"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: string;\n")),Object(a.b)("h3",{id:"onbarcodescanneropened"},Object(a.b)("inlineCode",{parentName:"h3"},"onBarcodeScannerOpened()")),Object(a.b)("p",null,"A shout that is sent to all bots when the barcode scanner is opened."),Object(a.b)("h3",{id:"onbarcodescannerclosed"},Object(a.b)("inlineCode",{parentName:"h3"},"onBarcodeScannerClosed()")),Object(a.b)("p",null,"A shout that is sent to all bots when the barcode scanner is closed."),Object(a.b)("h3",{id:"onqrcodescanned"},Object(a.b)("inlineCode",{parentName:"h3"},"onQRCodeScanned()")),Object(a.b)("p",null,"A shout that is sent to all bots when a QR Code is scanned."),Object(a.b)("h4",{id:"arguments-14"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: string;\n")),Object(a.b)("h3",{id:"onqrcodescanneropened"},Object(a.b)("inlineCode",{parentName:"h3"},"onQRCodeScannerOpened()")),Object(a.b)("p",null,"A shout that is sent to all bots when the QR Code Scanner is opened."),Object(a.b)("h3",{id:"onqrcodescannerclosed"},Object(a.b)("inlineCode",{parentName:"h3"},"onQRCodeScannerClosed()")),Object(a.b)("p",null,"A shout that is sent to all bots when the QR Code Scanner is closed."),Object(a.b)("h3",{id:"ontapcode"},Object(a.b)("inlineCode",{parentName:"h3"},"onTapCode()")),Object(a.b)("p",null,"A shout that is sent to all bots whenever a 4-digit tap code is entered."),Object(a.b)("h4",{id:"arguments-15"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: string;\n")),Object(a.b)("h3",{id:"onkeydown"},Object(a.b)("inlineCode",{parentName:"h3"},"onKeyDown()")),Object(a.b)("p",null,"A shout that is sent to all bots whenever the user starts pressing a key."),Object(a.b)("h4",{id:"arguments-16"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  keys: string[]\n};\n")),Object(a.b)("h3",{id:"onkeyup"},Object(a.b)("inlineCode",{parentName:"h3"},"onKeyUp()")),Object(a.b)("p",null,"A shout that is sent to all bots whenever the user stops pressing a key."),Object(a.b)("h4",{id:"arguments-17"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  keys: string[]\n};\n")),Object(a.b)("h3",{id:"onchannelsubscribed"},Object(a.b)("inlineCode",{parentName:"h3"},"onChannelSubscribed()")),Object(a.b)("p",null,"A shout that is sent when a channel is loaded.\nSent to every channel that is loaded."),Object(a.b)("h4",{id:"arguments-18"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  channel: string\n};\n")),Object(a.b)("h3",{id:"onchannelunsubscribed"},Object(a.b)("inlineCode",{parentName:"h3"},"onChannelUnsubscribed()")),Object(a.b)("p",null,"A shout that is sent when a channel is unloaded.\nSent to every channel that is loaded."),Object(a.b)("h4",{id:"arguments-19"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  channel: string\n};\n")),Object(a.b)("h3",{id:"onchannelstreaming"},Object(a.b)("inlineCode",{parentName:"h3"},"onChannelStreaming()")),Object(a.b)("p",null,"A shout that is sent when a channel is connected and fully synced.\nSent to every channel that is loaded."),Object(a.b)("h4",{id:"arguments-20"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  channel: string\n};\n")),Object(a.b)("h3",{id:"onchannelstreamlost"},Object(a.b)("inlineCode",{parentName:"h3"},"onChannelStreamLost()")),Object(a.b)("p",null,"A shout that is sent when a channel has been temporarily disconnected from the server.\nSent to every channel that is loaded."),Object(a.b)("h4",{id:"arguments-21"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  channel: string\n};\n")),Object(a.b)("h3",{id:"onanylisten"},Object(a.b)("inlineCode",{parentName:"h3"},"onAnyListen()")),Object(a.b)("p",null,"A shout that is sent whenever a whisper or shout is issued."),Object(a.b)("h4",{id:"arguments-22"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  name: string,\n  that: any,\n  targets: Bot[],\n  listeners: Bot[],\n  responses: any[]\n};\n")),Object(a.b)("h3",{id:"onwebhook"},Object(a.b)("inlineCode",{parentName:"h3"},"onWebhook()")),Object(a.b)("p",null,"A shout that is sent whenever a webhook is received."),Object(a.b)("h4",{id:"arguments-23"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  method: string,\n  url: string,\n  data: any,\n  headers: any\n};\n")),Object(a.b)("h3",{id:"onanyaction"},Object(a.b)("inlineCode",{parentName:"h3"},"onAnyAction()")),Object(a.b)("p",null,"A whisper that is sent to the config bot whenever an action happens."),Object(a.b)("h4",{id:"arguments-24"},"Arguments:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-typescript"}),"let that: {\n  action: any\n};\n")))}s.isMDXComponent=!0}}]);