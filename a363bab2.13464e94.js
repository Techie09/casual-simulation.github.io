(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{131:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return r})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return p}));var n=a(1),o=a(9),b=(a(0),a(157)),i=a(118),l={id:"actions",title:"Actions",sidebar_label:"Actions",description:"Actions affect the data in bots and also do things to the outside world."},r={id:"actions",title:"Actions",description:"Actions affect the data in bots and also do things to the outside world.",source:"@site/docs/actions.mdx",permalink:"/docs/actions",sidebar_label:"Actions",sidebar:"docs",previous:{title:"Listen Tags",permalink:"/docs/listen-tags"}},s=[{value:"Data Actions",id:"data-actions",children:[{value:"<code>create(...mods)</code>",id:"createmods",children:[]},{value:"<code>destroy(bot)</code>",id:"destroybot",children:[]},{value:"<code>applyMod(bot, ...mods)</code>",id:"applymodbot-mods",children:[]},{value:"<code>changeState(bot, stateName, groupName?)</code>",id:"changestatebot-statename-groupname",children:[]},{value:"<code>getBots(..filters)</code>",id:"getbotsfilters",children:[]},{value:"<code>getBots(tag, value?)</code>",id:"getbotstag-value",children:[]},{value:"<code>getBot(...filters)</code>",id:"getbotfilters",children:[]},{value:"<code>getBot(tag, filter?)</code>",id:"getbottag-filter",children:[]},{value:"<code>getID(bot)</code>",id:"getidbot",children:[]},{value:"<code>getJSON(data)</code>",id:"getjsondata",children:[]},{value:"<code>getMod(bot)</code>",id:"getmodbot",children:[]}]},{value:"Bot Filters",id:"bot-filters",children:[{value:"<code>byTag(tag, value?)</code>",id:"bytagtag-value",children:[]},{value:"<code>inDimension(dimension)</code>",id:"indimensiondimension",children:[]},{value:"<code>atPosition(dimension, x, y)</code>",id:"atpositiondimension-x-y",children:[]},{value:"<code>inStack(bot, dimension)</code>",id:"instackbot-dimension",children:[]},{value:"<code>byCreator(bot)</code>",id:"bycreatorbot",children:[]},{value:"<code>bySpace(space)</code>",id:"byspacespace",children:[]}]},{value:"Event Actions",id:"event-actions",children:[{value:"<code>shout(name, arg?)</code>",id:"shoutname-arg",children:[]},{value:"<code>whisper(bot, name, arg?)</code>",id:"whisperbot-name-arg",children:[]}]},{value:"Player Actions",id:"player-actions",children:[{value:"<code>player.downloadBots(bots, filename)</code>",id:"playerdownloadbotsbots-filename",children:[]},{value:"<code>player.run(script)</code>",id:"playerrunscript",children:[]},{value:"<code>player.replaceDragBot(botOrMod)</code>",id:"playerreplacedragbotbotormod",children:[]},{value:"<code>player.showChat(placeholder?)</code>",id:"playershowchatplaceholder",children:[]},{value:"<code>player.showChat(options)</code>",id:"playershowchatoptions",children:[]},{value:"<code>player.hideChat()</code>",id:"playerhidechat",children:[]},{value:"<code>player.toast(message, duration?)</code>",id:"playertoastmessage-duration",children:[]},{value:"<code>player.setClipboard(text)</code>",id:"playersetclipboardtext",children:[]},{value:"<code>player.showUploadAuxFile()</code>",id:"playershowuploadauxfile",children:[]},{value:"<code>player.downloadUniverse()</code>",id:"playerdownloaduniverse",children:[]},{value:"<code>player.enableAR()</code>",id:"playerenablear",children:[]},{value:"<code>player.disableAR()</code>",id:"playerdisablear",children:[]},{value:"<code>player.enableVR()</code>",id:"playerenablevr",children:[]},{value:"<code>player.disableVR()</code>",id:"playerdisablevr",children:[]},{value:"<code>player.getPortalDimension(portal)</code>",id:"playergetportaldimensionportal",children:[]},{value:"<code>player.getDimensionalDepth(dimension)</code>",id:"playergetdimensionaldepthdimension",children:[]},{value:"<code>player.inSheet()</code>",id:"playerinsheet",children:[]},{value:"<code>player.version()</code>",id:"playerversion",children:[]},{value:"<code>player.device()</code>",id:"playerdevice",children:[]}]},{value:"Server Actions",id:"server-actions",children:[{value:"<code>server.setupUniverse(universe, botOrMod?)</code>",id:"serversetupuniverseuniverse-botormod",children:[]},{value:"<code>server.browseHistory()</code>",id:"serverbrowsehistory",children:[]},{value:"<code>server.markHistory(options)</code>",id:"servermarkhistoryoptions",children:[]},{value:"<code>server.restoreHistoryMark(mark)</code>",id:"serverrestorehistorymarkmark",children:[]},{value:"<code>server.restoreHistoryMarkToUniverse(mark, universe)</code>",id:"serverrestorehistorymarktouniversemark-universe",children:[]}]}],c={rightToc:s};function p(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h2",{id:"data-actions"},"Data Actions"),Object(b.b)("h3",{id:"createmods"},Object(b.b)("inlineCode",{parentName:"h3"},"create(...mods)")),Object(b.b)(i.FunctionCode,{name:"create",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Creates a new bot or combination of bots with the given mods. Also triggers ",Object(b.b)(i.TagLink,{tag:"@onCreate",mdxType:"TagLink"})," on all the created bots.\nBy default, bots are created with a unique ",Object(b.b)(i.TagLink,{tag:"id",mdxType:"TagLink"}),", ",Object(b.b)(i.TagLink,{tag:"auxCreator",mdxType:"TagLink"})," set to the current ",Object(b.b)("inlineCode",{parentName:"p"},"bot.id"),", and ",Object(b.b)(i.TagLink,{tag:"space",mdxType:"TagLink"})," set to ",Object(b.b)("inlineCode",{parentName:"p"},'"shared"'),"."),Object(b.b)("p",null,"If ",Object(b.b)(i.TagLink,{tag:"auxCreator",mdxType:"TagLink"})," references a non-existent bot or a bot with a different ",Object(b.b)(i.TagLink,{tag:"space",mdxType:"TagLink"})," than the created bot, then ",Object(b.b)(i.TagLink,{tag:"auxCreator",mdxType:"TagLink"})," will be set to ",Object(b.b)("inlineCode",{parentName:"p"},"null"),"."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Each parameter")," is a mod that should be applied to the new bot(s).\nIf no parameters are specified, then the new bot will have its ",Object(b.b)(i.TagLink,{tag:"auxCreator",mdxType:"TagLink"})," set to ",Object(b.b)("inlineCode",{parentName:"p"},"bot.id")," and ",Object(b.b)(i.TagLink,{tag:"space",mdxType:"TagLink"})," set to ",Object(b.b)("inlineCode",{parentName:"p"},'"shared"'),".\nIf an array of mods is used for a parameter, then one bot will be created for ",Object(b.b)("em",{parentName:"p"},"each unique combination of mods"),"."),Object(b.b)("h4",{id:"examples"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Create an empty bot:")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"let myNewBot = create();\n")),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Create a red bot:")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let myRedBot = create({\n    auxColor: "red"\n});\n')),Object(b.b)("ol",{start:3},Object(b.b)("li",{parentName:"ol"},"Create a parent and a child bot:")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let myParentBot = create({\n    auxCreator: null,\n    auxLabel: "Parent"\n});\nlet myChildBot = create({\n    auxCreator: getID(myParentBot),\n    auxLabel: "Child"\n});\n')),Object(b.b)("ol",{start:4},Object(b.b)("li",{parentName:"ol"},"Create a empty bot in the ",Object(b.b)("inlineCode",{parentName:"li"},'"tempLocal"')," space:")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let myBot = create({ space: "tempLocal" });\n')),Object(b.b)("ol",{start:5},Object(b.b)("li",{parentName:"ol"},"Create a bot from multiple mods:")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// myBot is placed in the "myDimension" dimension and is colored green\nlet myBot = create({ myDimension: true }, {\n    auxColor: "green"\n});\n')),Object(b.b)("ol",{start:6},Object(b.b)("li",{parentName:"ol"},"Create a red bot and a blue bot:")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let [myRedBot, myBlueBot] = create({ auxCreator: null}, [\n    {\n        "auxColor": "red"\n    },\n    {\n        "auxColor": "blue"\n    }\n]);\n')),Object(b.b)("h3",{id:"destroybot"},Object(b.b)("inlineCode",{parentName:"h3"},"destroy(bot)")),Object(b.b)(i.FunctionCode,{name:"destroy",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Removes the given bot, list of bots, or bot by ",Object(b.b)(i.TagLink,{tag:"id",mdxType:"TagLink"})," and triggers ",Object(b.b)(i.TagLink,{tag:"@onDestroy",mdxType:"TagLink"})," for each of the destroyed bots."),Object(b.b)("p",null,"Note that only destroyable bots will be destroyed.\nBots that have ",Object(b.b)(i.TagLink,{tag:"auxDestroyable",mdxType:"TagLink"})," set to ",Object(b.b)("inlineCode",{parentName:"p"},"false")," will not be destroyed."),Object(b.b)("p",null,"Also note that all bots that have ",Object(b.b)(i.TagLink,{tag:"auxCreator",mdxType:"TagLink"})," set to the ",Object(b.b)(i.TagLink,{tag:"id",mdxType:"TagLink"})," of a destroyed bot will also be destroyed (unless they are not destroyable).\nThis happens recursively until there are no more bots to destroy."),Object(b.b)("h4",{id:"examples-1"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Destroying a single bot:")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// Destroy a single bot that has #name set to "bob"\ndestroy(getBot("#name", "bob"));\n')),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Destroying a list of bots:")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// Destroy all the bots that have #auxColor set to "red"\ndestroy(getBots("#auxColor", "red"));\n')),Object(b.b)("ol",{start:3},Object(b.b)("li",{parentName:"ol"},"Destroying a bot by its id")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// Destroy the bot with the #id: "config"\ndestroy("config");\n')),Object(b.b)("h3",{id:"applymodbot-mods"},Object(b.b)("inlineCode",{parentName:"h3"},"applyMod(bot, ...mods)")),Object(b.b)(i.FunctionCode,{name:"applyMod",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Applies the given mods to the given bot."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the bot that the mods should be applied to."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"other parameters")," are the mods that should be applied to the bot. If two mods have the same tag, then the mod that is last in the list will win."),Object(b.b)("h4",{id:"examples-2"},"Examples"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},'Set the "test" tag and "name" tag on a bot.')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'applyMod(bot, {\n    test: true,\n    name: "bob"\n});\n')),Object(b.b)("h3",{id:"changestatebot-statename-groupname"},Object(b.b)("inlineCode",{parentName:"h3"},"changeState(bot, stateName, groupName?)")),Object(b.b)(i.FunctionCode,{name:"changeState",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Changes the state that the given bot occupies in the given group.\nIf the state was changed, then the ",Object(b.b)(i.TagLink,{tag:"@[groupName][stateName]OnExit",mdxType:"TagLink"})," and ",Object(b.b)(i.TagLink,{tag:"@[groupName][stateName]OnEnter",mdxType:"TagLink"})," whispers are sent to the ",Object(b.b)("inlineCode",{parentName:"p"},"bot"),"."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the bot whose state should be changed."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"second parameter")," is the value that should be set on the bot."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"third parameter")," is the name of the tag that should be changed on the bot. If not specified, then the ",Object(b.b)("inlineCode",{parentName:"p"},"#state")," tag will be used."),Object(b.b)("h4",{id:"examples-3"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Change the ",Object(b.b)("inlineCode",{parentName:"li"},"#state"),' of the bot to "Running".')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// Triggers @stateRunningOnEnter\nchangeState(bot, "Running");\n')),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Change the ",Object(b.b)("inlineCode",{parentName:"li"},"#playbackState"),' of the bot to "Playing".')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// Triggers @playbackStatePlayingOnEnter\nchangeState(bot, "Playing", "playbackState");\n')),Object(b.b)("h3",{id:"getbotsfilters"},Object(b.b)("inlineCode",{parentName:"h3"},"getBots(..filters)")),Object(b.b)(i.FunctionCode,{name:"getBots",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Gets an array of bots that match all of the given filter(s). The returned array is sorted alphabetically by the ",Object(b.b)(i.TagLink,{tag:"id",mdxType:"TagLink"})," tag."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Each parameter")," is a ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"#bot-filters"}),"bot filter"),". If no filters are specified, then all bots in the universe are returned.\nIf multiple filters are specified, then only the bots that match all of the filters are returned."),Object(b.b)("h4",{id:"examples-4"},"Examples"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},'Find all bots with the "test" tag.')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(byTag("#test"));\n')),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Find all bots with ",Object(b.b)("inlineCode",{parentName:"li"},"#name"),' set to "bob" ',Object(b.b)("em",{parentName:"li"},"and"),' in the "people" dimension.')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(byTag("#name", "bob"), inDimension("people"));\n')),Object(b.b)("h3",{id:"getbotstag-value"},Object(b.b)("inlineCode",{parentName:"h3"},"getBots(tag, value?)")),Object(b.b)(i.FunctionCode,{name:"getBots",overload:1,mdxType:"FunctionCode"}),Object(b.b)("p",null,"Gets an array of bots that match the given tag and value. The returned array is sorted alphabetically by the ",Object(b.b)(i.TagLink,{tag:"id",mdxType:"TagLink"})," tag."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the name of the tag. Bots that have this tag will be included as long as they also match the second parameter."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"second parameter")," is the value the tag should match. If not specified, then all bots with the tag will be included.\nIf specified, then only bots that have the same tag and value will be included. If you specify a function as the value, then it will be used to match tag values."),Object(b.b)(i.Alert,{type:"info",mdxType:"Alert"},"This function behaves exactly like ",Object(b.b)(i.ActionLink,{action:"getBots(...filters)",mdxType:"ActionLink"})," with ",Object(b.b)(i.ActionLink,{action:"byTag(tag, value?)",mdxType:"ActionLink"})),Object(b.b)("h4",{id:"examples-5"},"Examples"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Find all the bots with ",Object(b.b)("inlineCode",{parentName:"li"},"#name"),' set to "bob".')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots("#name", "bob");\n')),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Find all bots with a height larger than 2.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots("#height", height => height > 2);\n')),Object(b.b)("ol",{start:3},Object(b.b)("li",{parentName:"ol"},'Find all bots with the "test" tag.')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots("#test");\n')),Object(b.b)("h3",{id:"getbotfilters"},Object(b.b)("inlineCode",{parentName:"h3"},"getBot(...filters)")),Object(b.b)(i.FunctionCode,{name:"getBot",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Get the first bot that matches all of the given filter(s). If multiple bots match the given filter(s), then bots are sorted alphabetically by the ",Object(b.b)(i.TagLink,{tag:"id",mdxType:"TagLink"})," tag and the first one is returned. If no bots match the given filter(s), then ",Object(b.b)("inlineCode",{parentName:"p"},"undefined")," is returned."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Each parameter")," is a ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"#bot-filters"}),"bot filter"),". If no filters are specified, then the first bot in the universe is returned.\nIf multiple filters are specified, then the first bot that matches all of the filters is returned."),Object(b.b)("h4",{id:"examples-6"},"Examples"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},'Find a bot with the "test" tag.')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let foundBot = getBot(byTag("#test"));\n')),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Find a bot with ",Object(b.b)("inlineCode",{parentName:"li"},"#name"),' set to "bob" ',Object(b.b)("em",{parentName:"li"},"and"),' in the "people" dimension.')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let foundBot = getBot(byTag("#name", "bob"), inDimension("people"));\n')),Object(b.b)("h3",{id:"getbottag-filter"},Object(b.b)("inlineCode",{parentName:"h3"},"getBot(tag, filter?)")),Object(b.b)(i.FunctionCode,{name:"getBot",overload:1,mdxType:"FunctionCode"}),Object(b.b)("p",null,"Gets the first bot that matches the given tag and value. If multiple bots match the given tag and value, then bots are sorted alphabetically by the ",Object(b.b)(i.TagLink,{tag:"id",mdxType:"TagLink"})," tag and the first one is returned. If no bots match the given tag and value, then ",Object(b.b)("inlineCode",{parentName:"p"},"undefined")," is returned."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the name of the tag to search for."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"second parameter")," is the value the tag should match. If not specified, then the first bot with the tag will be returned.\nIf specified, then the first bot that has the same tag and value will be returned. If you specify a function as the value, then it will be used to match tag values."),Object(b.b)(i.Alert,{type:"info",mdxType:"Alert"},"This function behaves exactly like ",Object(b.b)(i.ActionLink,{action:"getBot(...filters)",mdxType:"ActionLink"})," with ",Object(b.b)(i.ActionLink,{action:"byTag(tag, value?)",mdxType:"ActionLink"})),Object(b.b)("h4",{id:"examples-7"},"Examples"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Find the first bot with ",Object(b.b)("inlineCode",{parentName:"li"},"#name"),' set to "bob".')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let foundBot = getBot("#name", "bob");\n')),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Find the first bot with a height larger than 2.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let foundBot = getBot("#height", height => height > 2);\n')),Object(b.b)("ol",{start:3},Object(b.b)("li",{parentName:"ol"},'Find the first bot with the "test" tag.')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let foundBot = getBot("#test");\n')),Object(b.b)("h3",{id:"getidbot"},Object(b.b)("inlineCode",{parentName:"h3"},"getID(bot)")),Object(b.b)(i.FunctionCode,{name:"getID",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Gets the ID of the given bot."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the bot whose ID should be retrieved.\nIf given a bot ID, then it will be returned. If given ",Object(b.b)("inlineCode",{parentName:"p"},"null")," or something that is not a bot, then ",Object(b.b)("inlineCode",{parentName:"p"},"null")," will be returned."),Object(b.b)("h4",{id:"examples-8"},"Examples"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Get the ID of the current bot.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"let id = getID(bot);\n")),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Get the ID of a bot with ",Object(b.b)("inlineCode",{parentName:"li"},"#name"),' set to "bob".')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let id = getID(getBot("#name", "bob"));\n')),Object(b.b)("h3",{id:"getjsondata"},Object(b.b)("inlineCode",{parentName:"h3"},"getJSON(data)")),Object(b.b)(i.FunctionCode,{name:"getJSON",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Gets the ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/JSON"}),"JSON")," representation of the given data."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the data that should be ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Serialization"}),"cloned")," into the JSON format.\nIf given a bot, then the returned JSON will be able to be able to be converted back into a mod via ",Object(b.b)(i.ActionLink,{action:"getMod(bot)",mdxType:"ActionLink"}),"."),Object(b.b)("h4",{id:"examples-9"},"Examples"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Store a copy of a bot in a tag.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bob = getBot("#name", "bob");\ntags.savedBot = getJSON(bob);\n')),Object(b.b)("h3",{id:"getmodbot"},Object(b.b)("inlineCode",{parentName:"h3"},"getMod(bot)")),Object(b.b)(i.FunctionCode,{name:"getMod",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Gets a mod for the given bot and list of tags. The returned mod will only contain tags that are contained in the given list."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the bot or JSON string that should be cloned into a mod."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"other parameters")," are the tags that should be included in the returned mod.\nIf no other parameters are specified, then all tags are included.\nIf a parameter is a RegEx (",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"}),"Regular Expression"),"), then it will include all the tags that match the expression."),Object(b.b)("h4",{id:"examples-10"},"Examples"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Get a mod with the current bot's tags.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"let mod = getMod(bot);\n")),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Get a mod with only the ",Object(b.b)(i.TagLink,{tag:"auxColor",mdxType:"TagLink"})," and ",Object(b.b)(i.TagLink,{tag:"auxLabel",mdxType:"TagLink"})," tags.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let mod = getMod(bot, "auxColor", "auxLabel");\n')),Object(b.b)("ol",{start:3},Object(b.b)("li",{parentName:"ol"},'Get a mod with every tag that starts with "on".')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"let mod = getMod(bot, /^on/g);\n")),Object(b.b)("h2",{id:"bot-filters"},"Bot Filters"),Object(b.b)("h3",{id:"bytagtag-value"},Object(b.b)("inlineCode",{parentName:"h3"},"byTag(tag, value?)")),Object(b.b)(i.FunctionCode,{name:"byTag",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Creates a bot filter that includes bots that have the given tag that matches the given value."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the name of the tag. Bots that have this tag will be included as long as they also match the second parameter."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"second parameter")," is the value that the tag should match. If not specified, then all bots with the tag will be included.\nIf specified, then only bots that have the same tag value will be included. If you specify a function as the value, then it will be used to match tag values."),Object(b.b)("h4",{id:"examples-11"},"Examples"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Find all the bots with ",Object(b.b)("inlineCode",{parentName:"li"},"#name"),' set to "bob".')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(byTag("#name", "bob"));\n')),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Find all bots with a height larger than 2.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(byTag("#height", height => height > 2));\n')),Object(b.b)("ol",{start:3},Object(b.b)("li",{parentName:"ol"},'Find all bots with the "test" tag.')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(byTag("#test"));\n')),Object(b.b)("h3",{id:"indimensiondimension"},Object(b.b)("inlineCode",{parentName:"h3"},"inDimension(dimension)")),Object(b.b)(i.FunctionCode,{name:"inDimension",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Creates a bot filter that includes bots that are in the given dimension. That is, they have the given tag set to ",Object(b.b)("inlineCode",{parentName:"p"},"true"),"."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the name of the dimension."),Object(b.b)(i.Alert,{type:"info",mdxType:"Alert"},"This function behaves exactly like ",Object(b.b)(i.ActionLink,{action:"byTag(tag, value?)",mdxType:"ActionLink"})," with the `value` parameter set to `true`."),Object(b.b)("h4",{id:"examples-12"},"Examples"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},'Find all the bots in the "test" dimension.')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(inDimension("test"));\n')),Object(b.b)("h3",{id:"atpositiondimension-x-y"},Object(b.b)("inlineCode",{parentName:"h3"},"atPosition(dimension, x, y)")),Object(b.b)("p",null,"Creates a bot filter that includes bots that are in the given dimension and at the given X and Y position."),Object(b.b)("p",null,"When this filter is used with ",Object(b.b)(i.ActionLink,{action:"getBots(...filters)",mdxType:"ActionLink"}),", the returned bots are sorted in the same order that they are stacked.\nThis means that the first bot in the array is at the bottom of the stack and the last bot is at the top of the stack (assuming they're stackable)."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the name of the dimension."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"second parameter")," is the X position. That is, the left-right position of the bots in the dimension."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"third parameter")," is the Y position. That is, the forward-backward position of the bots in the dimension."),Object(b.b)("h4",{id:"examples-13"},"Examples"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},'Find all the bots at (1, 2) in the "test" dimension.')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(atPosition("test", 1, 2));\n')),Object(b.b)("h3",{id:"instackbot-dimension"},Object(b.b)("inlineCode",{parentName:"h3"},"inStack(bot, dimension)")),Object(b.b)("p",null,"Creates a bot filter that includes bots in the same stack as the given bot. The given bot will always be included by this filter as long the given bot is in the given dimension."),Object(b.b)("p",null,"When this filter is used with ",Object(b.b)(i.ActionLink,{action:"getBots(...filters)",mdxType:"ActionLink"}),", the returned bots are sorted in the same order that they are stacked.\nThis means that the first bot in the array is at the bottom of the stack and the last bot is at the top of the stack (assuming they're stackable)."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the bot that other bots should be in the same stack with."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"second parameter")," is the name of the dimension."),Object(b.b)("h4",{id:"examples-14"},"Examples"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Find all bots in the same stack as ",Object(b.b)("inlineCode",{parentName:"li"},"this"),' in the "test" dimension.')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(inStack(this, "test"));\n')),Object(b.b)("h3",{id:"bycreatorbot"},Object(b.b)("inlineCode",{parentName:"h3"},"byCreator(bot)")),Object(b.b)(i.FunctionCode,{name:"byCreator",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Creates a bot filter that includes bots created by the given bot. That is, they have ",Object(b.b)(i.TagLink,{tag:"auxCreator",mdxType:"TagLink"})," set to the ",Object(b.b)(i.TagLink,{tag:"id",mdxType:"TagLink"})," of the given bot."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the bot that created the other bots."),Object(b.b)(i.Alert,{type:"info",mdxType:"Alert"},"This function behaves exactly like ",Object(b.b)(i.NormalCode,{mdxType:"NormalCode"},'byTag("auxCreator", getID(bot))'),"."),Object(b.b)("h4",{id:"examples-15"},"Examples"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Find all the bots created by this bot.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"let bots = getBots(byCreator(this));\n")),Object(b.b)("h3",{id:"byspacespace"},Object(b.b)("inlineCode",{parentName:"h3"},"bySpace(space)")),Object(b.b)(i.FunctionCode,{name:"bySpace",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Creates a bot filter that includes bots in the given space. That is, they have ",Object(b.b)(i.TagLink,{tag:"space",mdxType:"TagLink"})," set to the given value."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the space that the bots are in."),Object(b.b)(i.Alert,{type:"info",mdxType:"Alert"},"This function behaves exactly like ",Object(b.b)(i.NormalCode,{mdxType:"NormalCode"},'byTag("space", space)'),"."),Object(b.b)("h4",{id:"examples-16"},"Examples"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Find all bots in the ",Object(b.b)("inlineCode",{parentName:"li"},'"tempLocal"')," space.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots(bySpace("tempLocal"));\n')),Object(b.b)("h2",{id:"event-actions"},"Event Actions"),Object(b.b)("h3",{id:"shoutname-arg"},Object(b.b)("inlineCode",{parentName:"h3"},"shout(name, arg?)")),Object(b.b)(i.FunctionCode,{name:"shout",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Sends a shout to all bots that are ",Object(b.b)(i.TagLink,{tag:"auxListening",mdxType:"TagLink"})," and have a ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"docs/listen-tags"}),"listen tag")," for the specified name. Optionally includes a custom ",Object(b.b)("inlineCode",{parentName:"p"},"that")," argument.\nAlso triggers ",Object(b.b)(i.TagLink,{tag:"@onListen",mdxType:"TagLink"})," and ",Object(b.b)(i.TagLink,{tag:"@onAnyListen",mdxType:"TagLink"}),"."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the name of the shout. e.g. Using ",Object(b.b)("inlineCode",{parentName:"p"},'"onClick"')," for the name will trigger all ",Object(b.b)(i.TagLink,{tag:"@onClick",mdxType:"TagLink"})," listeners."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"second parameter")," is the ",Object(b.b)("inlineCode",{parentName:"p"},"that")," argument to send with the shout. You do not need to specify this parameter if you do not want to."),Object(b.b)("h4",{id:"examples-17"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Send a ",Object(b.b)("inlineCode",{parentName:"li"},"@reset")," event to all bots:")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'shout("reset");\n')),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Send a ",Object(b.b)("inlineCode",{parentName:"li"},"@hello")," event with your name:")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'shout("hello", "Bob");\n')),Object(b.b)("h3",{id:"whisperbot-name-arg"},Object(b.b)("inlineCode",{parentName:"h3"},"whisper(bot, name, arg?)")),Object(b.b)(i.FunctionCode,{name:"whisper",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Sends a whisper to the specified bot(s) that are ",Object(b.b)(i.TagLink,{tag:"auxListening",mdxType:"TagLink"})," and have a ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"docs/listen-tags"}),"listen tag")," for the given name. Optionally includes a custom ",Object(b.b)("inlineCode",{parentName:"p"},"that")," argument.\nAlso triggers ",Object(b.b)(i.TagLink,{tag:"@onListen",mdxType:"TagLink"})," and ",Object(b.b)(i.TagLink,{tag:"@onAnyListen",mdxType:"TagLink"}),"."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the bot, array of bots, bot ",Object(b.b)(i.TagLink,{tag:"id",mdxType:"TagLink"}),", or array of bot ",Object(b.b)(i.TagLink,{tag:"id",mdxType:"TagLink"})," that the whisper should be sent to."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"second parameter")," is the name of the whisper. e.g. Using ",Object(b.b)("inlineCode",{parentName:"p"},'"onClick"')," for the name will trigger the ",Object(b.b)(i.TagLink,{tag:"@onClick",mdxType:"TagLink"})," listener for the specified bots."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"third parameter")," is the ",Object(b.b)("inlineCode",{parentName:"p"},"that")," argument to send with the shout. You do not need to specify this parameter if you do not want to."),Object(b.b)("h4",{id:"examples-18"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Send a ",Object(b.b)("inlineCode",{parentName:"li"},"@reset")," event to all bots named ",Object(b.b)("inlineCode",{parentName:"li"},'"Bob"'),":")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'let bots = getBots("#name", "Bob");\nwhisper(bots, "reset");\n')),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Send a ",Object(b.b)("inlineCode",{parentName:"li"},"@setColor")," event to ourself:")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'whisper(this, "setColor", "red");\n')),Object(b.b)("h2",{id:"player-actions"},"Player Actions"),Object(b.b)("h3",{id:"playerdownloadbotsbots-filename"},Object(b.b)("inlineCode",{parentName:"h3"},"player.downloadBots(bots, filename)")),Object(b.b)(i.FunctionCode,{name:"downloadBots",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Downloads the given array of bots as a ",Object(b.b)("inlineCode",{parentName:"p"},".aux")," file with the given filename.\nUseful for quickly backing up a set of bots."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the array of bots that should be downloaded."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"second parameter")," is the name of the file that the bots should be stored in.\n",Object(b.b)("inlineCode",{parentName:"p"},".aux")," will automatically be added to the end of the filename."),Object(b.b)("h4",{id:"examples-19"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},'Download all the bots in the "abc" dimension as "abcBots.aux".')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.downloadBots(getBots(inDimension("abc")), "abcBots");\n')),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},'Download the current bot as "currentBot.aux".')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.downloadBots([bot], "currentBot");\n')),Object(b.b)("h3",{id:"playerrunscript"},Object(b.b)("inlineCode",{parentName:"h3"},"player.run(script)")),Object(b.b)(i.FunctionCode,{name:"run",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Runs the given script.\nThe script will be executed in a separate environment with no ",Object(b.b)("inlineCode",{parentName:"p"},"bot"),", ",Object(b.b)("inlineCode",{parentName:"p"},"tags"),", ",Object(b.b)("inlineCode",{parentName:"p"},"this"),", ",Object(b.b)("inlineCode",{parentName:"p"},"data"),", and ",Object(b.b)("inlineCode",{parentName:"p"},"that")," variables.\nThis means that you need to use the ",Object(b.b)(i.ActionLink,{action:"getBot(...filters)",mdxType:"ActionLink"})," or ",Object(b.b)(i.ActionLink,{action:"getBots(...filters)",mdxType:"ActionLink"})," functions to read bot data."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the script that should be executed."),Object(b.b)("h4",{id:"examples-20"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},'Run a script that says "hello".')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.run(\"player.toast('hello');\");\n")),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Run a script from the ",Object(b.b)("inlineCode",{parentName:"li"},"#script")," tag on the current bot.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.run(tags.script);\n")),Object(b.b)("h3",{id:"playerreplacedragbotbotormod"},Object(b.b)("inlineCode",{parentName:"h3"},"player.replaceDragBot(botOrMod)")),Object(b.b)(i.FunctionCode,{name:"replaceDragBot",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Replaces the bot that the user is dragging with the given bot or mod.\nOnly works if called from inside a ",Object(b.b)(i.TagLink,{tag:"@onDrag",mdxType:"TagLink"})," or ",Object(b.b)(i.TagLink,{tag:"@onAnyBotDrag",mdxType:"TagLink"})," listen tag."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the bot or mod that should be dragged.\nIf given a bot, then that bot's ",Object(b.b)(i.TagLink,{tag:"@onDrag",mdxType:"TagLink"})," will be skippped but ",Object(b.b)(i.TagLink,{tag:"@onDrop",mdxType:"TagLink"})," will be called."),Object(b.b)("h4",{id:"examples-21"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Drag a clone of this bot.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"let clone = create(this);\nplayer.replaceDragBot(clone);\n")),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Drag a mod that makes other bots red.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.replaceDragBot({\n    "auxColor": "red"\n});\n')),Object(b.b)("h3",{id:"playershowchatplaceholder"},Object(b.b)("inlineCode",{parentName:"h3"},"player.showChat(placeholder?)")),Object(b.b)(i.FunctionCode,{name:"showChat",mdxType:"FunctionCode"}),Object(b.b)("p",null,'Shows the "chat bar" at the top of the screen in auxPlayer, optionally using the given text as the placeholder.\nTyping in the chat bar will send ',Object(b.b)(i.TagLink,{tag:"@onChatTyping",mdxType:"TagLink"})," shouts and pressing Enter will send a ",Object(b.b)(i.TagLink,{tag:"@onChat",mdxType:"TagLink"})," shout and clear the chat bar."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the text that the chat bar should show as the placeholder."),Object(b.b)("h4",{id:"examples-22"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Show the chat bar.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.showChat();\n")),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Show the chat bar with some placeholder text.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.showChat("hello");\n')),Object(b.b)("h3",{id:"playershowchatoptions"},Object(b.b)("inlineCode",{parentName:"h3"},"player.showChat(options)")),Object(b.b)(i.FunctionCode,{name:"showChat",overload:2,mdxType:"FunctionCode"}),Object(b.b)("p",null,'Shows the "chat bar" at the top of the screen in auxPlayer, using the given options.\nTyping in the chat bar will send ',Object(b.b)(i.TagLink,{tag:"@onChatTyping",mdxType:"TagLink"})," shouts and pressing Enter will send a ",Object(b.b)(i.TagLink,{tag:"@onChat",mdxType:"TagLink"})," shout and clear the chat bar."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is an object with the options that the chat bar should use.\nIt should be an object with the following properties:"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"placeholder")," - The text that should be shown as a placeholder. (optional)"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"prefill")," - The text that should be filled into the chat bar. If the chat bar already has text in it, then setting this property does nothing.")),Object(b.b)("h4",{id:"examples-23"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Show the chat bar with a placeholder.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.showChat({\n    placeholder: "hello"\n});\n')),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Show the chat bar with some prefilled text.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.showChat({\n    prefill: "this is prefilled"\n});\n')),Object(b.b)("ol",{start:3},Object(b.b)("li",{parentName:"ol"},"Show the chat bar with some prefilled text and a placeholder.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.showChat({\n    prefill: "this is prefilled",\n    placeholder: "hello"\n});\n')),Object(b.b)("h3",{id:"playerhidechat"},Object(b.b)("inlineCode",{parentName:"h3"},"player.hideChat()")),Object(b.b)(i.FunctionCode,{name:"hideChat",mdxType:"FunctionCode"}),Object(b.b)("p",null,'Hides the "chat bar" at the top of the screen in auxPlayer.'),Object(b.b)("h4",{id:"examples-24"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Hide the chat bar.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.hideChat();\n")),Object(b.b)("h3",{id:"playertoastmessage-duration"},Object(b.b)("inlineCode",{parentName:"h3"},"player.toast(message, duration?)")),Object(b.b)(i.FunctionCode,{name:"toast",mdxType:"FunctionCode"}),Object(b.b)("p",null,'Shows a temporary "toast" notification to the player at the bottom of the screen with the given message.\nOptionally accepts a duration parameter which is the number of seconds that the message should be on the screen.'),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the text that the toast message should show."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"second parameter")," is optional and is the number of seconds that the message should be on the screen. (Default is 2)"),Object(b.b)("h4",{id:"examples-25"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},'Show a "Hello!" toast message.')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.toast("Hello!");\n')),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Show the player a code for 5 seconds.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.toast("this is the code", 5);\n')),Object(b.b)("h3",{id:"playersetclipboardtext"},Object(b.b)("inlineCode",{parentName:"h3"},"player.setClipboard(text)")),Object(b.b)(i.FunctionCode,{name:"setClipboard",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Copies the given text to the player's clipboard. On Chrome and Firefox, this will act like a ",Object(b.b)("inlineCode",{parentName:"p"},"Ctrl+C"),"/",Object(b.b)("inlineCode",{parentName:"p"},"Cmd+C"),".\nOn Safari and all iOS browsers this will open a popup which prompts the player to copy the text."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the text that should be copied to the player's clipboard."),Object(b.b)("h4",{id:"examples-26"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},'Copy "hello" to the player\'s clipboard.')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'player.setClipboard("hello");\n')),Object(b.b)("h3",{id:"playershowuploadauxfile"},Object(b.b)("inlineCode",{parentName:"h3"},"player.showUploadAuxFile()")),Object(b.b)(i.FunctionCode,{name:"showUploadAuxFile",mdxType:"FunctionCode"}),Object(b.b)("p",null,'Shows the "Upload AUX File" dialog which lets the user select a ',Object(b.b)("inlineCode",{parentName:"p"},".aux")," file to upload to the universe."),Object(b.b)("h4",{id:"examples-27"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},'Show the "Upload AUX File" dialog.')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.showUploadAuxFile();\n")),Object(b.b)("h3",{id:"playerdownloaduniverse"},Object(b.b)("inlineCode",{parentName:"h3"},"player.downloadUniverse()")),Object(b.b)(i.FunctionCode,{name:"downloadUniverse",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Downloads the entire universe into a ",Object(b.b)("inlineCode",{parentName:"p"},".aux")," file on the player's computer.\nThe file will have the same name as the universe."),Object(b.b)("p",null,"Note that this function is almost exactly the same as ",Object(b.b)(i.ActionLink,{action:"player.downloadBots(bots, filename)",mdxType:"ActionLink"}),".\nThe only difference is that all bots are included and the file is named for you automatically."),Object(b.b)("h4",{id:"examples-28"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Download the entire universe.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.downloadUniverse();\n")),Object(b.b)("h3",{id:"playerenablear"},Object(b.b)("inlineCode",{parentName:"h3"},"player.enableAR()")),Object(b.b)(i.FunctionCode,{name:"enableAR",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Enables augmented reality on the device."),Object(b.b)("h4",{id:"examples-29"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Enable AR.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.enableAR();\n")),Object(b.b)("h3",{id:"playerdisablear"},Object(b.b)("inlineCode",{parentName:"h3"},"player.disableAR()")),Object(b.b)(i.FunctionCode,{name:"disableAR",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Disables augmented reality on the device."),Object(b.b)("h4",{id:"examples-30"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Disable AR.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.disableAR();\n")),Object(b.b)("h3",{id:"playerenablevr"},Object(b.b)("inlineCode",{parentName:"h3"},"player.enableVR()")),Object(b.b)(i.FunctionCode,{name:"enableVR",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Enables virtual reality on the device."),Object(b.b)("h4",{id:"examples-31"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Enable VR.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.enableVR();\n")),Object(b.b)("h3",{id:"playerdisablevr"},Object(b.b)("inlineCode",{parentName:"h3"},"player.disableVR()")),Object(b.b)(i.FunctionCode,{name:"disableVR",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Disables virtual reality on the device."),Object(b.b)("h4",{id:"examples-32"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Disable VR.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"player.disableVR();\n")),Object(b.b)("h3",{id:"playergetportaldimensionportal"},Object(b.b)("inlineCode",{parentName:"h3"},"player.getPortalDimension(portal)")),Object(b.b)(i.FunctionCode,{name:"getPortalDimension",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Gets the dimension that is loaded into the given portal."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the portal that the dimension should be retrieved for.\nPossible values are:"),Object(b.b)(i.PossibleValuesTable,{mdxType:"PossibleValuesTable"},Object(b.b)(i.PossibleValueCode,{value:"page",mdxType:"PossibleValueCode"},"The ",Object(b.b)(i.TagLink,{tag:"auxPagePortal",mdxType:"TagLink"}),"."),Object(b.b)(i.PossibleValueCode,{value:"sheet",mdxType:"PossibleValueCode"},"The ",Object(b.b)(i.TagLink,{tag:"auxSheetPortal",mdxType:"TagLink"}),"."),Object(b.b)(i.PossibleValueCode,{value:"inventory",mdxType:"PossibleValueCode"},"The ",Object(b.b)(i.TagLink,{tag:"auxInventoryPortal",mdxType:"TagLink"}),"."),Object(b.b)(i.PossibleValueCode,{value:"menu",mdxType:"PossibleValueCode"},"The ",Object(b.b)(i.TagLink,{tag:"auxMenuPortal",mdxType:"TagLink"}),".")),Object(b.b)("h4",{id:"examples-33"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Get the dimension that is currently showing in the ",Object(b.b)(i.TagLink,{tag:"auxPagePortal",mdxType:"TagLink"}),".")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const dimension = player.getPortalDimension('page');\n")),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Get the dimension that is currently showing in the ",Object(b.b)(i.TagLink,{tag:"auxInventoryPortal",mdxType:"TagLink"}),".")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const dimension = player.getPortalDimension('inventory');\n")),Object(b.b)("ol",{start:3},Object(b.b)("li",{parentName:"ol"},"Get the dimension that is currently showing in the ",Object(b.b)("inlineCode",{parentName:"li"},"#auxCustomPortal")," tag.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const dimension = player.getPortalDimension('auxCustomPortal');\n")),Object(b.b)("h3",{id:"playergetdimensionaldepthdimension"},Object(b.b)("inlineCode",{parentName:"h3"},"player.getDimensionalDepth(dimension)")),Object(b.b)(i.FunctionCode,{name:"getDimensionalDepth",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Gets the distance that the player bot is from the given dimension."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the dimension that should be searched for."),Object(b.b)("p",null,"Possible return values are:"),Object(b.b)(i.PossibleValuesTable,{mdxType:"PossibleValuesTable"},Object(b.b)(i.PossibleValueCode,{value:"-1",mdxType:"PossibleValueCode"},"The player bot cannot access the given dimension."),Object(b.b)(i.PossibleValueCode,{value:"0",mdxType:"PossibleValueCode"},"The player bot is in the given dimension. (dimension tag is true)"),Object(b.b)(i.PossibleValueCode,{value:"1",mdxType:"PossibleValueCode"},"The player bot is viewing the given dimension through a portal. (a portal tag is set to the dimension)")),Object(b.b)("h4",{id:"examples-34"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},'Get the distance to the "fun" dimension.')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'const distance = player.getDimensionalDepth("fun");\nif (distance === 0) {\n    player.toast("Player is in the fun dimension");\n} else if(distance === 1) {\n    player.toast("Player is viewing the fun dimension");\n} else {\n    player.toast("Player cannot access the fun dimension");\n}\n')),Object(b.b)("h3",{id:"playerinsheet"},Object(b.b)("inlineCode",{parentName:"h3"},"player.inSheet()")),Object(b.b)(i.FunctionCode,{name:"inSheet",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Gets whether the player is in the sheet dimension."),Object(b.b)("h4",{id:"examples-35"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Show a toast if the player is viewing the sheet.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'if (player.inSheet()) {\n    player.toast("You are in the sheet!");\n}\n')),Object(b.b)("h3",{id:"playerversion"},Object(b.b)("inlineCode",{parentName:"h3"},"player.version()")),Object(b.b)(i.FunctionCode,{name:"version",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Gets information about the version of auxPlayer."),Object(b.b)("p",null,"The returned value is an object with the following properties:"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const returned: {\n    hash: string;\n    version: string;\n    major: number;\n    minor: number;\n    patch: number;\n};\n")),Object(b.b)("h4",{id:"examples-36"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Get the current version and popup a message with it.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const info = player.version();\nplayer.toast(info.version);\n")),Object(b.b)("h3",{id:"playerdevice"},Object(b.b)("inlineCode",{parentName:"h3"},"player.device()")),Object(b.b)(i.FunctionCode,{name:"device",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Gets information about the device that the player is using."),Object(b.b)("p",null,"The returned value is an object with the following properties:"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const returned: {\n    supportsAR: boolean;\n    supportsVR: boolean;\n};\n")),Object(b.b)("h4",{id:"examples-37"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Get the device info and popup a message with it.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const info = player.device();\nplayer.toast(info);\n")),Object(b.b)("h2",{id:"server-actions"},"Server Actions"),Object(b.b)("h3",{id:"serversetupuniverseuniverse-botormod"},Object(b.b)("inlineCode",{parentName:"h3"},"server.setupUniverse(universe, botOrMod?)")),Object(b.b)(i.FunctionCode,{name:"setupUniverse",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Sends an action to the server that will create the given universe if it does not exist and places a clone of the given bot or mod in it.\nThe new bot will only be added to the universe if the universe did not exist.\nThe action is only executed if ",Object(b.b)(i.TagLink,{tag:"@onUniverseAction",mdxType:"TagLink"})," has been configured to perform events in ",Object(b.b)("inlineCode",{parentName:"p"},"device")," actions."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the ID of the universe that should be setup."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"second parameter")," is optional and is the bot or mod that should be cloned into the new universe. After the bot is created, ",Object(b.b)(i.TagLink,{tag:"@onCreate",mdxType:"TagLink"})," will be triggered."),Object(b.b)("h4",{id:"examples-38"},"Examples:"),Object(b.b)("p",null,"Before ",Object(b.b)("inlineCode",{parentName:"p"},"server.setupUniverse()")," will work, you need to setup the ",Object(b.b)(i.TagLink,{tag:"@onUniverseAction",mdxType:"TagLink"})," tag to execute events from remote devices.\nThis is because when you run ",Object(b.b)("inlineCode",{parentName:"p"},"server.setupUniverse()"),' from a PC or phone (a.k.a. A "remote device"), it needs to send an event to the server to actually create the new universe.\nBy default, AUX does not perform actions that are received from a remote device. You must instruct AUX to execute these yourself.'),Object(b.b)("p",null,"Ensure that ",Object(b.b)(i.TagLink,{tag:"@onUniverseAction",mdxType:"TagLink"})," is setup properly.\nThe following script will execute ",Object(b.b)("inlineCode",{parentName:"p"},"setup_universe")," events that were sent from other devices:"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"// Device actions are actions that were sent to this computer from another device\nif (that.action.type === 'device') {\n\n    // The setup_universe action is the action that is created\n    // from server.setupUniverse()\n    if (that.action.event.type === 'setup_universe') {\n\n        // Execute the setup_universe action\n        action.perform(that.action.event);\n    }\n}\n")),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},'Create the "test" universe:')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'server.setupUniverse("test");\n')),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},'Create the "test" universe with a bot inside it:')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'server.setupUniverse("test", {\n    "name": "bob",\n    "auxColor": "red"\n});\n')),Object(b.b)("ol",{start:3},Object(b.b)("li",{parentName:"ol"},'Create the "test" universe with a bot that places a bot in the "abc" dimension:')),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'server.setupUniverse("test", {\n    "onCreate": `@\n        create({\n            auxCreator: null,\n            auxLabel: "This is in the dimension!",\n            auxColor: "blue",\n            abc: true\n        });\n\n        destroy(this);\n    `\n});\n')),Object(b.b)("h3",{id:"serverbrowsehistory"},Object(b.b)("inlineCode",{parentName:"h3"},"server.browseHistory()")),Object(b.b)(i.FunctionCode,{name:"browseHistory",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Loads the ",Object(b.b)("inlineCode",{parentName:"p"},"history")," space into the current universe.\nThe ",Object(b.b)("inlineCode",{parentName:"p"},"history")," space is read-only and contains all the marks that have been created for the universe.\nEach mark is a bot that is placed in the ",Object(b.b)("inlineCode",{parentName:"p"},"#auxHistory")," dimension."),Object(b.b)("h4",{id:"examples-39"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Load the ",Object(b.b)("inlineCode",{parentName:"li"},"history")," space.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"server.browseHistory();\n")),Object(b.b)("h3",{id:"servermarkhistoryoptions"},Object(b.b)("inlineCode",{parentName:"h3"},"server.markHistory(options)")),Object(b.b)(i.FunctionCode,{name:"markHistory",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Marks the current state as a save point in history. This save point can be restored by using the ",Object(b.b)(i.ActionLink,{action:"server.restoreHistoryMark(mark)",mdxType:"ActionLink"})," action.\nNote that this only saves bots in the ",Object(b.b)("inlineCode",{parentName:"p"},"shared")," space. ",Object(b.b)("inlineCode",{parentName:"p"},"local")," and ",Object(b.b)("inlineCode",{parentName:"p"},"tempLocal")," bots are unaffected."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," are the options that should be used to mark the history point.\nIt should be an object with the following properties:"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"message")," - The message that the new mark should have. Use this as a way to communicate what was special about this save point.")),Object(b.b)("h4",{id:"examples-40"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Save the current state of the ",Object(b.b)("inlineCode",{parentName:"li"},"shared")," space.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"server.markHistory({\n    message: 'First Version of my AUX'\n});\n")),Object(b.b)("h3",{id:"serverrestorehistorymarkmark"},Object(b.b)("inlineCode",{parentName:"h3"},"server.restoreHistoryMark(mark)")),Object(b.b)(i.FunctionCode,{name:"restoreHistoryMark",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Restores the current state to the state that was saved by the given mark.\nThis will create a new mark with any unsaved changes and another mark with the state that was saved by the given mark."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the bot or bot ID of the mark that should be restored. You can find available marks in the current universe by using the ",Object(b.b)(i.ActionLink,{action:"server.browseHistory()",mdxType:"ActionLink"})," action."),Object(b.b)("h4",{id:"examples-41"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Restore the state to a given mark.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// Find a random mark that was loaded by server.browseHistory()\nlet mark = getBot(byTag("#auxHistory", true));\n\n// Restore the current state to the given mark.\nserver.restoreHistoryMark(mark);\n')),Object(b.b)("h3",{id:"serverrestorehistorymarktouniversemark-universe"},Object(b.b)("inlineCode",{parentName:"h3"},"server.restoreHistoryMarkToUniverse(mark, universe)")),Object(b.b)(i.FunctionCode,{name:"restoreHistoryMarkToUniverse",mdxType:"FunctionCode"}),Object(b.b)("p",null,"Restores the state in the given universe to the state that was saved by the given mark.\nThis will create a new mark with any unsaved changes in the universe and another mark with the state that was saved by the given mark."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"first parameter")," is the bot or bot ID of the mark that should be restored. You can find available marks in the current universe by using the ",Object(b.b)(i.ActionLink,{action:"server.browseHistory()",mdxType:"ActionLink"})," action."),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"second parameter")," is the universe that the state should be restored to. If ",Object(b.b)("inlineCode",{parentName:"p"},"null")," or an empty string, then the current universe will be restored."),Object(b.b)("h4",{id:"examples-42"},"Examples:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Restore the state of the ",Object(b.b)("inlineCode",{parentName:"li"},"test")," universe to a given mark.")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// Find a random mark that was loaded by server.browseHistory()\nlet mark = getBot(byTag("#auxHistory", true));\n\n// Restore the current state to the given mark.\nserver.restoreHistoryMarkToUniverse(mark, "test");\n')))}p.isMDXComponent=!0}}]);